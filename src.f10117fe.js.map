{"version":3,"sources":["../../../src/constants/bt709.ts","../../../src/constants/index.ts","../../../src/conversion/rgb2xyz.ts","../../../src/utils/arithmetic.ts","../../../src/conversion/rgb2hsl.ts","../../../src/conversion/xyz2lab.ts","../../../src/conversion/rgb2lab.ts","../../../src/conversion/lab2xyz.ts","../../../src/conversion/xyz2rgb.ts","../../../src/conversion/lab2rgb.ts","../../../src/conversion/index.ts","../../../src/distance/distanceCalculator.ts","../../../src/distance/cie94.ts","../../../src/distance/ciede2000.ts","../../../src/distance/cmetric.ts","../../../src/distance/euclidean.ts","../../../src/distance/manhattan.ts","../../../src/distance/pngQuant.ts","../../../src/distance/index.ts","../../../src/palette/paletteQuantizer.ts","../../../src/utils/point.ts","../../../src/utils/pointContainer.ts","../../../src/utils/palette.ts","../../../src/utils/hueStatistics.ts","../../../src/utils/progressTracker.ts","../../../src/utils/index.ts","../../../../src/palette/neuquant/neuquant.ts","../../../../src/palette/neuquant/neuquantFloat.ts","../../../../src/palette/rgbquant/colorHistogram.ts","../../../../src/palette/rgbquant/rgbquant.ts","../../../../src/palette/wu/wuQuant.ts","../../../src/palette/index.ts","../../../src/image/imageQuantizer.ts","../../../src/image/nearestColor.ts","../../../src/image/array.ts","../../../../src/image/spaceFillingCurves/hilbertCurve.ts","../../../src/image/riemersma.ts","../../../src/image/index.ts","../../../src/quality/ssim.ts","../../../src/quality/index.ts","node_modules/core-js/modules/_global.js","node_modules/core-js/modules/_core.js","node_modules/core-js/modules/_is-object.js","node_modules/core-js/modules/_an-object.js","node_modules/core-js/modules/_fails.js","node_modules/core-js/modules/_descriptors.js","node_modules/core-js/modules/_dom-create.js","node_modules/core-js/modules/_ie8-dom-define.js","node_modules/core-js/modules/_to-primitive.js","node_modules/core-js/modules/_object-dp.js","node_modules/core-js/modules/_property-desc.js","node_modules/core-js/modules/_hide.js","node_modules/core-js/modules/_has.js","node_modules/core-js/modules/_uid.js","node_modules/core-js/modules/_library.js","node_modules/core-js/modules/_shared.js","node_modules/core-js/modules/_function-to-string.js","node_modules/core-js/modules/_redefine.js","node_modules/core-js/modules/_a-function.js","node_modules/core-js/modules/_ctx.js","node_modules/core-js/modules/_export.js","node_modules/core-js/modules/_invoke.js","node_modules/core-js/modules/_html.js","node_modules/core-js/modules/_cof.js","node_modules/core-js/modules/_task.js","node_modules/core-js/modules/web.immediate.js","node_modules/core-js/fn/set-immediate.js","../../src/basicAPI.ts","../../src/image-q.ts","src/comparator.ts","src/brush.ts","src/index.ts"],"names":[],"mappings":"AkEAA,ARAA,AfAA,AoBAA,AtBAA,AkBAA,AdAA,ACAA,AFAA,AYAA,AJAA,ADAA,AWAA,AfAA,AcAA,AnBAA,AYAA,ALAA,ACAA,AFAA,AKAA,AYAA;ACCA,ARAA,AfAA,AoBAA,AtBAA,AkBAA,AdAA,ACAA,AcDA,AhBCA,AYAA,AhBDA,AYCA,ADAA,AWAA,AfAA,AcAA,AnBAA,AYAA,ALAA,ACAA,AODA,AFAA,APCA,AKAA,AYAA;ACCA,ARAA,AfAA,AoBAA,AtBAA,AkBAA,AdAA,ACAA,AcDA,AhBCA,AJDA,AYCA,ADAA,AWAA,AfAA,AcAA,AnBAA,AOAA,ACAA,AODA,AFAA,ASDA,AhBEA,AKAA,AYAA;APCA,AfAA,AoBAA,AJAA,AdAA,ACAA,AcDA,AhBCA,AJDA,AYCA,ADAA,AJAA,AcAA,AnBAA,AOAA,ACAA,AODA,AFAA,ASDA,AhBEA,AKAA,AYAA;APCA,AfAA,AoBAA,AJAA,AdAA,ACAA,AcDA,AhBCA,AJDA,AYCA,ADAA,AUAA,AZAA,ACAA,AODA,AFAA,ASDA,AhBEA,AKAA,AYAA;AtBCA,AoBAA,AJAA,AbAA,AcDA,AhBCA,AJDA,AWCA,AUAA,AZAA,ACAA,AODA,AFAA,ASDA,AhBEA,AKAA,AYAA;ANCA,AbAA,AcDA,AhBCA,AJDA,AWCA,AUAA,AZAA,ACAA,AODA,AFAA,ASDA,AhBEA,AiBAA,AKNA,ADAA,SCAS,ADAA,EAAT,CAAY,CAAZ,EAA0B,CAA1B,EAAsC,KCAtC,CAAwB,OAAxB,EAA4C;AnCA5C,AT6BA,ACFA,ACbA,ACCA,ACRA,A9BPA,ACOA,AQAA,AFPA,AHOA,AEAA,AJPA,AGAA,AGOA,AIAA,ACAA,ACAA,AHEM,AIFN,ACAA,ACAA,AiBAA,AFIM,ACJN,AGmBA,AjBfM,AmBHN,AfDA,AHAA,ACAA,AGPM,AmCON,AbAA,AcDA,AhBCA,AJDA,AWCA,AUAA,AZAA,ACAA,AODA,AFAA,ASDA,AhBEA,AsBNE,ADAA,M1DQI,AqBEA,AbAA,AKXA,A8CCA,ADAA,IAAI,GCAG,ADAA,CCAC,ADAZ,MCAI,C9CDA,CAAA,C8CCiB,CAArB,EAAwB,EtCUpB,CAAA,CbAA,CAAA,CRFA,CAAA;AASJ,AqBJA,AbCA,AGNF,AECE,AmCFF,ACDA,ATCA,AUAA,AZAA,ACAA,AODA,AFAA,ASDA,AhBEA,AsBNI,E3DgBF,AqBJA,AbCA,AKLA,M8CRQ,GAAG,E3DgBX,AaRA,CQIY,AbCA,AKLA,A8CRE,CtCYD,CrBIb,CQHY,ImDbS,CAAC,E9CQtB,EAAgC,A8CRN,CAAC,EtCYf,EAAiC,CsCZvB,CAAW,IAAI,CtCYzB,AsCZ0B,C9CQtC,CQI6D,CRJR,G8CRpB,KAAgB,OAAO,CAAC,MAAnC,CAAD,CAAnB,CADsB,CAEtB;AnCAJ,AT2BA,ACFA,ACZA,ACAA,ACRA,ArBAA,ALRA,AEQA,AERA,AIQA,ACAA,ACRA,AHmBI,AIXJ,ACAA,ACRA,AiBWA,AFII,ACHJ,AGeA,AjBXI,AmBNJ,AfFA,AHRA,ACAA,AGWI,AmCFJ,ACDA,ACCA,AZAA,AQDA,AFAA,ASDA,AhBEA,AqBPE,IlCCG,GkCDE,E1DiBE,AqBJA,AbCA,AKLA,E6CTE,CAAC,ClCCZ,EHYe,AbCA,AKLX,A6CTW,CAAb,E7CSgB,A6CTA,CAAC,CrCaf,AbCA,CRGA,C0DjBkB,CAAC,C1DgBrB,AqBHsB,AbCA,AkDdA,C1DmBpB,GaVA,A6CTkB,CrCaO,AbCA,AkDdA,MAA3B,ErCasB,AbCA,AkDda,CrCaC,CbClC,AkDdmC,CAArC,ClDcuC,CkDdC,UrCalB,EAA8B,OAA9B,CAApB,EAA4D;AAC1D,AbCA,AmBNN,AhBAA,AECI,A2CLJ,ARGA,ACDA,ACCA,AZAA,AQDA,AFAA,ASDA,AhBEA,AsBNI,ADDA,QAAM,C7CSD,A6CTE,CrCaD,AbCA,CmDbC,CDDG,GrCaC,AbCA,CaDC,AbCA,AkDdE,CCCD,ADDE,GCCC,ADDN,CCCO,ADDE,CAAC,ClDclB,AKLF,A6CTqB,ElDcA,CKLC,C6CTH,CAAO,CCCb,ADDM,CrCajB,AsCZwB,EtCYE,AsCZf,CDDkB,CCCD,IDDX,C7CSnB,C8CRa,CAAwB,ADDE,CCC1B,ADD2B,CAAC,CCCD,CAA3B,CAAb,CDDuC,CAAO,CAAP,IAAY,KAAzC,CAAV;AlCAJ,AT8BA,ACFA,AC/BA,ACmBA,ACRA,ArBXA,AHAA,AMSA,ACAA,AETA,ACAA,AkBYA,AFKQ,ACjBR,AG+BA,AjBbQ,AmBNR,AfZA,ACaI,AmCFJ,ACDA,ACCA,AZAA,AQDA,AFAA,ASDA,AhBEA,AsBNG,ADDC,ClCDJ,EmCFE,CDGE,E/BQE,EAAE,A+BRA,C7CSC,A8CRA,EnCFJ,AGSM,C+BRC,CAAC,C7CST,CQIW,AbCA,AmBNf,C+BRgB,C/BQC,AdCA,A6CTb,GlCDJ,AHcoB,AbCA,CaDC,AbCA,AKLA,CWVP,AXUQ,GAAL,CAAS,CAAT,CLKT,CKLqB,KAAK,CQI1B,KRJqB,IAAe,eAAe,CAAC,KAAhB,GAAwB,CAAvC,IAA4C,CAAxD,CAAb;AWTF,AxBkBE,AqBJG,AbCA,AoBZP,AjBPA,AEcI,A2CNJ,ARIA,ACDA,ACCA,AZAA,AQDA,AFAA,ASDA,AhBEA,AsBNI,ADDD,AELH,EpCIE,EoCJF,IDMQ,C3DgBC,AaRA,EWVP,CAAA,CoCJF,C/CcI,C8CRW,CCNf,C/CciB,CAAC,A8CRA,GnCFhB,CAAA,AxBkBE,CAAmB,AaRA,A+CdvB,CAAA,E5DsBI,EwBlBF,AxBkB0B,AaRxB,CWVF,ExBkBE,CwBlBF,CAAA,AxBkB+B,A4DtBjC,CpCIE,AoCJF,E5DsBI,A2DhBA,CnCFF,CxBkBoC,GAAlC,EwBlBF;AACA,AT8BF,ACFA,AEbA,ACPA,AlBbA,ACAA,AFuBG,AuBTH,AFKK,AIaL,AjBZK,AmBPL,AnCbM,AqBeF,AmCFJ,ACDA,ACCA,AZAA,AQDA,AFAA,ASDA,AMJI,EnCFF,IGQI,EAAE,AgCNA,CnEPF,AqBeG,EWVP,AGQS,CHRT,CmCEW,EhCMb,CgCNgB,ChCMC,AdEb,E8CRA,C9CQgB,CWVlB,AXUE,CWVF,EhCLI,CAA0B,CgCK9B,AhCLI,CgCKJ,ChCLuC,EgCKvC,CAAA,CAAA,GAAA,IAAA;AACA,A5BCF,ALAA,AGAA,AFNE,AqBeC,A2CPH,ARKA,ACDA,ACCA,AZAA,AQDA,AODA,AKNE,AEJF,EpCIE,EoCJF,EhEKM,AFAA,GHAN,ACNS,AkEKA,C9DCC,AFAA,AFNA,CgCKR,CAAA,C5BCW,AFAA,AgEDX,ClELY,EoECd,EpEDkB,CAAC,AoECnB,ChEKA,AFAA,C8BDE,AjCCF,ACNc,CgCKZ,A5BCoB,ALAA,AGAA,CHAtB,CCNwB,CDMO,ECNrB,CgCKR,AhCLA,CgCKA,GAAA,CAAA,CAAA,AoCJF,CAAA,EpCIE,KoCJF,CpCIE,AoCJF,cAAA,CAAA,CAAA;ApCKE,ATPF,ACAA,AEsBA,ACtBA,A9BQA,AEAE,ASiBA,AuBzBF,AFqBI,AIrBJ,AjBsBI,AmBPE,AnCbL,AwDaD,ACDA,ACCA,AZAA,AQDA,AODA,AMLI,ADDH,ElCAC,AxBkBA,OTjBO,AoCOH,AgCPG,CpEAC,A8BaA,AbCA,CgBfR,CAAA,CjCCW,AoCOP,AgCPO,CtCaC,AbCA,AmBPO,AgCPP,C3DiBC,CAAC,CAAD,A2DjBE,CAAb,C3DiBuB,AqBJjB,AbCA,CjBdD,ASiBM,AqBJK,AbCA,AmBPd,AgCPc,CnCDlB,AmCCmB,CnCDnB,AxBkBoC,A2BVO,CpCPtB,ASiBR,C2DjBS,C3DiByB,A2DjB7C,C3DiBW,CTjBY,AoEAA,CpEAC,ASiB8B,A2BVpD,AgCPsB,CnCD1B,CAAA,AGQiE,AgCP/D,CpEAmB,CAAS,AoEAA,CnCD9B,AjCC+B,A8BavB,AbCA,CgBfR,AjCCgC,A8Ba9B,AbCA,CgBfF,EjCCmC,CiCDnC,IjCC8B,GiCD9B,CjCC4C,KAAvB,EAA8B,GAA9B,CAAd,GAAmD,CAAC,GAAG,KAA9D;AiCAA,A5BAF,ALCC,AGDD,AGCA,AGiBI,AqBJD,AbCA,AmBPD,AdEA,A2CRF,ARMA,ACDA,ACCA,AZAA,AQDA,AODA,AMLM,ACNN,EpCKE,AXUA,E+CfF,EhEKM,AFAA,AiCQA,AgCPA,G3DiBG,CJlBC,AFAA,C8BAR,AmCCS,ACNX,CpCKE,AGQU,C/BRC,AFAA,AiCQA,CdEC,A+Cfd,C/Cee,A8CTA,K/DDf,AFAA,AMkBI,CwBlBF,CAAA,A5BAoB,AFAA,AiCQhB,AdEQ,A8CTQ,C3DiBC,A2DjBA,C9CSO,G8CTH,CnCDzB,AmCC0B,CnCD1B,AGQ2B,AiCb7B,CAAA,EpCKE,CAAA,AmCCqB,CnCDrB,AmCCgC,ChCOC,CAAC,CHRlC,AoCLF,CDMsC,ACNtC,CDMuC,InCDrC,EGQ2B,AgCPK,EhCO5B,AiCbN,CAAA,CAAA,CDMkD,ChCOC,CgCP5B,CAAD,CAAhB,GhCOmD,CAAC,QAAP,OAAsB,MAAM,CAAC,QAAP,EAAvE,EAA0F;AHP3F,ANcD,AzBdA,AICA,AMDA,AHkBM,AMlBN,AqBQI,AnCbE,AiBYN,ACPA,AGUI,AmCFJ,ACDA,AHAA,AODA,AMLK,ADDL,ClCNA,EAAK,GxBwBC,CAAC,CaRC,ChBTR,AGiBU,ARvBJ,AkEKkB,C1DkBb,A2BVD,EHdI,CxBwBA,ARvBR,CQuBG,A2BVK,AnCbO,CAAf,AqBeS,C6CVf,ClCNK,AxBwBc,ARvBa,AkEKA,ClEL1B,AqBeY,A6CVlB,C/BQU,CAAU,AnCbuB,AkEKG,C7DC9C,ALNM,AkEKN,C7DCsB,CAAtB,AGiByB,ARvB2B,AqBe7B,A6CVmC,C1DkBjD,CHjBsB,C2BPjB,CxBwBe,CADN,AaPf,CWhBM,EAAA,CAAd,AXgBgC,KAAK,KAAjC,EAAwC,McFlC,CAAN;AVVJ,AnBGA,AFDA,ADCM,AJCA,AGFN,AGEE,AGiBI,AqBjBA,ACGA,AdHA,AmBOH,AnCbD,AoBKF,ACUM,AmCFN,ACDA,AHAA,AODA,AKNE,AELF,IAAA,EhEIM,AFAA,AMmBA,AsBdA,A9BTA,AoBKN,CZkBO,ARvBA,EGKD,AJCA,AMAG,AGiBC,A0DlBD,C9DDC,AFAA,AGEA,AGiBC,ARvBD,CAAR,AqBeS,A6CVA,CAAC,C9DDC,AFAA,AGEA,AGiBC,A0DlBH,C1DkBF,AYlBT,AgDLA,ChDKA,A8CAe,C/DAT,AJCA,AsBSA,A6CVK,C/DAa,AJCA,ASiBL,A0DlBjB,C/DAI,AJCA,A+BGA,CTMa,CjBXnB,ADCmC,AJCA,AGFnC,CCCM,AJCA,CKFgB,AFAA,AGEb,CFDqC,AJCA,ASiBrB,CLlBnB,AJCA,ASiBG,CHjBgB,CFD8B,AJCA,AsBSjD,CbQuB,AsBdK,CtBYX,KHfU,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAI,GAAhB,CAAR,GAA+B,KAA/C,GAAuD,CyBG1D,CAAkD,MzBHgB,CAAtE;A2BWI,ANtBN,A7BYA,ASDM,AHAJ,AJCA,AMAD,AGiBK,AInBN,ACAA,AiBOE,A9BXA,AoBIF,ADGA,AEQM,AmCFN,ACDA,AHAA,AODA,AMNI,ADAH,AEND,EtCYE,AVPF,EvBEY,CAAZ,CWiBM,ARvBA,CQuBC,ARvBA,CGKC,CGAF,AEkBI,CwBPO,AxBON,ARvBD,CGKC,AHLT,AqBeS,A8CVA,E3DkBG,AsBZZ,A9BXW,AoBIb,CjBCc,AKkBL,AsBZK,A9BXA,EMKR,AcDN,A+CCI,C7DAoB,AEkBL,ARvBF,CMKX,ANLO,CqBeP,CfV6B,CAA7B,C0BWA,AXDgB,CWCS,A1BXe,AEkBrB,CFlBnB,AEkBG,EFlB8C,AeU7B,CbQG,AaRF,CWCrB,AxBIiB,EwBJuB,AXDxB,CAAS,KWCzB,A7BXgB,AkBUc,ClBVtB,A2BMZ,CEK4D,C7BXrC,A2BMwC,C3BNnD,EAAc,CAAd,CAAZ,E6BWI,EAAgG,EXDvE,GAAsB,KAAK,KAA3B,GAAmC,KAAK,MAAjD,EAAyD,KAAK,cAA9D,CAAhB;AWEJ,A1BXA,AFDF,ADCE,AJCA,AGFF,AQAA,ACCM,AHkBA,AsBZF,AKEF,AnCbA,AoBIA,ADIF,AEOM,AmCFN,ACDA,AHAA,AODA,AMNG,ACPH,ErEQE,CAAC,GAAG,AYDA,AHkBA,ARvBA,AmBQA,CXeC,ARvBA,CgCgBC,A1BXA,A6BQA,C/BTR,ADCS,ADDT,AMmBU,AYnBR,CZmBS,ARvBD,CMKC,ANLT,CoBIA,AgDNF,CzDOM,AHkBQ,ARvBD,AqBeA,CfVC,AFDd,AFAA,AMmBS,ARvBK,CIIC,AFAA,AkBAP,ADIO,CaQC,A5BZhB,AFAA,AkBAE,CZmBiB,ARvBF,AqBeX,CjBXkB,ALEN,AGFM,AFJX,AmBQK,CaQC,AjCVA,CAAC,AoBEpB,ERH6B,CqBWN,AjCVA,ASiBE,CwBPD,AxBOf,A2BVe,EpCPN,CiCUC,AjCVjB,ASiB2B,A2BVF,CHGC,AGH1B,GhCRe,E6BWE,C7BXC,C6BWe,A7BXd,CGAC,AHAb,CGAK,CHAU,CGAC,CAAX,C0BWK,A7BXQ,C6BWzB,A1BX0B,AHAA,CGAd,AHAL,CGAP,CHA6B,GAAG,CAAC,CAA1B,CAAP,iBQAI,CAAiD;AqBYrD,A1BXA,AFDA,ADCD,AJCC,AGFA,AGEI,AIHN,ACCA,ACCE,AHaqB,AsBPnB,AKEF,AnCbA,AoBIA,AFCI,AGUD,AoCHL,AHAA,AODA,AMNC,ADJD,AEQE,ErEHA,AYDA,CZCC,ESYC,CTZE,AmBDA,CgDJN,ClCeQ,AGHA,A+BZR,C5DIS,AFDA,AFAA,AGEH,AyBKG,AKEA,AnCbA,AoBIP,ChBAQ,AFAA,AFJR,CoESA,CjCIU,CHGC,A5BZA,AFAA,AiCSA,AfTX,CTCY,CAAC,AuDJf,ClCegB,A3BVV,AeFa,CfEK,AMDV,CZCI,AMAZ,AyBKF,AKEc,AfThB,A8CHF,CnEKmB,AYDQ,CqBWP,AjCVA,AMAe,AaD7B,CcWe,A9BZZ,AGEH,AMDQ,AmBMO,AZNf,AkDIJ,ErEHqB,AMAuB,AMDP,CPD9B,AFAe,AGElB,A+DGJ,CzDJY,AuDJd,ClCegB,AjCVE,AMAqC,C2BU5B,A5BZA,ALEzB,AYDiD,CTDvB,CAAC,ASCf,EqBWiB,A1BXd,AFDc,AOCgC,CqBW/B,A5BZA,AFAR,CAAS,ASCnB,CLAM,AJDI,AiCSZ,CHGe,A1BXN,AFDM,AOCgD,CqBWvC,A1BX3B,AFD2B,AFAA,CEAT,AOCb,CLAU,A6BQc,C/BTC,AOCgD,AwBQrF,C/BTyB,AFAa,AiCG2B,C7BFxC,AFDlB,AFAe,ASCV,AwBQ2B,C7BRb,AJDnB,CICA,AKA0F,CqBWxE,A5BZiB,A0BOxC,CxBN2B,AFDc,AFAC,ASChC,CPDgC,COC+D,CqBW7D,A1BXd,CAAC,AFDc,CECxC,CAAP,C0BWkD,CAAC,A9BZC,CEAA,AFAR,E8BYE,CAAS,A5BZb,AFAc,C8BYV,CAArB,E5BZkC,C4BYC,A9BZC,C8BY/C,CAAd,C9BZA,CEAA;A4BaA,ALVF,A9BHA,ASEC,AFDA,ALEC,AGFD,AGEC,AMDE,AHkBA,AInBE,ACAA,AkBGN,ADIG,A9BXF,AoBIA,ADIK,AFIA,ACHJ,A8ClBF,APqBA,AHAA,AODA,AOFI,CvENJ,COGA,ALAE,AmBGA,CnBHC,GAAG,AaFA,ACAA,AIQA,EeIE,CLVR,AnBiBS,AWfH,AiDCG,CzDJC,CdFE,AoBSN,CpBTN,AoBSM,CCHJ,CrBNW,CmCaE,ArBXA,COIb,CCDI,CaQY,AjCVA,AYDA,AQGO,CpBFN,AYDA,CZCC,CYDC,AHkBjB,AWfE,CaQgB,ALVtB,CAAuB,A5BAA,AaFjB,ACAA,AMIgC,CRHd,AHkBA,A4DdpB,ErEHc,AYDA,CZChB,AqEGyB,CrEP4B,AqEOnD,CrEDF,ASe2B,CGlBC,CAAZ,CCD8B,ACAA,CcEhD,ChBDkC,CgBCO,EREnC,ERHiC,AQGqB,EXepC,CAAkB,CAAlB,EAAqB,CAArB,EAAwB,CAAxB,CGlBU,CAAiB,AHkBA,CGlB/C,AHkBoB,EwBPN,AxBOoC,CwBPhB,AxBOd,EAAiC,CAAjC,EwBPmB,AxBOiB,CAApC,EwBPsB,AxBOiB,CAAvC,CAApB,IwBPc,EAAoC,EAApC,CAAhB,IpBZI,ACAA,CDAoE,ACAA;AmBaxE,ALVA,A9BHA,AQGA,AKFF,ACCI,AHkBD,AIdD,ACAA,AkBFF,ADKE,AKAA,AhBJA,AFUA,ACTE,AGMA,AoCHJ,AHAA,AODA,AMNA,ACII,EvENF,AeMA,ACAA,ChBNA,CAAA,AkCIU,ClCJV,CAAA,EmCaM,ALVA,AtBAA,A8BMA,AhBJA,CQFC,AtBAA,AaGA,AiDJA,ACIA,CzDJC,AwBOA,CtCTR,AcES,AUUA,CWCC,ALVU,A9BHpB,AQGU,C8BMC,CRNX,AhBDY,ACIA,ACAA,AMDA,CaQC,AnCbb,AcEa,ACIA,ACAA,AKAX,CGMA,CVVa,ACIH,ACAA,AsBGG,AhBJA,CgBIC,AjBHA,CNAS,ACAA,AKAvB,CPJgB,AQGlB,AgDHF,CtEFE,AeMY,ACAA,AsBGD,AgCPQ,CtEFnB,AcEY,AwBOS,CvBHgB,ACAA,AuDAnC,C/DHoB,A8BMC,AgCPzB,CtEFE,AQGuB,AOGX,ACAA,CRHY,AMDA,AwDA0B,ACI1B,CxDAyB,ACAA,AsBGvB,AiCHxB,CjCGS,C9BNgB,AOGf,ACAA,AkBFd,ClCJE,AsCS8B,CxBPD,ACIgC,ACAA,AsBGlD,CAAX,CvBHY,ACAA,AsDJd,E9DCyB,AOGkD,ACAA,AsDJH,EvDI1D,ACAA,CRHwB,CAAC,AOGgD,ACAA,EDAzE,ACAA,CRH4B,AMDhB,CNCiB,AMDA,ACIwD,ACAA,CFJ/F,CCIU,ACAA,EDA+F,ACAA,ERHpF,GAA2B,CAAC,GAAG,CAAC,MAAjC,CAAtB;A2BWE,AnCdW,AIGT,AFEJ,AGHI,AGEJ,AMDE,ACIA,ACAA,ACJE,AqBOJ,AnCZI,AoBDN,ADSE,AFWA,ACVE,AGMD,AoCHH,AHAA,AODA,AMNE,ACIE,EvEPW,AsEGb,CtEHa,CmCcX,AnCdW,CAAA,AsEGV,CtEHU,AiBGT,AqDAA,E9DCE,AQGA,AsBGA,AhBJA,CaOO,A/BVT,AFEG,AGHH,AGEG,ALNH,AiBmBG,ACVA,AkDAA,CzDJC,ACIA,ACAA,AsBGA,CxBPC,AQGA,CdFC,AOGA,CfPG,AgBOF,AsBGA,AnCZP,CHES,AcGD,AGAR,AdLe,AmBQP,CRHC,ACIA,ACAA,AbTT,AmEKJ,ClEAI,ACDA,AgBKF,AkDAA,CvEPW,AIGS,ACDA,ASCP,ACIA,AuBGA,AnCZe,CCK1B,ACDA,AWKY,AsBGA,AnCZZ,AmEKY,CjDIC,AkDAA,CnEJgB,ACDA,ASCf,ACIA,ACAhB,AbTuC,AmBQvB,ADChB,CjBJE,ACDA,AiCQO,AnCZP,CWKQ,ACIV,AuBGmB,CtCVR,AIG+B,ACDA,AYChB,AdLsB,AmBQ7B,AiDCA,CvEPR,AIGT,ACDA,AGEkB,A8BMC,C9BNA,CJD8B,ACDA,AGE7B,AMDA,CdHX,AsCUa,AlBO1B,CkBPW,AlBOe,CZbC,CAAC,A8BME,CxBPD,AwBOlB,CAAX,AgCP8B,CAAC,CtEHlB,AuEOI,CAAgB,C/DHV,A+DGN,CjDDjB,AiDCE,CnDUF,CZbqC,CAAC,AYaQ,AkDdhB,CAA9B,CxDAwB,AwDD8C,C9DE7B,AMDA,AwDCzC,CxDDE,KNCqB,GAA2B,CAAC,GAAG,MAAhC,CAAtB,MSDI,CAAkD;AkBYpD,APHE,AERJ,A9BJ4B,AOGxB,AHCJ,AFEE,AGHF,AGEA,AIHI,AEEF,AHkBF,AIdE,ACAA,ACJF,AqBQA,AnCbA,AmBQA,AFWE,ACVA,AuCGJ,AHAA,AODA,AOFI,EvER0B,AKG5B,AMmBA,CXtB4B,AKG3B,C8BYC,AnCf0B,AEM1B,CFN0B,AEMzB,C0BMC,A5BZwB,AKGxB,AODA,A0BUA,AnCbA,C2BKC,A5BEA,ACPA,CCKC,AFEA,AMDA,AQGA,AMDA,CfJF,ACEG,AaGA,AkDAA,CpCKM,ArBTL,ACIA,ACAA,AbTA,AiBmBA,CUdC,A1BAA,AFEA,AGHA,ASCA,AXLT,C2BKU,A9BJkB,AKGlB,AGEA,AOGA,AODA,CtBPkB,AKGjB,AWKA,CZJC,AUAA,CgBAC,AhBAA,ACIA,ACAA,AMDA,AFWA,CUdb,A9BJ4B,AOGxB,AFAU,AiCSA,C/BTQ,ALGjB,AYFU,ACIA,CeJC,AvBDZ,ASKY,AMDA,AFWA,CUdC,AlBFb,A0BUa,AiCJf,C3CIE,ArBT6B,ALGf,AGHT,ASCS,ACIA,ACAhB,AsBIF,AjBJE,COIE,ArBTA,ALGe,AGHnB,AMmBmB,AWfA,CQHC,A9BJQ,AcIhB,AHkBQ,AIdlB,AODF,AFWoB,AmDVA,CvERQ,AOGgB,AcKvB,CdLjB,ALGkB,AMDA,CAAC,AaGrB,CrBR0B,AOGyB,ACE7B,AMDA,CMcR,CRhB0B,ADoBvB,A4DdO,C/DHC,AYazB,AmDVyB,CrEFtB,ASgBkC,CGlBV,CgBA7B,A9BJ4B,CEMG,C4BFC,A5BEA,C4BFC,AtBCV,CJDN,AOkBE,CmBlBnB,A1BAY,AFEuB,CMDC,AGiBoB,A4DdtD,CzCJmC,A1BAjB,AICiB,CJDzB,EAAW,AICiB,AMDhB,CVAZ,AFCL,AMAkC,AMDA,CVAzC,AUAE,KNCqB,GAA2B,CAAC,GAAG,MAAhC,CAAtB,WIHI,CAAgE;AuBclE,APeF,ACrCF,ACWI,A9BLwC,AOI1C,AHCA,AFEE,AGHF,AGGA,AIMA,AERE,AHkBA,AIdA,ACAA,AkBLJ,AISE,AnCbA,AoBEI,AHkBF,ACXD,AGtBG,AoCyBN,AHAA,AODA,AMLE,ACGE,CrCLJ,CN2BE,A5B/B0C,AKI1C,AOSA,CZb0C,AKIzC,C8BYC,ALXA,A9BLwC,AEOxC,AkBaA,CUfC,A9BLuC,AEOvC,C4BFE,A9BLqC,AKItC,AiCSA,AnCbA,AoBEA,A+CIE,CxCDH,A5BEE,ACPA,AmEME,CxCDL,AvBDI,AHCA,AFEA,AcEA,CmBIO,A5BTN,ACGA,AYaA,AmDXA,CzDJC,ACIA,ACAA,AbTA,AiBoBA,AkDdE,CxCDC,A1BAF,AFEA,AGHA,AMmBA,AuBnBC,AISD,AnCbT,AiBoBE,CUfA,AvBDQ,AFAA,ASCA,ACIA,CasBV,A5B/B0C,AOI/B,AFAA,AWKA,AbTA,CyB+BC,A5B/B8B,AOI9B,AHCA,AQQA,A0BAA,AnCbA,AiBoBA,AkDdE,C1DOD,AERC,ACID,ACAA,AsDHE,ACGb,ClELY,ASCE,AHkBF,CXvB4B,AOI3B,ALGV,AUMO,AERK,ACIF,AuBIf,AnCbe,CHA2B,AgBS1B,AsBPiD,AnCFtD,AoESK,CvET0B,AOIhC,AKSe,A0BEzB,AfbI,CK6BJ,A1BxBkB,AGHT,AUKS,ACAhB,AOPE,CrBKe,AGHnB,AOSY,A0DPF,C1CyBkB,A5B/Bc,AeSxC,CRLmB,AKSgB,AERd,CZED,AkBaA,CRPV,AQOY,CbhBxB,AagBsB,AkDdI,ACGF,C3DIyB,AQOrC,AmDXa,C3CsBzB,Ad1BgB,AHkBP,CXvBiC,AYa9B,ADUe,A2DjBE,C1CyBa,A1BxBrC,AkBayB,AkDdA,C1DO+B,AQO3D,CNf8B,CZED,AUMnB,AERI,CZEgB,CUMyC,ADUxC,CPlBhB,AUAmB,AHkBF,AuBnBpC,AoCE4B,ClEDd,AFEuB,AUMvB,AERG,AHkBN,A2DjB4B,CpCFF,C9BCf,AQQiE,ADUhD,CPlBzB,AmEII,C3DIJ,AER8B,AyDIH,CnEJhB,AUAT,AwDCd,ClEDY,AFAL,AUQ0F,CRRjG,CQQY,ADU+B,CGlBI,AHkBH,CCV+D,ADUlG,EAAsC,A4Dd/B,CzDJmC,AyDIjD,CzDJ6C,GAAQ,CAAzC,AHkBuC,CAAC,CAA7C,EGlBoD,AHkBJ,CGlBK,KHkBC,CGlBK,AHkBJ,CAAvD,EAA0D,EGlBN,IAAgB,AHkBJ,CGlBZ,AHkBa,CAAjE,EGlBwE,AHkBJ,CGlBjB,IAA2B,CAAzE,AHkBqE,CGlBjF,AHkBkF,CAA3E,EAA8E,MAAM,CAAC,CAArF,EAAwF,MAAM,CAAC,CAA/F,IAAoG,KAAK,YAAhH;AwBNA,APeA,AE1BD,A9BLF,AOIC,AHCA,AFEE,AGHF,AGGE,AIMA,ACTE,ACCF,AHkBD,AIdC,ACAA,AkBLF,A/BJA,AoBOA,ADCA,AFYE,AwCRJ,AHAA,AODA,AMLE,ACGE,CvEXJ,CKME,A6BAA,AXGA,CvBTU,AKMT,C8BYC,AnClBS,AEST,AMAA,AYaA,ClBbC,AMAA,CHHC,AQAA,AVJA,AmEME,CpECD,AMAA,ALPA,AmBQA,AgDFE,C/DFD,AHCA,AFEA,AcEA,CTLC,AagBA,AmDXA,C3DIC,AERA,ACIA,ACAA,AbTA,AiBoBA,AkDdE,CpECD,AGHA,AFJT,AmBQS,AFYP,CeRW,A5BRH,AFAA,ASCA,ACIA,AODA,CfJC,AHCA,ACDA,AWKA,AbTA,AoBOX,CXMY,ATbA,AoBOA,AHaA,AkDdE,CzDFV,ACCS,ACIA,ACAA,AMDA,AgDFE,C/DFD,AHCA,ACDA,ASCA,AQGT,CpBDA,AUMU,AGJA,AZTA,CWKC,AEIA,AbTL,AmBQK,AiDCd,ChELQ,AHCO,CFEC,AGHT,AUKS,ACAhB,ChBXQ,AESS,AGHnB,ASCmB,AQGA,AgDFT,ACGS,CvEXR,AOMS,AHCA,AWIlB,CRLF,AOCa,ASEb,CrBAsB,AWHO,ASIP,AFYA,CpBtBX,AIOX,AmBE+B,AHaP,CAAF,AkDdI,CtERf,AcOc,AoBDzB,AZIyB,AFYb,CpBtBd,AkCME,CoCE6B,ACGF,CrEFtB,AoBCuB,AFYE,AkDdA,ACGF,CvEP9B,AoBkBI,CNf4B,ASE9B,CrBA+B,CAAC,AqBAc,ADC9C,EAAkC,AgDFR,CpECS,AoBCA,AgDFE,E1DOd,CULe,GRHb,AwDCzB,ACGmB,CzDJuB,AyDIA,C/DFhB,AMFxB,CNEyB,GAAG,GAAzB,A+DEc,C/DHZ,A0BFP,AqCKE,CrCLF,AZIA,EAAsD,CAAC,IAAI,GAAG,IAAI,EVK7B,ACTjC,AqBAJ,CrBAuD,AqBAvD,AZIA,CVKuC,CULgC,CYJvE,CtBS0C,AsBT1C,CAAA,GAAA,CtBS+C,WAAL,CAAiB,CAApC,CAAR,CsBTf,CtBS+D,+BAAc,EAAE,GAAG,KAAK,WAAL,CAAiB,CAApC,CAAhD,EAAwF,+BAAc,EAAE,GAAG,KAAK,WAAL,CAAiB,CAApC,CAAxF,CAAb;AuBIA,APeA,ArB3BF,AHCA,AFFO,AGEP,AGEE,AIMA,ACMQ,ACbR,ACGA,ACAA,AkBLF,ADMA,AKIA,AnCdA,AoBOE,ADCA,AFYA,ACXF,AuCGF,AHAA,AODA,AMLE,ACGE,E1DUQ,AqBfV,AIUA,AjBLA,CnBNA,A+BOE,CEMA,A3BTA,AYaA,CZbC,CHFE,AiECC,C9DCD,CDHC,AHCA,AYIA,AMDA,AgDFE,C1CyBD,ArB3BA,AHCA,AkCSA,AnCdA,AoBOA,AHaA,AmDXA,C3DIC,AIJA,AsBKA,AnCdR,AiBoBQ,ACXA,CcEK,ArBLJ,ACGA,AkBCT,AXFS,AFYP,AkDdS,C/DFD,AHCA,ACAC,A4BKA,C1BNA,AHCA,ACAP,AWIO,AKAH,CTII,ACMU,AGVpB,AIWU,CNdC,ACGA,AODA,AgDFE,ACGb,C3CsBA,ArB3BY,AHCA,ACAE,ASCF,ACGA,ACAA,AsBKP,AgCRS,C/DFD,AKSA,ACMO,CRdlB,AQcuB,AGVX,AsBKA,AhBNV,AiDCU,C3CsBC,AxB1BA,AmBEf,ChBHgB,AOET,ACGA,CVJY,ASCF,ACGA,ACAA,CZJT,ACAV,AkBEoB,ADCA,AgDFT,C/DFX,AOEqB,CTDG,AiCSjB,AlBMe,CQWpB,AZtBqB,AMDA,AFYC,CQSkB,AxBxBlB,AUCA,ACGA,AkBCxB,AKIwB,AlBMF,AmDXE,C3CwBtB,AZxBY,AkBLd,AIUyB,AlBMb,AkDde,ACGF,CzDHC,AoBF1B,ADM2C,AXFjB,ClBH1B,AWImB,CVJW,AeeA,AkDdA,CxDAD,ASC3B,ADC2B,AFY3B,AkDd6B,CvDGD,CDHrB,CTDyB,ASChC,ACGiB,AODa,CWEhC,ElBDmC,AkBCwB,AXFzD,AgDFyB,ChCQH,AgCRc,CjEDR,AOQP,AGJJ,AODkB,CjBHG,AiCSF,AiCLtB,CAAuB,CxDAC,CuDH7B,EjEDmB,AGEJ,CHFF,AGEG,AcCiB,AgDFE,CvDGD,AODR,EdDP,A+DEd,CxDAwB,AwDAtC,CjCKsB,C9BPnB,CAFE,AOI4C,AmBLnD,AIUmD,AgCRnD,CpCFA,CnBKwC,GAAgB,EAArC,GAA0C,KAAK,EHI7B,A0BCb,CvBLqC,CHItB,A0BC+B,EvBLE,CHI9B,AsBT1C,CnBK6D,AmBL7D,GnBK6E,AmBL7E,CtBS+C,AsBT/C,CnBKmB,AmBLnB,GnBKkF,AmBLlF,KnBKuF,AuBK/D,E1BDkB,CAAiB,AGJuB,CHI3D,CAAR,A0BC4E,CvBLE,CHI9B,CGJmB,GAAgB,EAAzF,CAAP,EmBLF,sBtBS6E,EAAE,GAAG,KAAK,WAAL,CAAiB,CAApC,CAAhD,EAAwF,+BAAc,EAAE,GAAG,KAAK,WAAL,CAAiB,CAApC,CAAxF,CAAb;AuBIA,ALZF,AvBCA,AHCA,AFCD,AGFC,AGEE,AIOA,AERD,AHbG,AIgBH,ACAC,AkBLF,ADME,AKIA,AnCdH,AoBOG,ADCD,AFYC,ACXA,AGxBc,A2CgEZ,APrCN,AHAA,AODA,AMLE,ACGE,ErCLF,ECYE,A3BTA,AYaA,CZbC,CJDC,AkEAE,ClEAD,AICA,CQEC,AsDHE,CnCUD,ALZA,AvBCA,AFAA,AkBEA,AHaA,A+C6BH,AIxCG,CzCLP,A1BEQ,AQQA,AILA,AiBCA,AbUA,CeJC,A/BVT,AgBcE,ACXO,AiDHE,CnCIE,AvBIH,CILC,AsDHX,CtDGE,AIWU,CRNC,AY7BG,CRwBF,AKAA,AGxBE,A+CwBd,ChDFA,CPEc,CJKC,A2DLA,C3DKC,AqBJA,AVHA,CXOL,AILM,AQxBH,CHwBd,CYCmB,CrBIC,AQMA,AInCE,CRwBD,AIWC,A+C6BpB,C/C7BkB,A+C6BS,CnDxCjB,AkBLd,AXGE,AHaU,AInCI,A+CwBS,C3DKC,AsBV1B,AqCK0B,C3DKC,CAAzB,AQM4B,CAA5B,C+C6BE,EAAqD,GlCvCtB,CAAC,GsCDnB,CAAuB,G/DFd,A+DET,C/DFU,A+DEzB,G/DF4B,EyBGT,CzBHhB,C0BHL,ADME,CCNF,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;ACaE,APgBA,AE5BH,A9BJD,AOKI,AHCF,ACDE,AGFK,AIWL,ACKM,AGVN,AkBLF,ADME,AKIA,AfPA,AFED,A8CuC0D,APpC7D,AHAA,AODA,AMLE,ACGE,ErCLF,AiC4C2D,AG1C3D,C9DHA,C2BaE,AnChBQ,AOKR,AFAA,AkEIA,CpCOC,AnChBL,AOKK,AFAA,AiECA,ClEAC,AkEAA,CnCUC,A5BXA,AHCA,ACDA,C8BIQ,AnBAP,AsBKA,CVkBC,AfbQ,AUZR,CnBDC,AQQA,AILA,AiBCA,C1BLC,AHCL,ACDK,CAAC,AOSA,A2DLA,CvDAC,AsBKA,AiCLA,ChEJC,ASIV,CZHW,ACDR,AOSQ,AqBJA,AVHX,A+CDF,ClEAc,ACDA,AWIA,AsBKA,CjCTT,AkEIH,CvDAc,AiBCA,AVHA,AgDEA,ChEJC,AHCA,ACDC,AOSD,A0BAf,CVkBA,ArB3BgB,AHClB,AQQkB,AWPhB,ChBFe,AKSJ,ACKL,AGVW,CTLZ,AHEa,ASaQ,AsD6B6B,CvChBpC,AxB1BA,ASab,CDLc,CPTE,AQce,AGVhB,CZHC,ACDP,CQcT,AGVM,AkBLd,CtBU0B,AsBV1B,CN4B2B,AvB3BE,AOSF,ACKsB,A0DV/C,C3DKA,A2DL0B,CnEHC,ACDxB,CADE,A4BMuB,CLsBC,AKtBA,CLsB7B,CALwC,AxBrBT,AmEGA,C3CuBA,AxB1BC,GAAG,E6BIrB,AsCDd,CnEH+B,C6BI/B,E7BJ0C,GAAG,GAAG,E8BFlD,C9BEiC,A8BFjC,G9BE0D,MAAM,C8BFhE,CAAA,C9BE0D,E8BF1D,C9BEsE,A8BFtE,CAAA,E9BE6B,CAAT,A8BFpB,UAAA;ACaE,APiBA,ArB5BA,AHEF,ACFE,AGEH,AIOG,ACKA,ACbQ,ACX8D,ACctE,AkBLF,ADME,AKIA,AnCdE,AmBOJ,AFYE,A+C4B+E,AC1DnF,ARuBA,AHAA,AODA,AMLE,ACGE,EzDHQ,AoBFV,AiC2CiF,AGzCjF,EnCUE,A5BXA,AFAA,AecA,AmDVA,CpCOC,A5BXA,AFAA,AiECA,ClECC,AkEDA,CnCUC,A5BXA,AHEA,ACFA,CWIC,AsBKA,CnCdF,AmBOG,AFYA,ChBZC,AQOA,ACKA,AGVA,AiBCA,AXHR,AFYQ,CbdC,AHET,CQOU,ACKA,A0DVA,CvDAC,AsDHX,ACGW,ChEJC,AFAA,ASCU,AEGpB,AsBKU,AgCRA,CjEDC,AOSA,ACKA,AyDbb,CtDGc,AiBCA,CnBJQ,AwBQP,AgCRA,ACGb,ClEJc,ASCW,AEGX,AsDHhB,ACGgB,ChEJC,AFAZ,AOSY,ACKA,AoBTA,A9BVb,CIKc,AFFX,AOWW,ACKA,AyBLhB,AnCduB,AmEMP,C/DDD,AKSJ,AILM,AIUjB,A+C4BuD,C5D5ClD,A+DGP,E1DQsB,A0DRA,CzDaT,AGVU,AbTnB,CUmBoB,AyDbxB,CzDaa,AGVC,AkBLd,A/BJwC,CScd,AsBV1B,AoCE0B,C1DQC,ACKA,AyDb3B,ACGE,C3DKA,ATdE,AoESwB,C1DUf,AyDbgB,CzDa3B,AVnBmD,AmEMrD,CrCI+B,CAAC,AqCJA,CCGC,CpET7B,EAA6D,AmEM7B,GCGlC,CDHsC,CrCIvB,AqCJwB,ErCIvC,AqCJF,QpCFA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;ACIa,ALHf,AvBCI,AFAA,AOSA,ACKA,AGTA,AkBNF,ADOE,AKGA,AnCdF,AoBOE,ADAH,ADEC,A8CqCsG,APlCxG,AHAA,AODA,AMLE,ACGE,ErCLF,AbKA,A8CqCsG,AGxCtG,CnCCA,C5BFE,AFAA,AkEIA,ChEJC,AFAA,AiECA,CnENC,AmEMA,C/DDC,AFAA,CQcC,AyBLA,CRVR,APGS,CXOC,ACKA,AoBRA,AqCLR,C/DDS,ASKA,AbVA,AkBSA,CTKC,A2DLA,ChDFC,AgDEA,ChEJC,AFAA,AQcA,AyBLA,AnCdA,AoBOA,AFEH,ChBJI,AOSA,ACKX,CGTY,CHSC,AoBRA,AKGA,AfPA,AgDEb,ClEJc,AFLhB,AoBOE,AgDEc,ChEJC,AFAZ,AOSY,AIJR,CTLS,AKSA,AqBHA,AKGhB,AnCdgB,AoBOA,ChBFD,AgBEE,COHrB,AdMsB,CcNC,ClBUR,ACKS,AGTb,AiBCa,CrBGC,ATdA,AoBOA,CVYR,CGTU,AkBNzB,CAAA,A/BJ0B,CScC,A2DLzB,C3DK0B,A2DLA,C3DKL,CIJO,AbVZ,C2BIpB,ClBUkC,AWP9B,COHuC,AdMhB,AuDDQ,ChDFC,CAAC,CXOC,AIJA,CJIC,AWPnC,CXOqB,AIJd,COH8B,CgDErC,C3DKuC,AIJA,EcN3C,EAA+D,AlBUhB,CAAC,AIJA,CJIL,EIJA,CJIS,CsBVlD,ClBMoD,AkBNpD,EtBUsD,AIJ7C,AiBCS,CHPpB,AlBUyD,AqBHjB,CrBGzB,CkBVoE,AlBU/E,AIJuD,GkBNzD,CAAA,ADOkB,CjBD4C,CiBChB,CCP9C,ClBMyD,AkBNzD,ADOkB,CCPlB,ADOE,CHPJ,CdMsE,CcN+B,AIAnG,ClBME,OkBNF;ACaA,APgBE,AC3BJ,ACDE,A9BPF,AOIS,AHKP,ACLO,AOaL,ACKA,AC3BmD,AEkBpD,AkBND,A/BJA,AoBOI,AHWF,ACTA,A8CoCuD,APjC3D,AIDA,AMLC,ACGG,CvEZJ,CkCOE,C3BHA,AFAA,CeiBE,A+C2BoI,EtCxCxI,AzBCM,ADNA,AgE6CA,ErCzCE,AqCyCkI,ChC7BhI,APgBD,AE5BA,AVcA,AmDTA,C3DKC,AQIA,CpBrBE,AISD,ASaA,AVnBA,AoBOA,AFEA,CSLC,A9BPZ,AYiBY,CCKC,CbtBA,AISC,ADNA,CCMZ,AQQa,A2DLX,CzCLY,AjBeA,AQVA,CjBHC,ADNf,AoBOI,CMFN,ANEmB,AgDED,C1CJlB,AjBSmB,ATdA,AoBOb,CYSe,APgBjB,AhBlBgB,CuBEE,ALZV,CAAU,AyCKA,C3CuBC,ALzBE,AFErB,CTKW,ATdS,CgCgBH,AvBFI,ACKA,AODrB,CPCsB,CsBHE,ADZ1B,A/BJyB,AoBOE,AgDEX,CrCLhB,AdM8C,CQsBnB,AhBlBA,AQKzB,AmDVA,C3DK0B,ATdX,AoEHjB,C3DiBuB,A2DJrB,CzCNQ,CF4BqB,AE5B/B,CF4BE,AhBlB8B,CgBUU,ALjBnB,CYSY,APkBjC,COlBkC,AZThC,CXOgC,ACKlC,CsBHiB,AvBFkB,CuBErC,AvBFuB,GAAkB,IAAI,CAAC,CAAL,GAAS,CsBVlD,CAAA,EtBUsD,CAAC,CAA1C,CAAX,GsBVF,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;ACaA,ANPA,A7BZA,AOQD,AHCG,ACDH,AOSG,ACKD,AqBfD,ADME,AKIA,AnCdF,AoBOG,ADAC,ADEH,A8CoCD,APjCF,AIDA,E7BKE,ANPA,A7BZA,AkCOA,ClCPA,CAAA,CAAA,CAAA,AsBUI,CaSC,CAAC,A/BVA,A+DuCA,ClCnCC,AKIA,AnCdA,CScC,CZjBR,AISS,C+BUJ,AnCnBL,AYiBU,CiBLV,AICW,AKIA,AhBPP,CaSQ,ANPA,AICA,AKIA,AnCdA,AmBOR,CtBVJ,AYiBa,CRRC,CAAZ,AQQa,AqBJA,AKIA,AnCdA,C8BUb,AKIA,AnCdF,C0BSA,A7BZA,AISiB,CJTjB,AYiBkB,AqBJA,AKIA,CTLS,AICR,AKIA,C1BAjB,CuBEmB,AnCnBrB,CmCmBsB,AFNA,AKIA,ETLtB,AsCoCwB,CjCzCxB,CCYK,ANPoC,A7BZzC,AkCOA,CCYA,AgC6B2B,ClCnCzB,EAA4B,CAAC,EAA7B,AKI+B,CTLjC,ASKkC,CLJC,CJDsB,ISKvD,EAAwC,CAAC,EAAzC,EAA6C,IJV/C,CAAA,UiCyC8D,CjCzC9D,AiCyC+D,CjCzC/D,GAAA,CAAA,CAAA,GAAA,WAAA,AiCyC8D,CAA9D;AhC5BD,APiBG,ACxBA,ACNF,A9BPa,AIUT,AQSF,AGTE,ACfoE,AkBaxE,ADMI,AKIA,AnCdL,AmBWC,A6CkCA,AC3DF,AR0BA,AIDA,AMLA,ACGI,EvEbW,AkCQb,AZOA,CtBfa,CAAA,CAAA,CAAA,AIUT,AWAA,AuBQA,CRXC,A1BGA,CQSC,AuD8BA,CvCZC,ACxBA,AyCHA,ACGA,CnEHC,A6BIA,CHPC,A1BGA,C0BHC,A1BGA,AkCQA,CtClBG,AsBeb,COFE,A7BbW,AYmBD,CkBZC,A1BGA,AWAT,AuDAN,ACGI,CzCNF,A1BGQ,AkCQM,AhBHd,AgDLc,ACGA,C1CAC,A7BbF,AYmBE,AqBLA,CLuBb,AE9Bc,AGOA,CHPC,AlBYA,A0DTnB,CtEVe,AIUK,AkCQA,CVmBC,A5BrCN,AsCkBM,AgCR0B,CzCG3C,ACNkB,AlBYA,EZnBP,AYmBE,AGTc,AuBQf,A6B+BQ,CvCZC,AxB3BnB,AkCQoB,E1BCC,AsBXzB,AiCyCyB,CjCzCzB,AoCEF,ACGI,C3DMyB,A2DNA,CtCCnB,AqCJyD,CtEVpD,AiCcgB,CHP7B,AlBY8B,AqBLtB,CAAJ,CHP4B,AlBYjB,CkBZkB,AGOA,CKIE,CRXnC,AlBYmC,A0BDC,CAAD,CRXE,AlBYA,A0BDb,EvBRpB,CHSoC,AGTM,AuBQL,AiCLvC,E3DMA,A2DNwC,EAAxC,O3CwBiB,AM7BnB,CN6BqC,AM7BrC,KIUc,EAA+C,CAA/C,CAAV,C6B+B0D,CAAC,CjCzC/D,CAAA,CN6BmD,CAAC,CM7BpD,CAAA,CAAA,GAAA,IN6BmB,EAA6C,EuCYF,EAAqB,CvCZd,CM7BrE,UN6BmB,CAAjB,MuCY4D,EAA0C,MAA1C,CAA9D;AzC9CF,ACDA,ACqCI,ACzBA,ACNA,A9BR0B,AIWzB,AQSD,ACIM,AEbE,AmBFX,AGnBD,AJyBQ,AKIF,AfPF,ADAe,AFUf,ACRF,A8CoCA,APjCF,AIDA,AMLE,ACGE,CrCfJ,ClCC8B,AeWlB,AMGV,A8CoCA,AGvCA,CtEX4B,AkCDlB,CJSR,A9BR0B,AYoB1B,CkBZC,A9BRyB,AIS1B,AkEEC,CxCHE,A9BRuB,AsCmBxB,AgCRA,CxCHD,CAAD,AqC0CI,CvCXC,ACzBA,AhBUQ,AUZR,ADAU,A6CsCV,AIpCA,C3DMC,ASNA,CSNG,A1BGF,AgBWA,ACRA,CrBdmB,AsCmBlB,CtCnBkB,AYoBjB,CiBNT,AdHoB,AkBIV,CHPG,A1BGF,AkEAb,ACGE,CvEd0B,AsCmBd,AlBGZ,ACRM,A8CoCR,AIpCc,C1CAC,AdHO,AoDuCP,C/DvCC,AiBGM,AiDHN,C1C4Bd,AhBnBe,CkBZN,A9BRiB,AsCmBV,AfPhB,ADAe,CQJI,A9BRO,AawBpB,AyBLW,CVoBC,ACzBlB,AjBMkB,ACIQ,AsD0BR,AIpClB,CnEHmB,AQSV,AWRU,ADAmB,CtBZZ,AIWnB,AkCQK,AfPZ,CVYM,AyBLgB,AhBPP,AiDEM,CnEHC,AQSA,AuD8BA,CvD9Bb,ACI8B,Ceef,AMxCS,CNwCR,C5BvCC,AYoBA,ACIpB,A0DVoB,CzCNjB,CAAT,AjBgBkD,AyDbtB,CAAC,C1DSC,CgBmBZ,AhBnBa,A2DNV,C3CyBW,AUpBC,AiCLD,CjCKE,CAAD,C1BCP,A0BDJ,CVoBJ,AhBnBkB,A0DTR,ACGP,C3CyBrB,A0C5BF,ACGuC,C3CYG,AUPD,A6B+BD,AGxCyB,C1C6BxB,AuCWA,AGtCzC,ECEuB,C3DMK,A2DN1B,C3DMA,EuD8BsB,CAAwB,KAAxB,CAAxB,G7B/Bc,EAA+C,CAA/C,CAAV,MJpBM,yBAAyB,GAAA,EAAA,CAArC,GAYA;ACWA,APkBG,ACzBC,A7BfwC,AIYtC,AQUF,ACGA,AEbA,AkBIM,AKKJ,AnCfA,AoBOH,AExBH,AHwBU,AFUP,ACRC,A8CoCF,APjCF,AIDA,AOFI,EvEfwC,CAAA,CAAA,CAAA,CAAA,AIYtC,AkCSA,ClCTC,EyBGE,AdHA,AZNH,AmBOI,ADED,A8CoCA,AIpCA,CpCOC,A/BVC,AQUD,ACGA,AoBTA,CKKC,CvBTP,CfZwC,CAAA,AIY7B,CAAC,AWAD,AuBSA,AjBNX,AkDAA,CnEHa,AQUD,AGVZ,AuBSY,AhBRN,AiDEM,C1CAZ,A7BfwC,CayB1B,AoBTA,AZDA,CjBHE,AQUD,AUT8B,AiDE7C,C1CAgB,AzBHL,AQUK,AqBNA,CEMpB,AtBGqB,ASZX,CaSa,AvBAD,A2DNhB,CvEhBsC,AqBexC,CrBfwC,AIYnB,CQUA,ACGA,AsD0BA,ChC7BzB,AtBG0B,AsD0BA,CnEnDkB,AYsBzB,AqBNQ,AKKA,CHCQ,ANP/B,AICwB,AKKA,ClCTtB,ASae,AyBJM,AnCfrB,CUmBwB,AyBJd,AnCfqB,CSgBN,AThBzB,EUmBe,AyBJY,AnCfa,CHNF,CayBT,CDHC,CuBApC,CtBGqB,AsD0BZ,ChC7B8C,AtBGnD,CsD0BF,OvD7B6B,CAAiB,CAA7B,C0BDJ,E1BCqC,G0BDG,E1BCE,GAArD,CAdyG,CAgBzG,I0BH8D,CAAC,CAAD,CAAX,GAAiB,iBAAzD,CAAT,2BiCNF;ApCQF,ANPC,ACPC,A9BRH,AIYI,ASaD,AEbA,AsBrBJ,AJuBc,AKOT,AnCfH,AmBSE,ADAD,A8CoCF,APjCD,AIDA,AMJE,ACGE,CvElBJ,CGQE,CHRU,AGQT,CHRU,CIYF,C+BYL,AhChBA,AmEOE,CAAC,ExCLA,AfIA,AkBED,AXCC,AiDCA,CpCMC,AtBGA,AVnBA,AmEOE,CnCSD,A/BVA,ADNA,CYMP,CeJS,AjBiBA,CiBjBC,AwCKE,CvDDD,AuDCE,CnCSX,AtBGU,AEbZ,AZNE,C2BEW,A3BFA,C2BEb,A3BFE,CgCgBa,AhChBjB,CgCgBA,ALdkB,CAAC,A9BVT,AsEeA,ACGR,CpCMkB,AnCxBT,Aa2BS,EiBjBE,AROpB,AiDCoB,CvElBX,Ca2Ba,AyDZE,CtEff,Aa2Bc,ASVA,CtBjB3B,CsEe+B,ACGF,CDHG,CtEXhC,AauBsB,ASVS,CTUC,EiBjB5B,CyCQoB,CzCRY,AwCKR,ACIrB,CzCT8B,AwCKE,ExCLnC,CjBiBoC,CiBjBC,CwCKvC,EzDY0C,E0DTpB,CACN,IADM,C1DS4B,C0DP7C,E1DOgD,MSV5B,EAAvB,CTU4D,CAAC,G0DTzC,CAED,K1DOiB,A0DPZ,C1DON,CAAlB,CAFkD,CAEwB,E0DPvD,CAAY,KAFX,EAEkB,KAAK,MAAL,CAAY,MAF9B,CAApB;ApCQF,APiBA,AEhCI,A1BIA,AQWF,AGXA,ACCE,AkBHA,ADMC,A9BVL,AoBOA,AHUA,AgDlCF,AR6BA,AIDA,AMJE,ACKE,E3CsBF,AL3BA,IYUI,ALfA,A1BIA,AYCA,AkBHA,A/BJA,AmEOE,CxCLD,A1BIA,ADNA,AoBOA,A+CAE,C1C2BD,AEhCC,APKD,CK2BC,AEhCF,AfIE,AKWA,AmDLA,CpCKC,ALfJ,A1BIK,ADND,AmEOE,CnCUD,ALfG,AlBeH,AWVJ,COLD,AfIF,CZNF,AoBOiB,CnBDJ,AkECC,ClEDA,AQWD,AGXA,ACCT,AbPS,AmEOE,CxCLG,A1BIH,AQWD,AGXZ,AZNY,AoEYZ,EpCKE,CAAa,A/BXC,ADND,AoEYA,CzCVK,A1BIT,AQWJ,CACL,AQDJ,AkDVU,CnEPG,AiBiBO,CQiBd,AzBlCN,CCMuB,AYCM,AuDKP,C3CsBe,AEhCnB,AlBgBV,AsBdJ,AdaJ,CUf4B,AlBgBnB,A0DXiB,ClDUO,CjBhB5B,CCKD,AQYA,A0DXyB,C1DWhB,A0DXiB,CnCU1B,AoCLa,CpCKa,AvBCf,ATjBN,AiBgBT,AmDL8B,CpEXpB,C+BG6B,AdaS,CRC9B,CuBDgB,ALfhB,A3BDL,AmEMa,ACKT,CpCKkB,ALf/B,A3BDC,AmEMgC,ACKF,CnDKnC,CjBhBgB,CSiBO,ATjBN,AiBgB6C,CJV1D,AuDKa,CpCKb,AnBV0C,AuDK5C,CpCKF,AvBCI,ATjBgB,AmEMpB,CnENgB,CgCgB2B,AvBCf,AQD5B,CRCI,CQDuE,GREvE,CuBF6C,GvBEzC,CAAC,GAAL,CAAS,EAAE,IAAI,MAAM,CsBfrB,CAAyD,GtBe/B,GAAL,GAAW,EAArB,CAAX,EAAqC,CAArC,CADA,GAEA,IAAI,CAAC,GAAL,CAAS,MAAM,IAAI,MAAM,KAAK,GAAL,GAAW,EAArB,CAAf,EAAyC,CAAzC,CAFA,GAGA,IAAI,CAAC,GAAL,CAAS,MAAT,EAAiB,CAAjB,CAJK,CAAP;AuBAiD,APkBjD,ACpCJ,AzBQK,AQgBF,ACJC,AEZA,ACCQ,AkBKV,AG5BF,AC+BI,AnCdF,AoBME,ADCA,AFSA,ACRF,A8CoCK,APjCP,AIDA,AMJE,ACKC,E1CFH,AbHY,AkBKV,AbHA,EcOmD,EmCT7C,E/CAA,A+CAE,CvDDD,AZLA,AmBOA,CTUC,AyBHA,AnCdR,AiBgBQ,CCRC,AiDFE,CnCSgD,APkBjD,Ab5BR,AMGQ,CaGV,AXLW,CYSkD,AnBTvC,AkBKV,CnBNC,AKWA,A+C4BH,AGtCK,CvDDb,AuDCc,C1C2BD,AZ3BO,CmBS2C,AfCjD,ACRP,CcOyD,CdP1C,CRSL,CODC,AkDVT,E1C2BT,AfhBoB,AyBHA,AfRhB,ADCJ,CAAqB,CaQsC,CAAa,AGDjD,AlBET,A+C4BX,AGtCsB,CHsCM,C5CtCN,AHUzB,CkDV4B,CAAC,EzDWA,CAAC,AUXA,ADC9B,A6CqCG,C7CrC4B,CAA/B,A6CqCyD,CjCjC3D,AoCL2B,ChCQS,AgCRE,CpCK2B,AIG5B,IgCR1B,C/CAgB,CVWL,AqBNtB,AIGyB,CgCRqB,CpCKsD,AXLvD,CVWC,AyBHA,AfR5C,CeQA,CfR8C,C+CAhD,CzDWkD,CAAC,GAAL,CAAS,AqBNuD,CrBMtD,EqBNyD,ErBMrD,CAAC,CqBN7D,ErBMwD,AqBN+D,CrBMtD,CAAC,GAAG,GAAG,SAAS,CAAC,UqBNiE,ErBMlF,CqBNqF,CAAtJ,ErBMkG,AqBNuD,SrBM9C,CAAC,WAApD,CqBNuH,CrBMtD,EqBNyD,CrBM1H,CAAV,CAA5C,EqBNF,EAAuL;ACItI,APmB7C,AEjCA,A9BPN,AawBI,AEZD,ACCC,ACFF,AiBOE,ADHE,AGFA,AEQF,AnCdH,AoBMK,AE3BN,ALsCI,ACTA,A8CmC2D,APhC/D,AIDA,AMJE,ErDFA,AkDuC6D,ChC7BlB,CnCrBjC,AsCqBR,AlBGA,CpBxBJ,CoCaM,AkCAE,EAAE,CtDAD,AIWA,ACTA,CiBMC,AlBGA,CQgBC,AEjCA,AjBiBA,AoBTA,AVFA,AHWP,AkDXS,C1C2BP,AfhBM,AGXR,ECFU,AqBUA,AlBGA,CUjBC,AdMA,ACFA,AgBIA,AqCFE,CxCND,AjBiBA,AGXZ,AiBEY,AVFV,AFEF,AiDFc,CzDWD,AIbH,AGaG,EUjBE,AbIQ,AgBIR,AVFA,AFEA,CSRb,AjBiBM,AoBTD,AbSS,CPAC,AIbP,AGaV,CUjBkB,AGQA,AkCmCuC,AGrChD,CxCNU,AbIgB,EAAzB,AgBIW,AZArB,CSRsB,CjBiBC,AIbwB,AqDEtB,CrCED,AKMxB,CrBVU,AgBIe,AGFvB,CkCA0B,CrDF+B,AME5C,A+CAc,CrCED,AVDzB,CNHO,AMER,ENFqE,CaJrE,CbIQ,AgBIR,AqCFuB,CxCNS,AjBiB1B,AuBXiC,AkCAL,CxCND,AjBiB5B,AIb4E,AgBIhD,CAAC,CHRlC,AbIQ,CJa4B,CiBjBC,AbIwD,AgBIxD,CqCF9B,CzDWT,AIbU,EAA+F,AqDE5D,CrCE3C,EAA4C,CAAC,CqCFjD,GrCEqD,GAAG,EAApD,EAAwD,cGFxD,CAA6D;ADSjE,APmBM,AEjCA,A1BKJ,AQpBkE,ACgCnE,AGXC,ACFA,AoBtBJ,AJ0BQ,AGEN,AEIE,AfPC,ADDD,AFWA,ACTD,A8CkCkF,AP/BrF,AIDA,AMJE,ACKO,EpCGP,ACJA,A+BgCmF,AI/B5E,EnENL,AkCSA,AlBGA,ChBZC,C+BSC,AmCRE,CnCQD,CLdC,CAAC,A1BKA,AYCA,AMAA,AFWA,AkDXE,CxCNA,AbID,AqBUA,AlBGA,CUjBD,A1BKL,AgBYA,CeHF,ALdM,AdMJ,AsDAU,ACKL,C3CsBI,AEjCG,AMUd,AmCCO,CzCXD,AMUM,AEIA,AlBGA,CJXC,CcNM,AdMjB,ACFY,AqDEE,CxCNV,AwCMW,ErDFA,AGaA,CHbC,AKEhB,CQNuB,AqC0CkC,ClDtCvC,AGaA,AmDNb,CjDLc,AFWnB,AkDXU,ACKL,EzCXsB,AbIN,CW6BjB,CAAmB,AX7BR,CqBUf,AhBRwB,AgDAE,ACKrB,EzCXkB,CAAU,AbIN,AsDO7B,CDLgC,CAAC,EAAjC,CrDFkC,CmBMlC,EAAiE,ERuB3D,AEjCmB,CAAnB,CRMe,AiDKrB,CjDL0C,GLFb,CAAiB,CAA5C,ImBM6E,GAAG,CdJ7D,CcIrB,CdJE,CcIoF,gBAAgB,GAAG,CAAzG,EAA0G;AVH5G,ACFA,AEGM,AzBFF,AWR4C,ACS5C,ACFA,AiBMA,ADFI,AGEJ,AEIA,AnCdE,AsBtBN,AH4BG,AFWC,A+CwBsG,AC9D1G,ARgCA,AIDA,AMJE,ACKE,EJ8BsG,AGnCxG,EhCQE,AlBGA,CkDXC,CzCCC,AyCDA,ElEDE,A+DoCqD,AI9BnD,CnEND,AYCA,AkBIA,AIIA,AnCdH,AiBiBG,AmDNE,CnDMD,CHbC,AGaP,ChBZQ,AYCR,AuDKU,CnENV,AkCSS,CTPP,AICQ,AbSA,ChBZC,AYCA,AsDAb,ClEDc,AYCZ,ACFY,CsDOG,CnDMD,CcPd,ADFe,C7BHC,A8BKA,CdOC,CaTC,A9BRhB,AiBiBF,CSV0B,AzBFf,ADLe,AoEWhB,CpEXR,AoEWoB,ErCDtB,A/BVmC,CmCcnC,CAhByF,CAkBzF,GLR4B,CAAE,ChBJvB,CAAwB,CgBIH,AsCG5B,CtDPiC,AgBI7B,CAFsD,CAGtD,ChBLgC,KAAK,WAAL,CAAiB,CAA9C,EAAiD,EAAE,GYGxD,AZH2D,CYGX,IZHgB,WAAL,CAAiB,CAAvE,EAA0E,MAA1E,IACL,KAAK,kBAAL,CAAwB,EAAE,GAAG,KAAK,WAAL,CAAiB,CAA9C,EAAiD,EAAE,GAAG,KAAK,WAAL,CAAiB,CAAvE,EAA0E,MAA1E,CADK,GAEL,KAAK,kBAAL,CAAwB,EAAE,GAAG,KAAK,WAAL,CAAiB,CAA9C,EAAiD,EAAE,GAAG,KAAK,WAAL,CAAiB,CAAvE,EAA0E,MAA1E,CAFF;AkBUF,ATPF,ACFA,AC4BQ,ACZN,ACrBM,A9BTR,AIeG,ASYO,AEZV,ACCI,ACAD,AmBIC,AjCVF,AoBOE,AHUA,ACTF,A8CgCgH,AP7BlH,AIDA,AMJE,ACKE,CvErBJ,C6B8BE,ARZA,A8CgCgH,AGlChH,ElDWE,CkDXC,C5CAC,ACFA,AxBJA,AmEMA,CnENC,CoEWG,C1DMO,AGXR,AoBIA,AhBOA,AmDNE,CpCED,AhCbA,AoBOA,AHUA,CpB3BE,AuBiBD,AHUP,CpB3BJ,AgBgBI,AuDKU,C1CSZ,ACrBW,A3BCX,AmEMA,CzCcY,A7B9BD,AuBiBE,AHUD,AkDXA,CtDAC,AbNA,AkBQA,AiDFb,CtDAE,AbNY,C2BDC,APQC,A+CDD,ACKE,CzCZD,AMWd,AfFW,AiDFb,CnCOA,AhCbiB,AiBiBA,CPAT,AUVW,A+CDD,CxCPC,AjBkBQ,AuBPR,CVJC,ACFA,AGLd,A3BCO,AiBiBO,AkDXpB,CnENA,AiBiBE,AmDNU,CzCZU,AjBkBd,AUVN,A+CDoB,ACKE,C7CLD,ACFA,AGLA,CJOzB,ACFA,AdawC,AyDXtC,ExCP0B,A3BErB,AmEKqB,GAA1B,CnELS,CAAC,AmEKqB,CAA/B,EnELa,AmEKqB,CzCclC,A1BnBK,AoEUH,CzCZI,CDqB2D,A1BnBjD,C2BFsB,A3BErB,AmEKqB,CxCPC,EAAjC,A3BEc,CiCSlB,AjCTc,AmEK0B,CzCc6B,ACrB5B,AwCOA,EAA3C,CzCc0E,GAA1E,EAA+E,MAAM,GAAG,CAAxF,EAAyF;AMNvF,ANOA,ACrBM,A9BTR,Aa2BE,AGXD,AkBIC,ADFI,AGEJ,AEKA,AnCdF,AoBME,AE9BJ,AH6BE,ADEE,A8C+ByD,AH7B7D,AMJE,ACKE,EvErBF,AsBgBA,AgDAA,CtEhBA,CAAA,AmEiDsK,CnEjDtK,AsBgBG,AgDAA,CtEhBH,AsBgBI,A6CiCC,AGjCD,ErCEE,AkC+BkK,AI5BhK,CpCED,ADHA,AEAA,AjCTA,AoEUE,CzCZD,AQgBA,AnCdR,AoBMQ,A+CDR,CxCPS,A9BTT,Aa2BS,AUVA,ADDN,ADEM,CSTE,A9BTX,AuEqBY,CzCZH,AGSE,AXFK,AiDKH,CzCZL,AGSI,AVDC,CORG,A9BThB,C8BSQ,ATSM,AkDGE,C1DMD,AUVC,AgDId,CpCEc,ALdK,AIWnB,ADFI,CEKW,ALdT,A9BTR,AiCkBiB,AKOA,CtCzBjB,C8BS0B,AIWP,CJXX,AQgBY,AfRC,CYMnB,AnCvBF,Aa2BqB,AyBFA,AfRT,CaGV,ENX8B,AGSR,AVDE,CORlB,AjBkBiB,AoBTA,AGEA,AEKA,AjBPvB,CrBlBF,Aa2B0B,EUVxB,CVUmB,CAAS,GAAG,GAAG,GuBPlC,CHFe,CAAwB,CCEvC,AIKmB,GzBEwB,AyBFA,CzBEC,AoBTA,SAA7B,EpBSI,AoBToC,CpBShD,GAAoD,CoBT5C,AKOI,CLPf,EKO2D,EzBEE,AyBF/C,IzBEmD,CAAC,AyBFA,GzBEL,CAAS,AyBFA,GzBEG,EyBFP,CzBEU,EyBFE,CzBEjB,CAA1D,AyBFW,CAAlB,EzBEuF,MAAM,IAAI,CAAC,GAAL,CAAS,GAAG,GAAG,GAAN,GAAY,SAAS,CAAC,UAA/B,CAAtF,GAAmI,KAAK,IAAI,CAAC,GAAL,CAAS,GAAG,GAAG,GAAN,GAAY,SAAS,CAAC,WAA/B,CAA/I;AsBHE,ATPN,ACFA,AC2BM,ACXF,ACrBK,A9BVM,AIeb,AQcI,ACDH,AIXO,AiBIN,ADFG,AGEH,AEKA,AnCdH,AoBMG,ADDA,AFUA,ACRD,A8C+BD,AH7BF,AMJC,ACKG,EvEtBW,AiBiBL,CjBjBK,CAAA,AoB2BX,CpB3BW,C0BiBf,ACFA,A3Bfe,AY6BT,E2DPI,C1CSD,AzBhBA,A8BMA,AEAA,AdJA,AFUA,A+CuBA,C7BxBC,AfRA,AHSA,CQeC,ALxBA,CGDX,AEyBM,A2CpBQ,CpCEA,ATPd,A1BjBe,AmEkDF,CnElDE,AuBkBA,CgDIE,E5CPjB,A3Bfe,AoCqBX,AbHc,CIHlB,AEgBI,A0CTA,C3DOE,CZ7BS,AiBiBa,AmBIR,AdJhB,A6CiCK,CtCnBY,A7B/BN,AiBiBc,AqBSR,AhBTA,AFUjB,A+CuB0B,ClDjCF,AMCL,A4CgCQ,EhC1BN,AnCxBV,AiBiByB,AqBShB,AfRV,CYMY,AlBPE,AqBSH,AhBTrB,CYIA,AZJsB,CLAyB,AMCtB,CXWM,CuBLV,ADHI,AIKA,A6BwBC,C7BxBA,CHFE,AnCxBjB,AuBkBX,ADDA,A6CiCoC,ElDjCZ,AqBSH,CAAS,CrBT+B,EkDiCnC,GhC1BW,CAAC,AvBKpC,CAA0C,AuDqBE,ChC1BzB,ACHkB,CDGrC,ANOF,AOVwC,CPQ+C,CAGvF,KSNqB,EAA4B,CAA5B,GJLrB,CEAgB,AEKsC,CFLC,GEKG,CAAC,GAAL,CAAS,QFL/C,EAAyD,OEKnB,EAA4B,CAA5B,CAAjC,GFLL,AEKuE,CFLvF,CEKoB,KAA0E,MAAM,GAAG,MAAT,GAAkB,EAA5F,CAApB;AHDE,ATFJ,ACFA,ACsBM,AEhCD,A9BXuB,AIenB,AQeC,AIpBoC,ACQ5C,AiBIA,ADFC,AGEF,AEKC,AfRA,AE/BJ,A0C+DI,AC/DJ,AJkCA,AOCI,E7CAF,ACFA,A3BrB4B,AY8BlB,CZ9BkB,CAAA,AIenB,CJfmB,AIerB,C+BUH,AnCzBwB,EuEuBpB,CrCDD,CIKC,AfRA,A4CgCA,ChC1BC,CAAC,AnCzBkB,AuBmBlB,AgDIE,C7CAZ,ACFA,ACsBW,A5B3CiB,C0BuBhB,ACFA,AfSU,A0BHV,CfRE,AgDIC,CpCEN,AnCzBmB,AuBmBb,CXWO,A0BHP,CHFC,EnCzBY,AkCsB1B,ClCtB0B,AuBmBR,AgDIC,ChDJP,AgDIZ,CrCDmB,ClCtBO,E0BuB5B,ACFA,ACsBM,AUhBkB,AfRC,CYMA,APkBA,ALxBC,CYMA,ATFM,ACFA,AwC8BN,C7BxBC,CtC3BC,CmEmDC,C5ChCE,CYMtB,ADHP,AXHW,CYMT,EZNgC,CAAvB,GeQX,AfRsC,CKwBlC,GLxBsC,sB4CgCoB,C5ChCX,A4CgCY,oBAAD,CAA9D,C5ChC2D,CAAR,EAAW,CAAX,EAAc,CAAd,EAAiB,CAA1B,EAA6B,KAAK,UAAlC,CAA1C;AYOE,ATFF,ACFA,AEWA,ACrBC,A9BZuC,AUhB5C,AN+Bc,AQgBV,ACDM,AGXV,ACAI,AiBIA,AECF,ALxCF,AO6CI,AnCfE,AoBMF,ADFA,AFUA,ACPF,A8C+BE,AH7BJ,AMLA,ACMI,EvExBwC,AqBqB1C,CrBrB0C,CAAA,AIe9B,AkCcV,AlBDA,CpB5BwC,AIenC,CJfmC,CqBqBrC,CkDGG,C7CAD,ACFA,AEWA,AjBFA,ACDQ,AqBPR,AIMA,AnCfH,AmBIG,AFUA,AkDVA,C5CML,ACFA,AJFM,AHQA,ACPH,A8C+BG,AI5BE,E3DOR,AWXQ,CYME,ATFD,ACFA,A3BtB+B,AsC6B/B,AiCLE,CvExB6B,CY+B7B,AWXA,A+CFf,CzCeI,AyCfY,CtElB4B,AsC6BxC,CZLc,ACFA,AfSd,A2DPgB,C7CAP,ACFA,AEWM,A1BnBb,AmEIN,CnEJ8B,AoBMV,C+CF2B,C5CMzB,ACFA,A3BtBsB,AuEwB7B,CvExB6B,Aa8BlC,CsBJe,AtBIO,ASZ5B,CaQsB,ANOtB,APfqB,AFUrB,AmDJuB,C1CKgE,A7B7B/C,AuBoB7B,A4CgCW,CzC5BC,ACFA,AEavB,ANfwB,CGIN,ACFA,APFuD,AkDF7E,CnCQyB,AZNV,AHSX,A+CuByB,AI5BzB,C1DMM,AUVN,A+CF+D,CnCQnC,ATFD,ACFA,AxBRzB,CUgB0C,AqBP5C,ClCvBwC,AGcI,AmBI5C,CAA8B,CYKC,CRCC,ACFA,CDEL,ACFA,AdQrB,EAAqD,ASZxB,CaQE,ATFD,ACFA,CQIE,AhCZpC,CUgBI,CVhBsE,CUgBJ,CsBJnD,CAAnB,CtBII,EAA6E,CSZrD,CAAiB,CIM/C,ACFA,KOCA,AZLA,S6CkC8D,CAAC,kBAAD,EAAqB,mBAArB,EAA0C,MAA1C,CAA9D;AhCzBE,ATFH,ACFA,ACqBK,AE/BL,A9BZF,AIcgB,AQiBb,ACDA,AIXA,AiBID,ADFC,AKQA,AnCfF,AoBME,AEhCJ,AH8BG,ADGC,A8C+BA,AH7BJ,AMLE,ACME,CvE1BJ,CsEoBE,CtEpBU,CAAC,AIgBI,AkCeb,A6BuBA,CGlCC,CnCQC,AmCRA,EnEJE,AoEUE,C3DOD,CCDC,AIXA,AgBEA,AVDA,AFCA,A8C+BA,AI5BE,CpCED,AgC0BA,ChC1BC,AvBKR,ATjBQ,CoBMC,AgDIE,CjCKD,C1BEC,ACDA,AIXA,AdLA,AkBOA,AiDHb,CnCQS,AZNK,EYME,AtBIA,AIXA,AIEA,A8C+Bd,AGlCc,ACME,CtDLD,AkDiCA,CvDrBf,CZjCQ,AagCS,AUVA,CvBtBR,AiBqBS,AdLA,AkBOA,AkDGP,CtDLX,CJWoB,AsDsBA,CnEtDX,AuE0Bc,EpCEA,AnC5Bd,AagCT,CsBJwB,AnC5B5B,AmEsD4B,C5ChCxB,AgDIA,GpCEO,AmCRqB,CnCQ1B,AhCZ2B,AmEIA,CnEJE,CAAF,CAA/B,AkBOgB,EAAd,EiDH4B,CAA9B,GHkC0C,CAAC,MAAjB,CAAwB,KAAxB,CAAxB;AhCzBE,ATDJ,ACFA,ACaE,ACFA,AnBnDJ,AN8BS,AQkBL,ACDA,AIXA,AiBKF,ADHI,AFtCN,AO+CG,AnChBD,AoBOE,AFAA,A8CgCA,AH9BJ,AMLE,ACME,GnEXF,AkCTO,CAAP,AfiBE,AFAA,EYAE,A9BPA,AoBOA,A+CHE,C/CGD,A+CHE,CzDYD,AsDuBA,CtCnBC,AjBHA,ASVA,AkDGA,CtDLC,AMEN,AFAM,AiDHE,E1DaR,ATjBF,CgCYY,CtBIA,AyDZE,C1DaD,AKZA,AkDkCX,AGnCa,ACMb,ClDHA,AkDGY,EtDLE,CYed,AhBJe,AQTA,CTUf,ACDA,AoBVM,CqCFE,ACMR,C1CUkB,AhBJA,A0DNA,CtDLC,CkBOE,AdLD,CcKE,CNQA,AZfA,AqDDE,CCMxB,EpCEqB,AtBII,AyDZE,CjDG3B,AiDH4B,ACMF,CpCEE,ClBP5B,AsDKA,E1DMkB,EyDZM,CAAW,GnCQE,CAAC,CmCRxC,GnCQuB,CAAnB,UNQgB,CAAmB,MAAnB,EAA2B,MAA3B,CAAlB;AMPE,APiBH,ACRC,ACxBF,A1BED,AQkBG,ACDA,AEhBE,AEMF,AgBCE,AKSJ,AhBZA,AFSE,ACNA,A8CgCA,ACnEJ,AJqCA,AMLE,ACME,EjDNF,EDGE,CCHC,CaQC,ApBZA,AkBOA,AXHA,AgDAE,CAAC,CzDYD,AsDuBA,CtClBC,ACxBA,AlBoBA,A0BDA,AjBTA,AkDGA,CzCbP,ATUQ,AiDHE,CnCQD,AlBNA,AKFN,AFSM,CeDC,AvBKR,CCDS,ASZK,CWGJ,AKSA,AgCZE,C1DaD,AuDsBX,AGnCa,ACMb,CpCEO,AlBNK,AgBCA,AbMZ,AmDHY,C1DMC,AyBAA,AjBTb,CcKc,ClBNC,CFNb,AMOc,CiDHR,ACMR,C3DOkB,A2DPA,E3DOP,AKXJ,CYeP,ARdqB,CRSC,AyDZE,CnCQD,AvBKA,ACDA,AIVA,AqBUzB,CHJ0B,ANSA,A0CXxB,CxDVgC,AuDIL,C1Da3B,A0Db4B,CCMD,CpCEpB,ANSP,AZf4B,AIC5B,CcKE,AoCFF,EtDJ+B,CqDFP,CAAW,EzDYnC,CIVA,CJUqC,EyDZvC,GvDJI,CAA+C,CFgBL,KAAK,GAAG,GAAf;AsBHnC,ANSF,ACxBH,ApB7BD,AEiDG,ACDC,AEhBQ,AEMT,AgBFO,AFpCV,AOgDC,AnChBC,AoBOE,ADHA,AFSD,A+C0BC,AH9BJ,AMLE,ACME,ExDVQ,GkBIR,C9BJE,AmEIE,EzDYA,AUTA,A+CHE,CzCiBD,APjBA,AiDMA,CpEVC,AoBOA,A4CgCA,C5ChCC,A+CHE,EnCQC,AtBID,ASZA,CPJW,AQOhB,ADHM,CnBJC,AmEIE,CzDYD,AyDZE,CvDJM,AQOP,ADHA,C6CmCC,AI7Bd,CAAe,ChDHf,C4CgCiB,C5ChCC,ADHA,AgDAT,CnEJP,CgCYmB,AoCFrB,CpCEsB,AtBID,A0DNA,C1DMC,CgBKtB,A1BrBuB,AmEIE,EnCQJ,CNSK,AyCjBE,ACM5B,CpCE4B,AhCZD,AmEIE,EhDAhB,AiDMgB,CjDNC,COiB9B,A0CXA,CpEVgC,CgEuCC,AGnCR,CzDYzB,AsDuBkC,AGnCE,EnCQC,AtBID,ASZvB,CaQyB,EbRC,AgDA9B,CnEJX,AmBIE,CaQqB,CAAnB,AhCZwC,AmBIA,A6CmCzB,AGnC2B,CzDYD,ASZA,CTYC,AsDuB5C,EGnCF,ChDAiD,CAA/C,CTYiD,CSZC,CAAC,CTYC,CSZpD,EAAuD,MTYM,CAAC,YAAnB,IAAmC,GAA1C;AsBHlC,APiBJ,ACRC,AhBLC,AEhBA,AkBOD,AGCD,AjCRE,AoBOE,ADHA,ADGF,A2CEJ,AMLE,ACME,E3CmBF,CCjCoD,AOYlD,CPeF,EyCnBM,EAAE,CvDJD,AMOA,AkDGA,CpEVC,AmBIA,CTYC,AuBRT,AkCJW,CzDYD,AEhBR,AqBQS,CjCRA,AkBOA,CAAC,CNPC,AOIA,AgDAE,CnEJD,AmBIA,AgDAE,CzDYD,AQTA,CAAR,AkDGL,CAAe,C1DMC,AQTA,CNPH,AMOI,ClBPC,AmBIZ,AgDAG,CnEJU,CYAnB,AMOoB,AkDGpB,CAAqB,CnCFvB,CdJyB,AgDAE,ClCIgB,CvBQhB,AVhBb,AkBOa,CRSC,AVhBA,AmEIE,CAAC,ACM7B,CjDN4B,CMyBC,CzB7BjB,AoEUkB,CnCFhC,AjCRE,CyB6B6B,AzB9Ba,AoEW1C,CnCFyD,AjCRxB,AmEIR,CAAW,EjDGhB,CAAiB,CRS9B,CSZgB,CAAkB,AgDAhC,ChDAc,CTYmB,CSZG,ADG7C,AiDH6C,EzDY7C,AQT6C,CAAC,CiDHhD,EhDAI,ADG+C,CAAjD,CCHqD,CDGD,CAAC,EAArD,EAAyD,CCHG,IAAP;AM0BrD,AEhCJ,ApB9BA,AE0CgD,ACO7C,AEhBC,AEMQ,AmBER,ALzCJ,AOiDA,AfTK,ADHA,AFSH,ACNI,A8C+BF,AH7BJ,AMLE,ACME,EtDJQ,AqDFV,GAAG,CjDGC,AiDHA,GxCPN,AfGS,AuBgBT,AlBHS,AmDHA,CnCFC,A+B8BA,C9C/BC,CNPP,AMOQ,EJDY,AkDgCV,CpDtCC,AuDIb,ACME,CjCMJ,AiCNgB,CtDJQ,AqBUP,A6BsBA,ClDhCY,EmBET,CrBRH,AwDUb,CzCbJ,AyCasB,CzCbC,AMWA,AEQvB,AlBHE,ACNI,A8C+BgB,C/CzBE,ACNA,CiBSiB,AjBTnC,CNPF,CwDUA,ElDHyB,CDM3B,AmDH4B,CjCM9B,ClBHsC,AmDHlC,CzCbJ,AQmBiE,ERnBtB,EMWN,CAAC,GEQtC,CjBTmC,CiBSoJ,ERnBvL,EAA+D,IMWxC,EAAnB,GfDyB,CSV7B,ATUkD,ESV+B,GTU1B,WAAL,CAAiB,CAAjB,EAAoB,MAApB,GAA6B,CAAlD,CAAvB,CADuD,CACsB;AcM/E,APiBA,AEhCF,AfGE,AkB9BoD,AGsCpD,AEQF,AnCjBE,AiBcA,ACNC,A8C+BC,ACrEN,AJwCA,AMLE,ACME,EDNF,GAAG,CAAC,ExCPE,AQmBA,CHJC,ALfA,AfGA,AZDA,AoEWA,C3CmBC,AQrBA,AhBKA,A+CyBA,ErCzCE,AfGR,CZDS,CAAC,AmEKZ,CvDJa,AqBQA,AhBKA,AkDTA,ACMX,C3CmBY,AEhCA,AwCOd,ACMc,CpEXC,CgCaC,ACJA,AEQA,AnCjBT,AiBcS,AkDTA,CnCQC,APiBA,A0CzBjB,CnELkB,C2BFR,AfGK,AuBgBI,AnCjBA,AmEKA,ACMjB,CzCbkB,AQmBpB,AlBHoB,AmDHA,CDNpB,CnCQE,AhCboB,CYCpB,AuDIqB,CvDPD,CAIpB,AKYc,AkDThB,CCME,CnDGA,EmDH2B,CzCbnB,AMWoB,CNX9B,AMW+B,AmCE7B,EpEX+B,CAAC,KiCSlB,CjCTd,CiCSA,CjCTwC,CAAC,EyB8Bf,CzB9BkB,CAA5C,EAA+C,CAAC,CyB8BhB,CAAC,AzB9BjC,EAAoD,EyB8B1B,CAAY,KAAK,UAAjB,CAAX,EAAyC,CAAC,CAAD,EAAI,CAAJ,KAAU,KAAK,UAAL,CAAiB,CAAjB,IAAuB,KAAK,UAAL,CAAiB,CAAjB,CAA1E,CAAf;AOhBE,ANSJ,AnBvDF,AGkDU,AGfJ,AC9BkD,AmBqCpD,AL1CJ,AOkDE,AnCjBI,AoBOF,ADFA,AFUA,A+CwBI,AH7BR,AMLC,ACOG,E1CUF,ETPE,EJbE,EaoBE,ASLA,AfVA,AgDKE,C1CUD,AhBLQ,AOFR,CgBNC,AbFA,AHQA,CGRC,ADFA,AiDOE,CpEZD,CgCaE,AGID,CTKL,ANfA,A4CgCM,AI3BE,CpEZD,C0BsBe,AObd,AEQA,AhBZZ,AFUA,EjBfsB,CiCSP,AbFA,AHQA,AmDHE,CJ2BD,EnDrCd,AsBegB,AfVlB,CVUM,AyBAa,A6BsBA,ChC1BE,AtBIO,AUVR,CYME,AfED,AmDHT,CAAY,GpCCH,AhCbY,CUiB3B,AVjB6B,AiBeT,CeFE,AnBXM,AsBetB,AnCjBqB,AiBejC,A+CwB2B,CtDtBiB,AVjB1C,AgEuC0B,C/B9BC,AEQ/B,AnClBsD,CiCUtB,AjCTiB,EgEuC5B,AI3BP,C1DKN,A0DL6B,CJ2B/B,CtDtBuD,CsBJtB,CAAC,AoCD1B,C1DKN,A0DLN,CnCHe,AmCZjB,C1DoB0E,A0DHxE,CpCDqB,ACJrB,CDIE,CtBII,CGfJ,CHeiF,AGfhC;AmBYjD,ATHJ,ACFA,ACqBE,ACPA,ACzBF,AjBoBE,AEhBA,ACCQ,AkBOV,AEAE,AEQF,AfVI,ADFH,ADGC,A2CEJ,EtCAE,ACFA,AXNU,CkBOR,AZ1BE,CAwBJ,EaMI,CLhBC,CFgCC,AfZA,AyBAA,CZPC,ACFA,AZPA,CqBQC,CDIC,ALhBA,AjBoBP,AqBRF,AXFS,AFCA,CcKC,ATHH,ACFA,AGXG,AfIR,AmBQS,ENoBC,AZ3BU,AsBeV,CVYC,AEhCA,AfIA,CoBYJ,ALhBT,AfIE,AMOA,CLNoB,AsBeP,CHJC,ALhBA,CAAC,CMYC,CRoBZ,CEhCc,APUhB,CaEwE,AEQvD,CAAC,CFRpB,CRoBsB,AMpBxB,CCIyB,APgBvB,COhBwB,ADJiB,CNoBhB,GOhBlB,ALhBT,CKgBI,AGIW,CRpBiB,CAAC,AIYjC,AIQA,ERpBA,AIY2D,EJZtB;AKiBjC,ATHF,ACFA,ACqBE,AEhCF,ApB/BJ,AEiDM,AGdH,ACCC,AkBOA,AECA,AL5CJ,A5BiCM,AoBQD,AHOD,ACND,A8C8BK,AH5BR,AMLA,ACQI,IzChBA,AViBA,AmDDA,CzChBC,CAAE,AlBkBD,CkBlBD,AyCgBE,CzChBH,AMaI,AmCGA,CvDXC,AIYA,AkDTA,CpCIC,A/BVA,AiBeA,CMJC,ACFA,AGXE,CdKT,AoBQQ,A+B4BA,ChCzBE,APgBD,AzB9BA,CAAE,CyB8BT,AEhCW,AdKF,AoBQA,CAAX,CjCXS,AoEcT,CpEdM,AgEuCQ,AIxBZ,CnDAF,A+CwBe,CrCzCN,AIYO,CJZG,AdKnB,CJaE,AThBkB,C+BUD,AiC6Bf,AIxBG,CpCDc,ATHR,ACFA,A2CHjB,CnCQ0B,AhCdC,AgEuCF,AGjCA,CnENI,EmEM7B,CnCQyB,AhCdE,AoEcvB,CpEdoB,AmEMgC,CnCQxB,ALhBnB,AlBkByB,A2DAhC,CzClBF,AyCgBA,EAGE,CpEjBiC,AoEcnC,C7CHO,ACFA,AxBTL,CuBWwB,ACFA,AOCO,AoCJrC,ACYM,CrCRgC,A/BVI,CmEMkC,CnCQnC,CAAC,CTHP,ACFA,A4CSxB,C7CPmB,ACFA,CfOxB,CAA6C,CuBF1B,CAAnB,ATHkC,ACFA,C4CSlC,CAAY,ErCRK,EAAnB,QqCIA,E7CHO,ACFA,A4CUL,E7CRoD,ACFA,G4CU/C,E7CRoD,ACFA,CDEL,ACFA,G4CUpD,C7CR8D,ACFA,A4CUlD,aALd,EAME,C7CTK,ACFA,A4CKP,E7CHkF,ACFA,A4CYhF,CAPF,EAQE,E7CXqF,ACFA,CDEL,ACFA,E4Ca3E,E7CXqF,ACFA,I4Ca1F,CAAY,KARd,EASE,I7CZK,ACFA,C4CcA,C7CZuG,ACFA,KDEK,ACFA,A4CcjH,C7CZ4G,ACFA,A4CchG,I7CZ0G,ACFA,E4CKxH,EAlBF,CA6BE,W7CdO,ACFA,CDEP,ACFA;AQME,ATHH,ACFA,ACqBE,AhBdO,ACCR,AGdA,AkBOA,AIQF,AnClBI,AgEuCI,ACtEV,AJ0CA,AMLE,E1DUU,A0DVV,GAAG,CnCQC,AhCdA,AmEMA,ChCYC,CzBDC,CGdC,AbHA,C+BUC,A/BVC,AgEuCD,ChCzBC,AGIA,CHJC,AnBXR,AsBeQ,CnClBH,CSgBe,ACCV,AVjBR,CaGS,AsBeA,AgCZb,CnCQS,AGIT,C1BFsB,AThBL,AgEuCF,ChCzBC,AGIA,AnClBZ,AgEuCY,AGjCA,CzDWC,AyBCA,CzBDf,CGdA,CHckB,AyBCA,CJRC,EiC6BN,CjC7BS,AiC6BhB,ChCzBiB,CAAC,AGI1B,EHJS,ADJmB,AIQA,CHJxB,AGIyB,CgCZC,CAAC,EhCYE,KgCZH,CAA9B,CpCIwB,EAAtB,CIQF,EAA6C;AHHzC,ALjBF,ApB/BJ,AEkDI,ACCE,AExB+C,ACUjD,AkBOA,AECA,AEOA,AnClBC,AoBQD,ADFF,AFQE,ACLF,A8C8BO,AH5BT,AMJE,ACiBE,EjDlBF,ADGA,EDKE,EPGE,AyDVE,CAAC,C/CCD,COXC,AlBmBA,ACCA,AGdA,AoBQA,AEOA,AlBJA,A+CuBD,AIbC,CrCdC,AXFA,AHMA,AkDPE,C/CCD,CXQP,ACCQ,AGdR,CmBWU,ALjBD,AjBoBP,AuBNO,AEOA,CRrBC,AMcA,AEOA,AfVN,A+CDQ,C1DSD,AIbA,AkBOA,AbDA,A8C8BA,AGhCE,ExCVA,AMcA,AEOA,AhBZA,CQTb,AlBmBA,AsBNc,AECd,AEOA,AfVc,ADFA,ADGH,ESZK,AMcA,AEOA,CRrBC,AdMjB,AoBQiB,AEOA,AfVjB,A+CDQ,ACiBR,CvDxBoB,CAIpB,AOImB,CYME,ALjBD,AMcA,AEOA,AiCMA,CpCVE,AfAtB,CkDPwB,CCiBD,CnDfW,AmDeV,CpCVH,ACHI,AEOzB,AlBHA,AkDR2B,CAAC,CnCOA,AGID,CJRC,AIQA,CJRC,CJb7B,EAAgC,AQqBA,AgCXR,CxCVS,AwCUE,ExCVnC,CKiBqC,AoCUjB,CpCVkB,ALjBD,AIavB,AZJD,AiDmBX,CDlBJ,ACiBsB,CrCdpB,AZJmE,CcKnE,AmCeE,CAFkB,CpCVC,ACHqB,AEO1C,CHJE,ACHyC,AmCgBzC,CjCT0C,AhBZ/B,CcKb,CdL+E,CcKhC,CmCgBxC,MAAL,CAAY,KAHM,EAIlB,KAAK,MAAL,CAAY,MAJM,CAApB,CA9BF,CAoCE;ApCfE,ATHJ,ACFA,ACqBE,AEjCE,AlBmBF,ACCC,AEfL,AmBQI,AECE,AEOA,AfVA,ADFF,ADGA,A8C8BM,AH5BV,AMJE,E5CIA,ACFA,GdME,CsBDE,ALjBA,AMcA,AkCJE,CxCVD,AwCUE,C1CuBD,AEjCC,CAAF,AlBmBE,CcLC,ACFA,AGZJ,AIaI,AbDA,AiDFE,CnCOD,ATHA,ACFA,AGZG,AjBoBH,AUTA,ADFA,ADGA,CcKC,ATHF,ACFA,AGZJ,AlBmBF,EcLkB,ACFA,ACqBlB,APrBU,A8C8BA,AGhCE,C5CIN,ACFA,AfOK,ACCA,AyDVE,CnCON,ALjBS,AIaJ,AECA,AdLA,CIKiB,ACFA,ASEhB,AbHX,CYMY,ATHR,ACFA,ASEM,AbHG,CWEA,AECb,AfFa,CKEyB,ACFA,AGZpB,AlBmBpB,ACCgB,AUTd,A4C+Bc,CzC5BV,ACFA,AwC8BW,AGhCT,ClCIU,AbHE,CGG6B,ACFA,CdQ7B,CiBpBJ,CAAU,APWxB,A4C+BQ,AGhCc,CnCOD,AZNE,ADFlB,A6CiCgB,ChCzBC,AbRC,CgDCE,CjDEjB,AiDFkB,C/CC1B,AFCyB,CEDG,CYMvB,AtBGsB,AqBPA,AZJC,CaQ5B,AtBG4B,AqBPA,AiC6BxB,C5C/BJ,COXc,AqC0CgB,AGhCR,CxCVtB,ATYF,AiDFmC,MpCGpB,AiC6BwB,AGhCzC,EpCGE,CrBOO,AsDsBmC,EtDtBE,CSXnB,CAAsB,E6CiCC,CAAC,KAAP,CAAa,OAAvB,O7CjCP,EAA+C,KAA/C,IAAwD,CAA1E,CAAP;AaSE,ATHF,ACFA,AfOA,ACCE,AGdF,AkBOA,AEAoB,AEQlB,AnClBF,AoBQC,ADFF,ADGC,A8C8BM,AH5BV,AMJE,ACsBE,IpE7BA,EUiBE,AyDVE,ElCGgB,AkCHd,ACsBA,C7ClBD,ACFA,AfOA,ACCA,AGdA,AoBOgB,CVCrB,ACFA,AOCM,A/BVA,AkBSA,CeCiB,AkCHd,C1DST,ACCQ,AGdR,AoBOkB,AEQV,CHJE,AhCdD,CuBWC,ACFA,AwC8BA,AGhCE,C5CID,ACFX,AfOW,ACCA,AGdA,AsDIE,CtDJb,EUQc,AbMA,CaNd,CdKA,AsBNgB,CrBOd,AQRe,AiDFR,CAAW,CpCGa,AIQd,CHJE,AhCdD,AkBSA,A8C8Bd,AIVgB,CpCfA,ADJtB,A/BVqB,CmCkBC,A6BqBA,CGhCb,ACsBgB,ClDpBD,CcKH,AhCdZ,CmCkBiB,AnClBA,AmEOE,CnCOA,AGID,GAAL,CAAS,AgCXjC,CHgCkC,AIVP,CJUQ,AIVR,ElDpBL,CcKiB,AhCdD,AkBSA,CcKE,AhCdZ,AkBSN,CAApB,AkDoByB,CpCfJ,AhCdkB,AgEuCA,AIVR,CpCf7B,AhCdwB,AgEuCc,C7BrBlB,CnClBkB,CmCkBG,E6BqBV,CAAa,E7BrBE,GAAG,CAA7B,CAApB,AiCWuB,CJUO,AIVc,CJUxB,aIVG,CACvB,KAAK,YAAL,CAAkB,IADK,EAEvB,KAAK,YAAL,CAAkB,KAFK,EAGvB,KAAK,YAAL,CAAkB,MAHK,CAAzB,CArCF,CA0CE;ApCnBE,ATHF,ACFA,ACoBA,AEjCE,AlBoBF,ACCC,AGdF,AkBQC,AEF0B,AESxB,AnClBA,AoBQH,AHKC,A+C0BM,AH5BV,AMJE,AC2BE,K1DnBO,CyDRH,EpCIA,AEFsB,AkCFpB,C5CID,ACFA,AfOA,AwBPsB,CVE3B,ACFA,AwC8BM,CrC3CC,AjBqBA,AqBNA,AEFsB,AhBItB,AkDNE,C1CsBD,AhBbR,AwBPkB,AESV,CnClBC,CuBWC,ACFA,AOEA,CRAC,ACFX,AGbW,AlBoBA,ACCA,AqBNX,AoCJa,CxCXD,AViBZ,AkDNc,C1CsBD,AuCUA,CzC5BC,AbMA,CaNd,AIfe,CAAb,AqC2Cc,ChEvCC,C2BJC,AlBoBA,ACCA,AVjBA,AmEOT,CxCXU,A3BIF,CyB6BjB,AUXoB,C1BFT,ACCJ,AVjBc,C2BJC,A3BIL,CUiBM,AyBCA,AnClBd,AmEOgB,C1DSD,E0DTI,C1DS5B,A0BE2B,AnClBA,AmEOE,ChCWD,A6BqBA,CAAC,ChEvCC,CmCkBP,AnClBS,C2BJ9B,AQsB8B,AnClBF,CAAH,AgEuCC,AGhCH,CxCXS,AqC2C5B,AGhC8B,CxCXD,C3BIG,C2BJpC,EAAqC,A3BIE,CAAE,AmEOlC,CnEPgC,CmCkBlB,AnClBrB,CmEO2C,ChCWD,GgCX9C,GhCWoD,GAAG,CAA9B,CAArB;AZNF,ACFA,ACoBE,AEjCE,AlBoBL,ACCG,AqBNF,AEHgC,AEW9B,AnCnBD,AmBMH,AFOC,ACJC,A8C8BK,AH5BT,AMJE,EhDDA,GnBRW,CUmBP,AVnBF,AmESI,ExCXA,AIeA,AEH4B,CVG3B,ACFA,AGbA,AjBqBA,AuBT4B,AfC5B,AiDFE,C5CIP,ACFA,AGbO,CFiCA,AEjCF,AMY8B,CRqBjC,AEjCE,AjBqBI,AuBTU,AEWV,AgCZE,CxCXE,ATaH,CKEC,ACFA,AGbN,ATaM,CKEC,ACFX,AdQW,CiBrBM,AwCWH,CxCXV,ATaS,AiDFE,C5CID,AbMA,AQRd,CKEA,AJLe,CDGC,CSbO,AjBqBf,AqBNS,AbFA,CSbb,ARUW,CgBaI,AgCZT,CzDUU,AqBNA,AbFA,CaEpB,AbFA,CaNyD,AIgBnC,CJNtB,AbJuB,CAAC,AiDFE,EjDE1B,EAA4B,AiDFE,CzDUD,AyDVE,CzDUD,CyDVhC,WzDUI,QyBEgD,CAAC,MAAD,EAAS,CAAT,EAAY,CAAZ,EAAe,WAAf,EAA4B,YAA5B,CAAhD;AHJF,ATHA,ACFA,ACoBI,AEjCD,AjBqBF,AGvBkD,AoBab,AEYpC,AnCnBH,AoBQD,ADFE,ADGE,A8C8BC,AH5BP,AMJE,AC0BE,EhDzBF,A+CDA,CnElBA,EU0BS,AyDRN,CjDEC,AiDFA,CHuBA,C/BvBoC,A+BgClC,AINE,CpCnBD,ATHA,ACFA,ASFkC,AjCPlC,CuBWL,ACFA,CdQO,AuBVkC,AdDlC,AiD2BE,CjCdD,EZRE,ACFA,ACoBA,A2CIE,C7CtBD,ACFX,AwC8BW,AGhCb,ChDDc,CDGC,CcKC,ATHA,ALFA,CcKC,ATHf,ALFa,CAAX,A8C8BE,ChCzBJ,CZNkB,A4C+BA,C7BpBC,AfXA,AFCA,AkDwBP,CAAA,EjCdU,EfXJ,AFCM,EED4B,CDFpD,CMuB4B,GAAG,IAAI,APpBhB,COoBiB,APpBA,AkDwBxB,ClDxBO,AkDwBU,CAAC,C3CJC,APpBQ,COoBC,KPpBtC,COoB4C,CAAC,GUVG,CAAC,EVUpB,C2CIF,C3CJ0B,A2CI3C,EjCdsC,AiCcD,EjCdU,CVUC,AUVV,EAAY,CAAZ,EAAe,MVUlC,CAA3B,IUV8C,EAA4B,YAA5B,CAAhD;AHJA,ATHH,ACFA,ACoBK,AEjCH,AlBY8C,ACS7C,AGdN,AkBSI,AENkB,AEahB,AnCnBF,AoBQA,ADFD,AFOD,ACJG,A8C8BG,AH5BR,AMJE,AC0BI,EnDpBJ,AkDNA,ChDhCI,CAiCJ,CgDDG,CzDUC,AyDVA,AC0BA,CnC3BA,C+BiCE,CtDtBC,AqBLA,AXJA,CpBRC,EUiBE,AyBEA,CHLE,AZND,AHKX,AkDNA,C1CsBY,AzB7BA,AoBQA,A+CDA,CzDUC,AqBLA,AoCLb,ClDMA,CjBbe,AoBQA,A+CDA,C1CsBC,AfZA,AUTd,A+CDF,E/CCkB,A4C+BA,AGhCA,C1CsBC,AfZT,AqBLR,AXJiB,A4C+BA,CGhCnB,EnCOuB,AtBGD,AyBEA,AgCZA,CnCOE,ADFD,AXJA,C+CDvB,AC0BwB,C3CJC,AUVA,CVUE,AzB7BD,AgEuCR,AGhCQ,AC0BA,CpCnBH,AhCdI,AgEuCrB,CjC3BsB,AXJA,CYME,AmCP9B,EzDU+B,AyDVA,CzDUC,AVjBjB,AmEOf,CnEPiC,CAAlB,AmEOmB,CpCKhC,A/BZA,E+BYmC,AqCoBc,CpClBZ,AZNrC,A+CDoC,CnCOE,CZNA,CAAC,C+CDC,CnCOnB,AZNrB,A+CDyC,CnCOvC,APeyC,AfZzC,CyBEyC,AfXA,A+CD7C,ChCY8C,CVUE,CAAvB,CAAnB,QUVuC,CAAzC;AHJA,APeE,AEjCL,AjBqBE,AqBLC,AEND,AEaC,AnCnBF,AoBQE,AHKF,A+C0BI,AH5BR,AMJE,AC0BI,ED1BJ,EnEPE,CmEOC,CnCOC,AmCPA,AC0BA,EJME,C/C1BC,CjBbC,AoBQA,A+CDR,CnCOS,CAAC,ADFA,AIOA,CnCnBC,CyB6BC,AuCUA,C5C/BC,AHKX,A+C0BW,ChCzBJ,EAAO,APeA,ARhBA,CAAC,CAAD,A+C0BJ,CvCVO,ALrBX,A4C+BF,C5C/Be,CAAb,CeWc,AnCnBA,CAAC,AoBQE,AHKF,AmDoBA,C3CJC,ARhBtB,CeCuB,AGKA,AiCcA,CpCnBC,ADFA,AXJlB,CpBRG,CAAiB,C+BYC,CCEpB,AZNuB,CYM5B,GPee,CAAiB,AMjBD,AXJE,AgDuBc,CrCnBd,CAAF,CAAN,A/BZS,CyB6BnB,AzB7BS,CyB6BtB,CMjBqC,A/BZF,C+BYrC,A/BZwB,CoBQxB,CpBRsC,CmCmBG,AfXE,CeWD,WAAD,CAAzC;AHJA,AT7BN,ACFA,AC+CQ,AbhCF,AmBcA,AIQA,AnCpBA,AoBQE,ADDN,AFME,ACJA,A8C8BG,AH5BP,AMJC,AC0BK,MxDnCA,AuBsBA,AiCaA,E3CHE,CRjBC,CcDC,AdCN,CCJO,CkDwBC,CpCnBE,AhCdD,AoBQA,AHKA,CQiBC,AUVA,AiCaA,CjCbC,EVUE,CRjBC,CGLV,AHKK,CGLQ,CpBRA,AoBQb,CpBRc,AiBaA,ACJlB,COqBmB,AMlBA,A/BZF,AoBQI,CYMA,APgBD,COhBE,AhCdD,C+BYC,AIQZ,AnCpBO,CYFf,AZEO,AoBQL,AHKmB,CkBOC,AfZE,AHKR,CeCG,APgBR,CAAa,COhBE,APgBf,AzB9Bc,AiBaA,EQiBE,EzB9BE,AoBQ3B,CRVmC,AZEP,AoBQG,AHKH,CAAL,EkBOjB,AfZwB,CYMG,AfDD,CeCE,AGMD,AlBPrC,CcDE,CCEmB,AhCdM,AoBQuB,CYMhD,ADFsC,A/BZA,CAAb,IAAkB,EyB8BhC,CAAT,CALF,Ab3BA,AuBsBQ,AnCpBuC,CyBgC7C,AblCoD,AZEN,CmCoBC,EJRE,GAAG,C/BZX,CAAa,CAAb,CAA3C,GmCoBQ,CAAR,QJRsC;ACGtC,ALnBJ,AjBqBE,AElBQ,AmBcP,AEND,AEcC,AnCpBA,AoBQK,AHKN,ACJD,A8C8BE,AH5BL,AOkBqD,ExD/BzC,GZAC,AgE2BT,AIIY,CpCfV,AhChBF,AoE+BA,GzClCK,AVkBA,CUlBP,CKmBS,AtBEA,AuBVC,CDQA,CfDR,CLfoB,AQUV,CAAC,CYMJ,AfDK,CPGC,AElBO,CoBgBN,EZNE,AHKA,CPGC,AURC,CVQA,EURF,CAAV,AHKM,CPGC,AOHS,CeCC,AtBEA,AURE,AHKb,CeCY,AfDxB,KeCO,AtBEM,CsBFX,AtBEK,GAA0B,IAAI,CAAC,CuBVjB,EvBUY,CAAS,EuBVlC,CvBUqC,CuBVjB,EvBUoB,GAAf,CAAjC,AuBVQ,EAA4B,CAAC,CAAD,EAAI,CAAJ,KAAS;ADS3C,ATeA,ACrBA,ACuBE,ACLJ,AC/BH,AjBqBE,AElBC,AqBQE,AEcH,AnCpBA,AoBQS,AHKR,A4CFJ,AMJA,AC0BI,M7CJE,ACrBA,GEkBG,Ad5BA,AKeA,AkDNA,AC0BA,G3CFG,AbjCR,AqBQQ,AbEA,CYME,ACRD,AhBOT,CMgBE,ANhBS,CQkBA,AbjCA,AKeX,CgBPY,AmC2BZ,ChDzBa,A+CDjB,C1CwBkB,ALvBC,A+CDD,C3CCZ,AEkBF,ATbiB,AmDoBF,C1CPC,ATbhB,CLfa,AQUA,A+CDjB,C/CCY,AgDyBU,C7CJQ,A4CtBmB,AC0B1B,CpCnBE,ApBhBrB,CoBgBsB,AZNC,CMkBvB,AOpBsB,AbEd,CMkBe,AOpBA,CTEQ,ASFP,CDQH,CmCPzB,CnCOgC,ACRD,CPoB3B,AOpB4B,AkCCqC,GlCDlC,CRyB3B,IOjBiC,ACRf,AmC2BP,CpCnBuB,ACRpC,EDQmB,AoCmBkB,CpCnBrC,YoCmBa,EAAf,CAjDF,CAmDE,K7CNE,CAAgD,ICrBhD,CAAqD;AQOrD,AToFJ,ACrBA,AC9CM,ACLL,Ad5BC,AmBaA,AELE,AEcL,AfZU,AHKP,ACJF,A8C6BE,AH3BJ,AMJE,E5C2FA,ACrBA,ANpEA,AiDFA,CzC3BoD,CAgDpD,AsCUE,CG/BC,CnCOC,AmCPA,GvDTG,AmBaA,AdEA,CgBPC,CDQC,ACRA,AbAD,A4CgCC,ChCxBC,ApBhBR,CWoGF,ACrBA,AOlEW,AdET,CMqFU,ACrBA,AC9CA,AMpBA,AELA,AhBOC,ACJD,A8C6BA,CpDxCC,AqBQA,AhBOX,AkDNF,CnCOS,ACRK,CRyBC,AMpBA,AELX,AbEW,AFCH,CcKI,ADHd,AoCJc,ClDMG,CQkBD,AMpBA,AdEhB,CLfa,AmBaI,GAAG,ENoBE,AbjCtB,AoDwCsB,ChCxBC,APiBA,AuCOA,ChCxBC,EAAjB,CAAL,AgCwBoB,CAAtB,AG/B4B,C1CwBxB,A0CxByB,I5C2F/B,ACrBA,AOlEE,ERuF+D,ACrBA,AOlE5B,CAAC,AoCJR,CAA9B,CpCIE,EAAwC,CRuF6B,ACrBA,GDqBG,ACrBA,GDqB1E,ACrBA,EDqB6E,ACrBA;AQ9DzE,AToFF,ACrBA,AGlFJ,AjBqBE,AElBE,AmBaE,AELA,AjCNJ,AoBQU,AHKR,ACJA,A8C6BD,AH3BH,AMHE,AC0BE,E1DlBF,CsDFO,CAAP,EGNM,CAAC,ExCbT,AfGS,AZEA,AiBaA,AmDqBA,CnC5BC,AkCEE,CpCGD,AELA,AfGA,CNXP,AQUQ,CYME,AfDV,CPGU,AuBVA,AhBOC,AkDLC,CzDQD,AElBA,AqBQA,AjCNb,AiBaE,ACJW,AiDDE,ClCFD,AmC4BZ,C1DlBU,AuBVR,AbEW,CAAE,CVQQ,AOHN,CUlBrB,AVkBI,CUlBoB,AjBqBV,AElBG,AQUA,A+CAL,CxCbZ,APaY,CVQ2B,CsBFd,ALnBW,CKmBV,AtBEZ,AElBV,AmBaE,AbFK,CaEe,AbFA,AiDDE,CzDQuB,EsBF1B,AtBEX,AyDRiB,CAAC,CnCMA,AtBE+B,AQPhC,EROjB,CiBrBd,CjBqB2E,CiBrBnB,AIgBpB,AoCHR,CzDQd,AqBLwB,AoCHC,CpCGH,CrBKmD,AqBL7D,CCGe,CAAC,AtBE5B,CqBL8B,AoCH1C,CzDQiG,CqBL7F,AbFoB,CROZ,CsBFW,ALnBzB,AIgBgD,CCG1C,AtBEuG,AQP9D,CSd6B,GIgBtE,EbFK,CAAP,ISdJ,EAAgG,KAAhG,EAAwG;AKoBlG,AToFF,ACrBA,AC/CI,AEnCN,AjBqBE,AElBA,ACCE,AkBYD,AELC,AEcN,AnCpBC,AoBQU,AHKP,ACJD,A8C6BF,AH3BD,AMHE,AC0BC,GArDM,GvDkBH,AsDSE,CxCbD,AwCaE,E5C0FA,ACrBA,AZ/EA,AuBsBT,AlBPS,CPGC,AuBVA,AkCEE,CxCbD,AMWA,CNXC,AfGR,CKeA,CPGU,AuBVA,AhBOC,AkDLC,C1CsBD,AEnCA,AfGA,AqBQA,AhBOX,AkDLa,CxCbf,AfGE,AqBQY,CvBUC,AuBVX,CV4FF,ACrBA,AC/Cc,AEnCA,CAAC,AVkBE,CJdf,AIcF,CMqFiB,ACrBA,AC/CA,A0CtBT,CxCbU,EFmCP,E0CtBa,E1CsBA,CZ/BQ,AsDSL,CAAC,ExCb9B,CFmC+B,CEnCC,CAAC,CwCaP,CxCb1B,AQyBF,AgCZuC,ChCYD,CRzBC,AjBqBd,IecG,AUV5B,AgCZE,C5C0FE,ACrBA,AC/CyC,CUVgB,CtBrBvD,AsBqBN,CtBrBqD,CsBqBmB,CAAxE,CVUmD,CAAE,AUV8B,GVUhC,CAAvB,CUV5B,EAAkG,GVUjC,GUVjE,CVUQ,CUVwG,CVUzC,GfdhC,EAAE,GAAG,KAAK,WAAL,CAAiB,CAApC,CAAR,EAAgD,+BAAc,EAAE,GAAG,KAAK,WAAL,CAAiB,CAApC,CAAhD,EAAwF,+BAAc,EAAE,GAAG,KAAK,WAAL,CAAiB,CAApC,CAAxF,CAAb;AamFA,ACrBA,AC/CM,ACJR,AC/BE,AjBqBA,AElBD,ACCS,AoBON,AEcJ,AfZO,AHKL,A4CFJ,AMHE,EtDTU,Ca2BR,CC/BA,CAAC,CAAE,AwCaD,CxCbD,CAAD,AQyBI,AgCZA,C5C0FC,ACrBA,AJ3ED,CK4BE,AfdA,AuBVA,CPoBR,AC/BW,AMWF,AkCEA,CAAT,CxCbE,CD+BQ,AhBVE,AGjBU,AoBOV,CAAC,CRwBC,AQxBA,CRwBC,AfdA,AGjBO,AoBOlB,CEcY,EZ8Ed,ACrBA,CC/CM,AUVW,CVUC,CFoEC,ACrBA,EDqBnB,ACrBA,CWzDsB,CAAC,CVUC,CAAE,GAAG,EAAL,CAAlB,Ifde,CyBIJ,EAAnB,4BzBJqC,EAAE,GAAG,KAAK,WAAL,CAAiB,CAApC,CAAR,EAAgD,+BAAc,EAAE,GAAG,KAAK,WAAL,CAAiB,CAApC,CAAhD,EAAwF,+BAAc,EAAE,GAAG,KAAK,WAAL,CAAiB,CAApC,CAAxF,CAAb;AsBDA,AToFA,ACrBA,AC/CK,ACJL,AhBVA,AGjBA,AkBYA,AISF,AfZK,AFCL,A8C6BI,AH3BN,AMHE,AC0BQ,EAAA,ID1BJ,EhCYE,AgCZA,CnCMC,AToFA,ACrBA,AC3DH,AZnBG,AKUA,A8C6BH,CvCNE,ACNE,AhBVA,AqBLA,CoCHC,CzDQC,AGjBR,AsDSF,AC0BQ,CAAA,E1DlBK,AGjBA,Ca2BC,AhBVA,CqBLC,CCGC,AtBEA,AyBIA,CHNC,ANYA,CKfC,CrBKC,AGjBJ,AsBqBc,CZ8E3B,ACrBA,A4C3CM,CpCpBN,AtBEW,AyBIb,AiCcQ,C1CRc,Ab3BpB,AkBYoB,CRuFC,ACrBA,AwCvCnB,CzC4DF,ACrBA,AwCvC6B,CtDtBN,EQPzB,CAA4B,AkDyBpB,CJIJ,CtDtB0B,CQP9B,A8C6BsD,AIJtD,C1CRiB,CAAgB,ARjBgB,K8C6B7C,EAAoE,CtDtB/C,CAAiB,CAA7B,A0DkBb,G1DlB8C,QqBL5B,CrBKqC,AqBLjB,CrBKkB,GAAtD,EqBLgB,EAA4B,CLe7B,CKfC,CLehB,AKfA;ACIE,AToFF,ACrBA,AGnFA,AjBsBA,AE1BwD,ACSxD,AoBME,AEgBJ,AfbG,AFCD,A8C4BwE,AH1B5E,AOuBI,EJGwE,I7BhBtE,GZ6EG,ACrBA,AGnFA,AdKA,AuDmCA,C1DlBC,AQPA,CeJC,CpBNP,CmBeU,ALpBD,AjBsBA,AyBKA,CR3BC,CdKC,AoBMA,AfIA,CROC,AuBXA,AEgBA,CR3BC,AQ2Bf,CR3BE,ATec,CeJC,CNXC,AMWd,CV6FF,ACrBA,AGnFiB,AjBsBA,AGjBJ,AKUI,CeJC,AfIA,A8C4BoD,C/BhCnD,CDSE,AToFD,ACrBA,AGnFA,AyCwCpB,CpCpBsB,CnBftB,AoBMsB,EmC6BE,CpCpBH,AoCoBrB,C7CgEA,ACrBA,A4C5CF,CpCnB8B,ACTD,AmC8B3B,GzCzCA,ATeA,ESfgC,CAAC,CjBsBrB,CiBtBZ,AjBsBmC,CsBFE,CAAC,ALpBD,EjBsBzB,EAA6B,CsBFpB,ACTnB,CDSA,CCT0C,CvBWhC,AuBXiC,CvBW7C,CuBXE,EAA+C;ADU/C,ANWF,AC/BE,AjBuBF,AGlBA,AkBWA,AELI,AbGL,AFCC,A8C2B8F,AHzBlG,AMJE,EH6BgG,IhCtB5F,ALpBA,AwCaA,CxCbC,CD+BC,AC/BC,CAAF,AdKE,AkBWA,CJhBH,ATeI,AiDFA,CnCOC,ALpBG,AjBuBH,AyDVA,CnCOC,ALpBN,AdKF,CkBWS,CLeC,AKfA,AELA,CPoBC,AhBRA,AGlBA,CmBeJ,ALpBS,AjBuBJ,AQRA,CaCC,AoCHX,CnCOY,ALpBZ,AIgBF,CbDe,CRQR,AqBPS,AELA,CPoBZ,AhBRa,AGlBJ,AkBWI,CbDC,AiDFA,ClCFC,AfIA,CRQC,AqBPA,ClBXpB,Ca0BsB,Ab7BF,CmBkBG,ANWvB,AhBRuB,AGjBvB,CmBcwB,ACTA,CPoBC,AhBRA,CsBHlB,ADJP,CCIE,CtBG0B,AqBPA,AoCH9B,CpCG+B,CrBOtB,AyDVuB,CzDU9B,AqBPA,CELmB,AfInB,CaCiC,AELA,CAAd,CAAf;ADUF,AToFF,ACrBA,AC/CI,ACLF,AhBRH,AqBPG,AELE,AEgBN,AjBXE,A8CyBsE,AHxB1E,AMJI,AC2BA,IJCyI,AG5BzI,EH4BE,AG5BA,ChCcC,C6BcwI,AIDrI,C7CgED,ACrBA,A2CtEA,CpCGC,AbAA,CiBWC,CTIC,ASJA,AgCdA,CnCOE,APgBD,A0CvBA,ClCFC,CAAC,AEgBA,CTIC,ASJd,AjBXc,CaAC,AqCwBE,C7CgEf,ACrBA,AOnEc,AELA,AEgBA,CZ6EC,ACrBA,AWxDA,AjBXA,AiDHV,CAAW,AC2BE,C1CTV,CDKJ,ACLc,ASJA,CVSC,AUTA,CHPE,CAAC,AmCPjB,ChCciB,CjBXC,AkDwBL,CnC7BM,AfKA,AiDHA,AC2BN,CpCpBG,ACTI,CFKnB,AELoB,CDSE,ADJD,AELA,CV6F3B,ACrBA,AOnEM,AIWR,CZ6E+B,ACrBA,AOnE3B,AoCHF,ClCF8B,AEgBA,CJXC,AIWA,AiCab,CAAM,CjCb1B,CVSM,AQzBqB,CRyBU,AUTA,CHPE,AToFD,ACrBA,CQ/DE,AdJvB,AkDwBc,C1CTrB,AOpB8B,AfKA,CQepC,EMXmB,APgBjB,COhBF,CCTyC,GfK5B,AkDwBG,ClDxBlB,CkDwBwC,I7CgExC,ACrBA,C4C3C6C,C7CgES,ACrBA,ISxE9B,CAApB,CmC6Bc,C7CgE2C,ACrBA,A4C3C7D,CAHF,CAKE,c7C8DA,ACrBA,EDqB+E,ACrBA,ODqBO,ACrBA,gBDqBtF,ACrBA,EDqBwG,ACrBA,ODqBO,ACrBA,gBDqB/G,ACrBA;AQ9DE,AToFH,ACrBA,AEpDE,AChCC,AdMF,AkBWI,AEJA,AEeJ,AfbF,AFEE,A8CyBF,AHxBF,AMJI,E/CCF,EFEE,AiDHA,EnCOE,AmCPA,ElCDE,A+B6BA,CnDpCC,AoBOA,AkCCA,ChCcC,AjBXA,CcIC,ALrBA,ATiBA,CcIC,AnBfR,CoBOS,AkCCA,CpCGC,AEJA,AkCCA,CxCdC,AdMA,AoBOA,CDQJ,ALrBK,AdMZ,AoBOS,AEeG,AjBXZ,CEFa,CYMC,AZNA,COfC,AMaA,AEeA,AjBXA,CSjBb,AQ4Bc,AgCdX,ExCda,CAAC,AQ4BA,AfbN,CFEb,CeJI,AbEyB,A+CDR,CxCdC,AqC0CA,ChCrBC,CAAC,AGOA,AgCdA,ChCcC,A6BcA,AG5BA,GnCOlB,CAAL,EmCPmB,CxCdnB,AwCc8B,ChCcb,CR5Be,CAAC,AQ4BnC,ER5BE,CwCcG,CxCdkC,EwCcE,IAAzC,eH4B4D,CAAC,oBAAD,CAA9D;AhCpBI,APeE,AEpCA,AjBwBN,AGlBC,AkBWO,AEJF,AbEJ,AFEA,A8CyBF,AHxBF,AMJG,AC4BC,E1DlBF,CyDbA,CjDME,ISjBI,AMaA,A+B6BA,AIAE,CzC1CD,AMaA,AbEA,A+CDA,CxCdE,AIiBD,AbAA,CSjBD,ATiBE,CSjBH,CKqBM,ALrBE,AMaH,AbEA,COfL,AMaM,AbEA,CaFC,AmC6BE,CzC1CI,AMaR,CNbL,APeS,AFEb,CaAc,AXFd,AgD2BgB,C1DlBD,AuBXA,CvBWC,AqBPA,AXFA,AFEA,CSjBO,APeN,C4C2BC,EhCrBG,AtBGN,CsBHO,ACRlB,AbEiB,A4C2BA,CrC1CjB,AjBwBuD,AQP3D,CaAuB,CAAC,CCIH,CtBGN,AUTW,AgD2BV,CpCrBY,AoCqBZ,C1DlBoF,M0DkBpF,CAAQ,CpCrBa,AZNrC,CYMsC,CZNA,CAAC,EYMlB,AZNrB,CYME,CZNyC,CgD2B3B,EAAmB,KAAK,GJAc,CAAC,QIAvC,CAAhB,CANF,CAOE,OJDsD,EAAqB,iBAArB,CAAxD;AhCpBI,AToFJ,ACrBA,AEpDE,AChCG,AjBwBH,AqBTU,AEFN,AEcJ,AfZE,AHKH,ACFC,A8CwBF,AHxBF,AMJI,AC6BA,E7C8DF,ACrBA,E2CtEE,EnCOE,AmCPA,E5C2FE,ACrBA,ASvEA,CV4FC,ACrBA,AOrED,AEFC,AEcA,A6BeA,AG5BA,C/CCC,AFGA,CcGC,ANWC,CMXA,AmCPA,ClCDC,AEcA,AjBTA,AiDJA,ClCDC,AEcA,CFdC,AbEA,CYMJ,ANWM,AOnBJ,AfKG,CiBSC,CHNC,AGMd,CFde,AkCCV,ChCaW,AgCbA,ChCaC,AfZX,CAAa,AFGD,CKuFd,ACrBA,AJrEE,AFGa,A8CwBA,C7BfC,A6BeA,CzC+De,ACrBA,ASvE/B,AEciB,AfZE,C+CDlB,CnCOkB,CAAC,AGMA,AfZlB,CMiBE,AyClBiB,CzCkBE,EMXpB,AZNuB,CYM5B,AGMF,AjBTY,CAAkB,AiDJ9B,ChCa+B,CTKvB,ASLwB,A6Be3B,CtCVL,ANjBmC,A4C2BF,C7BfjC,AjBTY,CAAZ,CiBSoC,AjBjBW,CAQT,C8CwBjC,EAAmC,C5C3BtC,EAA2C,I4C2BxC,CAAP;AhCpBI,AToFF,ACrBA,AChDE,ACJH,AChCE,AjBwBD,AG3BiD,AkBoB9C,AEJC,AEcF,AfZE,A4C2BP,AHxBD,AMJI,AC6BA,G1CnEkD,CA0DpD,AyCpBE,EAAE,CpCF+B,CAO/B,AENE,CV4FC,ACrBA,ASvEA,AkCCA,CzDUC,CeYC,CAAL,AfZM,AyBGA,CHNE,ACRD,AbEA,A+CDA,ClCDC,AkCCA,CzDUC,AuBXA,CAAF,CEcI,EzBHE,AuBXA,AbEX,CG0FJ,ACrBA,Ad5DgB,AyBGA,AfZC,A+CDZ,CzDUL,AUTI,EG0Fe,ACrBA,AJrEE,CYMA,CAAC,ACRlB,AkCCiB,E/CCjB,CG0FoB,ACrBA,AJrEE,A+CDF,CnCOH,AmCPI,ChCaC,CHNE,AGMD,IfZvB,A+CDiB,C/CCc,A+CDH,ChCaC,EZ8Ed,ACrBA,AJrEe,CYMG,AToFD,ACrBA,AWzDA,CHNE,AGMZ,AgCbrB,ChCaH,CfZ6C,C+CDP,CnCOnB,CAAnB,AToFiB,ACrBA,CDqBwB,ACrBA,C2CtE3C,a5C2FyD,ACrBA,CDqBC,ACrBA,aDqBf,ACrBA,EDqBxB,ACrBA,CDqBnB,ACrBA;AQ9DE,AToFH,ACrBA,AChDK,AEpCL,AjBwBC,AuBXG,AEcD,AfZI,AHKR,ACHE,A2CCJ,AMJG,ElDMD,ECHE,EiBUE,AlBPA,CAAC,ACHA,COmBC,APnBA,EROE,EAAE,AOJN,EQgBQ,ALrBA,AHKK,CPIJ,CyBGC,CVSC,AUTA,AjBVb,CAAc,CROC,AUTA,CVSC,AUTA,CVShB,AQPA,EOmBI,APnBe,CiBUP,AjBVZ,CiBUE,CjBVoB,CEFZ,AFEV,CiBUwB,AfZA,CFEC,EEFf,EeYmB,CAAC,AjBV9B,CiBUwB,CjBVQ,CEFC,CeYC,AfZA,CAA5B,EAA+B,CFErC,EiBUoC,AjBVI,CAAxC,EiBUwB,AjBVmB,CAA3C,EiBU0C,AjBVI,KiBUC,AjBV/C,CiBUgD,CAAN,AjBVW,GiBUD,GjBVpD,GiBUsD,KAA9B,GAAsC,KAAK,CAAC,CAAN,GAAU,MAAE,IAAxE;AVUE,AEpCP,AjBwBG,AyBGE,AfZM,AHKR,ACFA,A8CwBG,AHxBP,AOwBI,MjCfE,EiCeE,CnDtBC,CPIC,AOJN,CCFO,CRMC,AUTA,CeYC,AlBPA,EPIE,AsDkBH,AIAG,EhD3BE,CAAC,AHKA,AmDsBA,C1DlBC,AOJA,CPIC,AOJhB,CPIA,CAJoG,AUL5F,CVWR,AUXmB,AgD2BA,ElDxBE,CEHb,AFGc,C8CwBnB,CAA4B,KAA5B,AIAH,EJAsD,AIAvB,OJA5B,EAAqE,G9CxBjE,CAAqC,MAArC,CAAP;AcIA,AToFF,ACrBA,AEpDQ,AKfJ,AEJA,AEcD,AfZM,AHKP,ACFD,A8CuB2E,AHvB9E,AMLE,AC6BI,EJDwE,AG5B5E,C5C4FE,ACrBA,AEpDQ,EyCnBP,CAAC,GlDOG,CcHC,AdGN,CMqFF,ACrBA,A4C1CS,CnC7BC,ChBOC,CMqFD,ACrBA,COnEG,AoCJb,CzCmBQ,CAAgB,CTZR,CAAC,CAAf,CmDsBE,CJDsE,CtCTlE,C0CUc,C1CVkB,CKfpC,AEJoB,EFIE,CEJC,EFIE,AqCyBzB,CAD6B,CAE7B,CrC1B4B,GAAG,GAAG,CAAC,CAAb,AEJO,YAAN,CACrB,sCAAqB,CAArB,CADqB,EAErB,sCAAqB,CAArB,CAFqB,EAGrB,sCAAqB,CAArB,CAHqB,EAIrB,sCAAqB,CAArB,CAJqB,CAAvB;ADSA,AToFF,ACrBA,AChDE,ACJF,AChCJ,AjByBI,AqBPE,AISH,AfZM,AHKL,A+CoBgG,AHtBpG,AMLE,AC8BI,EJH8F,AG3BlG,GAAG,CAAC,G5C4FG,ACrBA,AGpFT,APWQ,AHSC,CPKC,AOLN,EPKQ,AqBPA,CdEC,CMqFT,ACrBA,A2CvEF,CzDYa,AqBPA,AoCLA,CAAb,EpCKgB,AdEA,AkDPA,CzDYC,AqBPA,AdEA,A+CoByD,AG3B1E,CxCbF,AjByBoB,AOLhB,CUpBoB,AjByBpB,AyDZiB,CxCbrB,AIkBsB,CoCLpB,CxCb8B,CwCaP,EpCKnB,AoCLJ,OxCbF,EAAoD,KAApD,EAA4D;AKrB1D,AP0DM,ACJJ,AChCF,AjByBE,AqBPE,AEAA,AbHC,AHKH,ACFF,A8CqBqH,AG1BtH,EH0BsH,KrCvChH,EVoBE,ACFA,CROC,AOLN,CUpBO,CAAC,AjByBA,AqBPA,AEAA,ChBEC,EUpBE,AjByBA,CiBzBb,EAAgB,AIkBA,AdEA,CUpBC,AjByBA,AOLA,CPKC,AOLhB,CPKA,AqBPiB,CJlBC,EIkBE,EEAE,GFAG,AEAA,CFAR,AbAnB,CAA6B,CSlB7B,CIkB+B,CJlBC,AIkBb,CJlBc,CMkBC,CNlBlC,AIkBmC,AEAA,AfAnC,ESlBqC,ATkBiB,GaAd,GAAG,CAAvC,MEAuB,CAAwB,KAAK,SAA7B,EAAwC,cAAxC,CAAvB,CAvB2C,CAyB3C;AVsFF,ACtBA,AC/CI,ACJJ,AChCA,AjByBA,AqBPE,AISJ,AfZG,AHKD,ACFA,A8CoBwE,AIItE,IzC1CF,AqCsCyK,CrCtCxK,CAAE,AqCsCA,CrCtCF,CAAD,AqCsC2K,C7BXtK,AlBPA,CSYC,AhBPA,AQPA,AkDwBA,C7C+DE,ACtBA,AGnFC,CjByBD,AqBPA,ENkBE,CfXC,AOLX,ACFW,CKuFE,ACtBA,AGnFb,AIkBY,CLcC,A0CUA,C3CNC,ARhBA,ACFA,CROC,AqBPA,AISjB,CTKkB,AhBPA,A0DiBA,C1DjBhB,CagFQ,ACtBA,AdnE4F,AqBElF,CNkBR,AfTV,AOPmB,CMqFnB,ACtBA,AC/CoB,ACJA,ATZA,ACFA,CAAC,AkDwBA,ErCxBE,CAAR,EdEf,ACFA,CaA2B,AqCwBX,CAAY,IrCxBb,GAAoB,CLcnB,AKdoB,CAAlC,CNkBQ,ACJV,AK1BiC,AqCoCjB,C3CNZ,AMhBF,AqCsBqC,IAAvB,CAAd,CAJ6B,CAM7B;ApCvBJ,ATsFE,ACtBA,AC1EA,ACsBA,AChCD,AMmBG,AEQL,AfZE,AHKC,ACFA,A8CoBF,AGzBF,EnCOE,GPlB+B,COkB3B,APkBF,AQnBE,CDCC,EfAE,A+CkBA,AGzBe,C5C6Fd,ACtBA,AEpDA,AObA,AfDA,EcER,CCDW,AhBCT,A+CkBS,C/BnBC,AhBCC,AkDPf,ClDOI,AkDP0B,CjDKd,EeCE,AkCNlB,ClDOqB,ACFF,CQcC,AsCMX,AGzB6C,ClCMjC,A+BmBgB,C/BnBxB,A+BmByB,CtCNf,CTZG,CAAC,ACFF,CeCC,AhBCtB,ACFsB,CiDL1B,EHyBqC,AGzBqC,CzCmB5C,CAAC,AObA,A+BmBgB,C9CpB3C,K8CoBiC,KAAoB,I/BnBnD,EPaiB,GAA4B,aAA5B,EAAnB;AMXH,ATsFK,ACtBA,AEpDF,AChCH,AjB0BG,AKzFJ,AgBkFM,AEAA,AhBCF,ACDA,A8CmBA,AGzBF,AC8BI,M7C+DA,ACtBA,A2CvEE,AC8BF,GnDvBG,AkDPE,CzCmBD,AhBNA,AQPA,A8CmBA,CjCnBC,CrBOC,AuBPA,AkCNE,C5C6FD,ACtBA,APhET,ACDS,AkDwBA,CnDvBE,AmDuBD,C7C+DC,ACtBA,Ad1DA,AONX,AkDPa,ClCMD,AfAA,AiDNE,GzDaC,AuBPA,AhBCE,CMsFD,ACtBA,AEpDA,AhBNA,AuBPA,EfAE,CQaC,ARbA,AkDwBjB,C1DjBS,AuBPS,AhBCE,AmDuBF,C1DjBC,AqBPnB,AdCqB,CcDD,AdCtB,AkDPU,CzCmBa,AhBNA,AuBPA,AkCNE,CHyBD,CIKC,C1DjBC,CsDYC,AGzBjB,CzCmBS,AhBNE,AuBPO,AkCN9B,C5C6Fa,ACtBA,AEpDkB,ARbjB,CAAkB,CKsFxB,ACtBA,AdzDyB,CqBPC,CrBOC,AqBPC,CAAF,AbApB,AkDwBV,C1CXiC,AKbjC,AbAF,CQaoC,AhBNA,AQXgB,AkD4BhB,CrCxBG,AbAD,AkDwBpC,C1DjBS,CAAX,A0DiBuC,CAArC,E1CXiB,AKbjB,CLaF,AObgB,CPQsB,AKvBL,CL4BY,AKZ3C,CED4C,CAA/B,IAAoC,KAAK,M+BmBM,CAAC,Q/BnB7D,CA3B2C,CA6B3C,U+BiB4D,CAA9D;AzCqEE,ACtBA,Ad1DF,AyBCJ,AfnFM,AH4EF,A+CkBA,AGzBF,AC+BI,M7C8DA,ACtBA,A2CvEE,GhCcR,AlBPS,CPMC,AsDYA,CIMC,C1DlBC,CONR,CMsFU,ACtBA,APhEC,CPMA,AONX,AkDPa,C5C6FD,ACtBA,E2CvEI,CzDaD,AONE,CPMD,EyDbI,CAAC,CzDaV,AONW,A+CkBF,CtDZC,AONE,AmDwBrB,CnDxBF,CPMuB,AsDYA,E7BX3B,AgCdoB,AC+BS,C1DlBC,AyBCA,AiCiBxB,CD/BJ,CzDauB,AyDfiD,CAGxE,EzDYiC,EAAE,GAAG,AyBCxC,EzBDe,AyBCmC,CzBD9C,iBsDYwD,CAAC,kBAAD,EAAqB,iBAArB,CAAxD;AhCjBJ,ATmFU,ACtBA,AC7CN,ACJA,AChCE,AjB0BF,AK1FJ,AkBoFM,AEOJ,AlBPE,ACFA,A8CqBA,AGzBF,AC8BG,K7C2DD,ACtBA,A4C/CA,CzClCE,AMoBA,AEOA,AiCkBF,EJNI,ChCnBR,ANYS,ATZA,CPMC,AQRA,COkBC,ECJE,ASLA,AlBPT,CeAJ,ANYc,ATZC,CeAA,AfAX,CgBAY,AEOA,CVSC,ACJA,AChCX,AMoBW,AfFA,COkBC,ACJd,AChCE,CKoBN,AGOE,AlBPmB,CSYD,ARdA,CcEO,APgBhB,ACJU,AOZL,CRgBM,AQhBhB,CAAiB,AfFA,CQcC,AOZlB,AhBAoB,ACFF,CDEG,A+CmBvB,CtDbsB,AONtB,CgBAuB,CAAC,CvBMC,AuBNA,CDA7B,ANY8B,AOZH,CPYI,CMZgB,APgBf,CAAV,AfVW,AuBNA,CvBMC,CeUO,CPlBrB,CQchB,AhBNyB,AQRQ,CRQC,AQRlB,CQcmB,AhBNA,CgBMC,ARdA,CRQC,AQRrB,CQchB,CRduC,CQcC,AhBNA,EAAN,CuBNS,CAAC,AfF5B,CeEd,CvBM4C,AQRA,GRQrB,EAA0B,CQRnC,CAAhB,CRQyB,CAAzB;AsBLF,ATsFC,ACtBA,AChDG,ACJA,AhBLF,AqBTE,AEEA,AhBCF,ACFA,A8CoBA,AGzBF,ACmBE,MpCbE,ANYA,AKdA,AEEA,E+BmBE,CIMC,CpCzBC,AtBOA,CsBPC,AtBOA,AQRA,CcCL,CPgBO,CAAC,AfTA,CeSR,AuCGF,ChCnBY,ANYA,AKdA,AEEA,CDAV,ANYW,AKdA,AEEA,IDAI,ANYf,AhBLe,AqBTf,AEEU,CPYM,AKdA,AEEhB,CAAiB,CAAjB,CDAmB,AdDA,CcCC,AdDA,CcCL,AtBOM,AuBPA,CAAC,CAAC,CDAC,ACAH,CvBOI,CAAC,AqBTA,CAAC,AEEA,CDAC,CAAC,ANYP,ChBLD,CAAU,CqBTf,CbCX,CcCL,ADFA,AbCkC,IcCI,GCAG,AfDpC,CcCqC,ACAA,AfD5C,CcC6C,ANY3B,AOZhB,CDAsC,ANYD,GhBLU,CsBPC,CAAhD,CNY2C,CAAE,AhBLM,CgBKR,CMZU,ANYrC,CAAhB,GMZyD,CAAC,CAAL,GAAS,IAAI,CAAC,AtBOA,GAAG,GsBP1E,EAA+E,ItBOI,CAAC,SAAjC,CAA1B,CAAb,CAAV,CAhBoG,CAgBJ;AsBNhG,APgBC,ACJC,AXjGN,AgBoFM,AECA,AEMJ,AhBTQ,ADEP,A8CoBC,AGzBF,AC+BI,EjD5BI,EaGN,CPcO,CAAP,ACFE,AOZA,CEMC,CHNC,CAAC,CgCmBC,EjCpBE,CIOC,GTMG,AOZA,CDAZ,ANYc,AOZD,AEMf,CHNgB,ANYF,AsCOE,CtCPZ,EKbe,AECL,AEMK,A6BaA,ChCnBC,ANYE,AOZlB,CDAiB,ANYjB,AOZiB,CDAnB,ADDoB,AEClB,AdH0B,CAAC,CaGP,CCAC,CAAC,AdHI,CcGH,CDAC,ACAH,AdHiB,CaGb,AGM7B,CHNE,CCA6B,AEMA,CJPC,CAAE,AiCoBD,CjCpBD,AiCoBE,CjCpB9B,OiCoBe,CAAwB,E/BnBE,CAAC,CAA1C,C+BmBe,EAA+B,OAA/B,CAAjB;AhClBA,ATsFM,ACtBA,AChDP,ACJE,AhBND,AuBNE,AEMF,AhBTA,AgDHF,AC+BI,E7C6DI,ACtBA,CCtIJ,COsEF,APkBF,AUZE,EFNE,CVsFS,ACtBA,CQhEP,CAAC,CTsFM,ACtBA,Ad1DL,CyBAC,AhBTA,ETSE,CsBNT,CGMW,CzBAC,AuBNA,CvBMC,AuBNA,CdHC,CgBSd,EFNY,CAAV,CvBMiB,AuBNA,AdHA,CTSP,AuBNV,GAAqB,CvBMC,AuBNA,CAAC,CvBMzB,AuBNuB,AdHT,CAAc,EcGC,CdHf,CAAP,KAA+B,OcGK,CAAC,AdHrC,CcGL,CAjC2C,CAmC3C,AdL+C,KAAK,OAAL,CAAc,GAAd,CAA1C,GAAgE,CAAC,CAAxE;AaID,ATsFC,ACtBA,AG5EE,AjBkBF,AK5FJ,AgBoFM,AIQH,AhBTA,ADED,A8CmBE,AGxBF,AC+BI,MzCrCA,GJkGG,ACtBA,ANjEA,CROC,AsDYA,CjCpBC,CqC2BD,CzCrCJ,AjBkBO,CagFT,ACtBA,AwC9CU,CjCpBC,CrBQC,AqBRA,CRwFC,ACtBA,Ad1DA,AsDYA,EzCoEb,ACtBA,AOlEe,AqC2BF,GzCrCY,ATW3B,AkD0BkB,C1DnBG,AQPA,A8CmBD,CtDZN,CqBRL,EAAgB,AqC2BF,C1DnBG,EAAxB,AqBR0B,EbC5B,CaD+B,CbCU,EaDP,AqC2BhB,CAAe,ErC3BI,MAAjC,EAAyC,AqC2B3B,CrC3B4B,AqC2BF,IAA1B,CrC3BiC,AqC2B/C,CAHG,CAKH,ErC7BA,EAAqD,CAAC,IJVtD,AIU0D,CJVX,EIUM,EAAU,GAAG,IAAI,GAAtE,EAA2E;ARyF7E,ACtBA,AEpDA,ACQF,AjBbE,AqBTI,AEGF,AfFF,A8CmBE,AGxBJ,ExC0BA,IMnBI,CAAC,CAAC,CVqFC,ACtBA,CEpDC,AhBLA,AQRA,A8CmBA,E/BjBJ,CPWO,ACQX,AjBbW,AuBNA,CVqFT,ACtBA,AG5CU,CTrBC,CQaC,AhBLA,Ca+EC,ACtBA,CNjEC,CKuFd,ACtBA,CdzDgB,CAAC,IAAL,CgBKU,AhBLA,CgBKC,AOXrB,AfFqB,CAAC,CRQC,GAAG,CgBK5B,ARbA,ERQsB,EiBaxB,CjBboC,CiBa6B,CjBb3B,GAAG,EiBa8B,AjBbzD,CAAZ,EiBawE,GAA1E,EAA+E,yBAAyB,GAAG,CAA3G,EAA4G;AKpB5G,ATuFE,ACtBA,AChDM,ACJN,ACQA,AjBbA,AK9FJ,AgBqFQ,AEGH,AEKH,AhBTQ,AFIP,ACFC,A8CmBI,AGxBN,ACgCI,E3CVI,ANnBA,GcjCE,CAAR,EmC8DE,C7C4DG,ACtBA,AW1DA,CHPC,ANaA,AhBLA,AQRA,GRQG,CqBTC,AiCoBA,CvCFS,A2CUV,C3CVW,AfTR,AyBDA,AjBPA,AkD2BF,C1CdG,CH0Eb,ACtBA,ALnEsB,CaExB,ADDiB,AIQA,AhBTQ,ADER,CQaiB,AhBLhB,AsDWA,CzCoEC,ACtBA,AdzDA,CgBKjB,AKdkB,CRwFlB,ACtBA,AwC9CmB,EtDXP,A0DmBV,C1DnBoB,A0DmBF,ElD3BI,CRQC,AyBDA,AjBPA,COiBN,AUVO,C6BYC,AIQF,C3CVyB,AfTtB,AqBTA,AiCoBA,CjCpBE,ErBSR,AQRtB,CaD4B,AIQ9B,A6BYqB,CjCpBf,AqC4BF,C1DnBgC,AqBX2C,AiCsBzE,CjCnBA,AqC2B6B,C1DnBG,A0DmBlC,EjD7BoB,AiD6Bc,C1DnBG,A0DmBrC,CjD7B0E,CTUhE,CAAZ,GSVsB,EAAkE;AaGxF,ATuFA,ACtBA,AChDA,ACHA,ACOA,AjBbA,AuBLA,AEIH,AhBTG,AFKF,ACFE,AiDNF,ACgCG,Q1CbG,APhBA,CaEC,ATuFA,ACtBA,AG5CA,CFJC,AfTA,AuBLA,CdLC,ADGA,GQaG,APhBA,CMmBC,CfTC,Ca+EZ,ACtBA,AEnDa,CMdC,APiBA,AEId,CKrBe,AtBQA,ASVA,CIyFC,ACtBA,AEnDhB,CCOiB,CJkEjB,ACtBA,AdzDkB,CsBRlB,APiBmB,EfTE,AQPA,CAAC,EROtB,CAtBoG,CAwBpG,GeOA,OPhBO,CCHG,ADG2B,CCHC,EQuBtC,GRvB2C,GDGG,CAAC,CCHC,CAAC,EDG1C,EAA8C,ECH3C,CAAV,EDGO,EAAqD,MAArD,CAAP;AcAE,APiBF,ACHA,AXrGJ,AgBsFQ,AEIF,AfFH,A8CiBK,AGvBN,MnCKI,ACGA,EPWE,EMdE,APiBA,COjBC,CAAL,AgCkBM,CtCJC,CKfC,ELeE,EsCIE,CjCnBC,AiCmBA,CvCDC,AQfV,CPYW,CKfC,CNkBC,AuCCf,EAAiB,MjCnBM,CAAE,CAAF,CAAvB,GNkB6B,ACHjC,CDGkC,ACnBI,CAkBtC,YDCmB,EAAnB;AOhBE,ATsFF,ACtBA,AC/CA,AEGA,AjBXA,AqBTI,AEGF,AdNF,A6CqBM,AISN,MnCxBE,EFHE,AZHA,AiD8BE,C7C2DD,ACtBA,AG5CA,CFHC,AfRA,AsDSA,C7CrBC,EIyFE,ACtBA,AC/CA,AfRA,Ca6EC,ACtBA,AS7DA,AmCwBE,CjD9BD,CMoBC,AfRA,AuBNA,AdNZ,CIyFa,ACtBA,AwC9CA,AISE,C7C2Df,ACtBA,ALnEc,A6CqBA,EzCoEE,ACtBA,AG5ChB,AyCOA,C7C2DiB,ACtBA,AG5CA,AIpBA,CAAC,ERsFE,ACtBA,CdvDC,ASZA,CMoBC,AfRA,AqBTlB,CNiBmB,AMjBA,CZHT,CIyFW,ACtBA,GOhErB,CNiBJ,EuCCa,CAAP,EtDTM,CAAuB,Ea6EnC,ACtBA,AdvDY,Ea6E2B,ACtBA,AdvDA,Ca6EC,ACtBA,EDsBxC,ACtBA,AG5CA,AjBXY,CAAZ,Ca6E4C,ACtBA;ADuB1C,ACtBA,AEjDF,AXvGJ,AkBwFU,AdFN,ADGF,A8CiBO,AGxBP,EAAA,GlCME,GdFI,AgDJA,CjDOC,A8CeD,AGtBC,CzCqBC,CHuEC,ACtBA,C2CtEH,EAAM,CHwBC,EtCHE,EHuEX,ACtBA,CDsBe,ACtBA,AEjDD,CHuEd,ACtBA,A2CtEE,CAAN,ChDIqB,ADGrB,AiDpBwE,CzCkClD,ARdA,AiDNtB,C5C2FyB,ACtBA,CLlED,GIwFK,ACtBA,GLlEC,CAAC,CDG/B,CKqFyB,CAAW,ALrFyC,CKqFxC,CAAC,ECtBb,CAAgB,AN/DzC,CKqF2C,ACtBD,ALlExC,CKkEyC,AN/DiD,GQc1E,CFiD8B,AEjDV,ERdtC,EAA0G,EQc9D,GAAG,EHuEY,GAAG,AGvEV,CHuEhB,CCtB4B,GDsBI,ACtBD,CAA1B,CEjDvB,EAA2C,CHuEY,ACtBA,CEjDvD,CAAhB,GFiD4E,ODsB1C,GAAoD,CAA/D,CAArB,ACtBqB,CDqBqB,ACrB1C,CDwBA,ACzB0C,CAG1C;AQlEF,APkBA,AEEA,AjBXA,AqBRI,AEGL,AdJC,ADEA,A8CiBM,AGvBR,AC+BE,IjD3BA,GAAG,CiD2BC,CpC3BC,APkBA,AEEA,CjBXC,ASTA,CAAN,CDEQ,COgBC,AfTA,A0DkBA,C3CTC,AMjBA,AiCkBA,EtDVE,CeSC,COlBC,APkBd,APhBc,CcFC,AdEA,COgBC,AEEhB,AqCDgB,CvCDC,AEEA,AqCDA,EIQb,CpC3BJ,APkBoB,CfTC,CAAC,AsDUZ,AIQY,C3CTtB,AEEA,AqCDuB,CjClBC,AbChB,COgBiB,APhBA,COgBC,CMjBC,CNiB3B,A2CSA,E3CT8B,A2CSA,GlDzBtB,CROI,AQPsB,CROC,EAAvB,AsDUN,C9CjBE,CRO+B,AQPA,A8CiBA,CjClBN,ErBQrB,CAAZ,MQPQ,CAAR,EaD2B,CACrB,GiCiBkD,GAAG,MAAM,CAAC,KAAP,CAAa,cAAjC,KjCjBZ,KAAK,CAAC,CAAN,GAAU,KAAK,CAAE,CAAF,CAApC,CADqB,EAErB,sCAAqB,KAAK,CAAC,CAAN,GAAU,KAAK,CAAE,CAAF,CAApC,CAFqB,EAGrB,sCAAqB,KAAK,CAAC,CAAN,GAAU,KAAK,CAAE,CAAF,CAApC,CAHqB,EAIrB,sCAAqB,KAAK,CAAC,CAAN,GAAU,KAAK,CAAE,CAAF,CAApC,CAJqB,CAAvB,CARyE,CAezE;ACPF,ATwFA,ACtBA,AChDA,ACHF,ACKD,ATlBG,A8CiBI,AGvBR,AC+BI,MpC3BA,IAAI,CAAC,ATwFA,ACtBA,AEnDA,ARbA,CcFL,APkBM,EuCCE,CvCDC,CFsET,ACtBA,CDsBY,ACtBA,AEnDD,CHyEX,ACtBA,AChDY,ECHE,EHyEI,ACtBA,EwC/Cd,CtCJe,CsCIC,EvCDE,CAAE,CFsEE,AEtEJ,CFsEK,AEtEf,CAAgB,ACH9B,EAA8B,CFmDG,CAAC,AwC/CF,CAAC,CvCD/B,CAD4B,APf5B,COkBA,GFoEkB,AyCrEmB,CAAC,EzCqEI,ECtBxB,CwC/Ca,CAAa,CzCqEG,ACtBA,KAAK,EwC/CtB,CAAV,IzCqEF,GAA4C,CAA9D,CCtBA;AQjEA,ATwFA,ACtBA,AEnDA,AhBPF,AuBJM,AdLN,ADGE,A8CiBI,AIQJ,M1CZA,GOXW,AdLR,CTSC,AsDWA,CzCqEC,ACtBA,ANhEA,AkDyBA,E1CZE,APhBA,COgBC,APhBA,CTSC,CagFT,ACtBA,CDsBY,ACtBA,ALnED,A6CoBA,CzCqEX,ACtBA,Ad1DY,ASTT,AiD4BH,CAAa,C1CZb,APhBc,A6CoBA,C7CpBC,CIyFG,ACtBA,Ad1DF,CagFhB,ACtBA,AEnDiB,AhBPA,AuBJb,CPWJ,AOX0B,AdLR,COeU,CAG5B,AhBTY,CAAS,C0DmBrB,CjD5BuB,CTSC,C0DoBtB,ClD1BF,A8CiB0B,CtDXC,AsDWA,GtDXf,A0DqBV,C1DrBJ,AsDW4B,CAAtB,E/BfA,AdLc,CAAiB,AiD8B5B,CnCzB6C,KdLtD,EAA6C,CAAC,GAAG,CAAjD,CiD6BI,CnCxBE,AdL8C,CAAC,CcKuB,AmC0BxE,CjD/BJ,EAAyD,AiD6BrD,GAGA,KAAK,eAHL,GAIA,GAJA,GAKA,KAAK,cAAL,GAAsB,KAAK,eAN7B;A7C8DD,ACtBA,AC/CC,AECJ,AjBZE,AqBFI,AEFJ,AdLE,ADGE,A8CiBC,AGxBP,ACsCI,EzCbJ,IyCaI,EzCbE,CAAC,AwCzBA,CzDaC,AuBJA,CReC,CNpBC,AgDJA,CzDaC,ASTA,AgDJA,CxCyBL,AIdM,EJcgB,AjBZd,ASTA,CcKC,CvBIC,EeWZ,AQfwB,CReT,AfXA,ASTA,CcKjB,CvBIA,EyDbK,C1CwBH,AMboB,AoCXA,C1CwBC,A0CxBlB,ACsCkB,CAAC,CrC3BC,AoCXA,C1CwBvB,A0CxBG,EhDIO,AgDJgB,ChDIE,AiDkCD,CjDlCjB,CAAV,AgDJ6B,CpCWC,AoCXA,CpCWC,GqC2BV,CDtClB,ACsCH,EDtCqC,GAAG,CAAC,KpCWlB,CAAwB,AoCX5C,CAAP,IpCWwD,SAA7B,EAAwC,cAAxC,CAArB;ACNJ,ATyFD,ACtBA,AElDG,ACIF,AjBZA,AqBFI,AEDJ,AdNE,A6CoBC,AGxBN,ACsCI,KAVD,EJbE,CjCJE,AiCaA,ChCpBC,CLqBC,AjBZA,AuBHA,CPWC,A0CiBA,CjDlCC,CTSC,AqBFA,CAAC,CLUC,AsCGA,CtCHC,AhBRA,EsBTE,ADOV,CCPW,ANiBA,AhBRA,AqBFA,CLUb,ACIc,AMfA,AdNA,A6CoBZ,ChCpBJ,CNiBkB,AhBRA,AsDWA,CtCHC,ACIA,AMfA,AdNA,ETSnB,CgBQsB,COXC,CNeC,AMfA,CPWtB,ACIuB,EDJE,AKVvB,AEDe,CPWS,AOXA,CFhBiD,CL2B3E,AKRE,ELQ4B,AOXA,CAAC,GAAL,CAAS,CNelB,EAAnB,ERrB0C,CAAC,QcMf,IdNT,CcMqC,AdNA,KAAK,CAAC,CAA3C,EAA8C,KcMK,AdNA,CAAC,CAApD,CcMsD,CAA7C,AdN8C,CcMvD,CAAnB,GdN+E,CAAC,CAA7D,EAAgE,KAAK,CAAC,CAAtE,EAAyE,CAAC,CAAC,CAA3E,EAA8E,CAAC,CAAC,CAAhF,EAAmF,CAAC,CAAC,CAArF,EAAwF,CAAC,CAAC,CAA1F,CAAjB;AaCA,AT0FJ,ACtBA,AChDI,ACHE,ATbN,ACDI,A8CiBE,AIcF,EnD9BJ,IeJI,AoCkCA,EJdE,EhCpBE,APoBA,COpBC,CAAL,ANiBM,CDGC,A2CcA,CAAC,CnD9BC,CAAC,CQgBC,A2CcX,CAAY,C1CjBC,CAAC,AsCGA,CAAC,CvCAf,EAAkB,IuCAJ,CAAZ,E/ChBO,CSaH,CAAqB,ATbO,GSaJ,GAAG,I0CiBjC,E1CjBM,CAAJ,EAAwC;AMhB1C,APoBE,ACHE,ACIN,AjBbA,AqBAI,AEHJ,AdLE,AFIF,ACDI,A8CiBA,AG5CR,AC0DK,OD1DL,C1C4CQ,ARhBA,ACDA,A8CiBA,AG5CR,CxC6CS,AMhBA,AhBDA,CPIC,ASRA,EYQE,AdJA,CQgBC,AECA,AjBbA,AuBHA,CReE,AECD,AMhBA,A+BeA,CAAC,AG5Cf,CzCyCgB,AhBTA,CeYH,AECI,AIbA,AEHA,AhBDA,CQgBT,AECC,AMhBA,AdLS,AFId,ACDc,AiD3BlB,ExC6CoB,AMhBA,A+BeN,CrCCO,ARrBA,ADGA,A8CiBb,EG5CR,CxC6CwB,AMhBA,CvBGC,AQLA,CRKC,CuBHC,CAAvB,EAA0B,CAAC,GNgBG,AIb1B,AEH0B,CNgBC,ATlBd,CaKe,AZR9B,ADG8B,ECHE,ETQtB,CiBaZ,AjBbqC,EiBaE,CAAC,ETlBvB,CSkB0B,AjBb/B,AQLR,CSkBJ,AMhBA,CvBG6C,CiBaC,AMhBA,CNgBC,AMhBA,ENgB/C,AMhBA,CvBGY,CiBauC,AMhBA,CvBGC,GAAxC,EAA6C,GAA7C,CAAZ;AeaG,ACHK,ACIN,AIbI,AEHJ,AdLE,AFIJ,ACRA,A8CwBG,AIcJ,GA7CO,GnCgBJ,CRaA,CNlBE,AFIA,CAAC,EUiBE,CDJC,ATbA,CQgBC,AQfA,CAAC,CAAD,CFGG,AEHV,ChBDW,CAAb,CgBCgB,CPYA,ACId,AIbc,AEHE,CNgBD,CDJC,CKTC,AZRA,CcKG,EdLA,CcKG,CFGD,CLSC,CAAC,AOZT,CNgBU,CAAE,CAAF,AMhBK,CNgB9B,AMhBc,AdLZ,GYQe,CAAe,AEHG,cAAtB,GAAwC,EFGpC,CAAmC,KAAnC,EAA0C,MEH3D,MFGiB,CAAb;ACRN,APqBI,ACLQ,ACMX,AjBdD,AuBFE,AdLE,AFIJ,A+CgBC,KAdD,C/BDE,EReE,ANpBA,AFIA,CeLC,AfKA,CPGC,AuBFA,CPUA,APfC,CFIC,CQgBC,AfbA,CeaE,AQfD,AdLA,CAAN,CTOQ,CeaH,ARhBI,CeLC,APqBV,ARhBJ,CeLe,EPqBI,CAAf,COrBJ,CCME,CvBEmB,CAAC,cAAV,CAAyB,MAAzB,EAAiC,KAAjC,EAAwC,GAAxC,EAA6C,GAA7C,CAAZ;AsBPE,APqBC,ACHE,AKVC,AEFL,AdLE,ADGH,AkD8BJ,MpClCM,GoCkCN,CpClCU,AdIA,CcJC,CAAL,EDQQ,IAAI,CqC0BlB,ErC1BqB,AbJA,GAAG,EaIE,EbJE,WAAJ,CAAiB,GaI/B,EAAmC,KbJqB,CAAC,MAA3C,CAApB;AcHE,ATyFI,ACtBA,AC9CL,AECD,AjBdA,AqBAK,AZPJ,AFID,ACDA,A8CgBA,AI5HJ,CAAA,E7CiMY,ACtBA,A4C3KZ,CJ4HI,I/CfI,CMoFE,ACtBA,AG7CD,AIrCwE,CrBuBvE,AqBEF,CrBFG,AQJA,A8CgBA,CzCqEO,ACtBA,Ed3DJ,AsDYA,ErCEV,GAAe,IjBdI,AOHnB,CUiBoB,AjBdA,COHC,ACDA,CAAC,A8CgBA,CAAC,IrCER,AqCFO,CrCEM,AqCF5B,GtDZU,CAAsB,EiBcjB,CAAoB,AjBdzB,CAAV,CQJO,CAA+B,OSkBvB,CAAf,GTlBO,EAA4C,KAA5C,EAAmD,MAAnD,CAAP;AchBF,ATsGE,ACtBA,AC9CD,ACHK,ACIL,AMhBC,AhBDE,ACDH,A8CgBA,GvCzGG,AuCkFG,CvC0BP,AuC1BA,E/CQI,CAAC,CMoFC,ACtBA,EP9DE,CgBCC,CPYC,ETbE,CAAC,GgBCX,AhBDM,CAAS,CMoFC,ACtBA,EEjDE,ATbZ,CMoFa,ACtBA,AEjDC,CAAF,ATbE,CSaZ,GHuEgB,ACtBA,EEjDI,ATbF,CSatB,EAA2B,ETbA,CAAX,GAAe,EMoFnC,ACtBA,GP9DwC,CAAL,GAAS,CAAT,GAAa,GAA1C,CAAJ;AeJL,ATyFG,ACrBA,AC7CF,ACLM,AhBVJ,AuBFD,AdLC,AFIE,A+CeL,AIaD,IAAM,EnD5BA,CAAC,EEJE,CIwFC,ACrBA,Ad5DA,AOHA,GPGG,A0DyBE,C1CfD,ATbA,CAAC,CPGC,ASPZ,AiDgCc,C1CfD,AhBVA,ASPC,CFIR,CAAS,CSaC,AhBVA,A0DyBE,E7CwDA,ACrBA,ALnEC,AFIb,CPGa,ASPC,CFIA,CMoFC,ACrBA,Cd5DT,GSPZ,CIwF0B,ACrBA,AElDA,AhBVA,AOHA,AmD4BZ,C1Cfc,CAAF,A0Ce9B,C1CfQ,AhBVJ,ASP+B,COSC,CAS5B,ATd2B,CEJ/B,AFIoB,GAAe,EMoFd,ACrBA,CDqBiB,ACrBA,EP/DE,CAAL,GMoFnC,ACrBA,AP/D4C,CAAT,GAAa,GAA1C,CAAJ;AMqFF,ACrBA,AC7CF,AEDA,AjBdE,AqBAI,AZPJ,AFIE,ACDJ,GSkBE,GVjBE,CAAC,CMoFC,ACrBA,CNhEC,CRIC,AOHA,CUiBR,ARrBS,CYOC,EJcA,AIdJ,AZPJ,AFIU,CAAC,GAAL,CAAS,CMoFC,ACrBA,EP/DV,CMoFa,ACrBA,CP/DC,ACDtB,CAAuB,IRII,COHC,CMoFC,CAAC,AbjFA,GOHG,CO+DC,Ad5DA,AOHZ,ACDtB,CMgEmC,Ad5DA,CQJc,CDCZ,CPGP,CAAS,CAAC,CQJxC,CRI0C,AOHA,CAAL,ACD2B,ERInB,CaiF3C,ANpF4C,CPGP,AOHF,CMoFW,CLrFhD,CDCkD,CO+DhD,Ad5DiD,AQJ2B,EMgEzB,AP/D7C,CPG+B,AOHnC,GPGqD,GaiFG,CbjF9B,EaiFiC,AbjFA,CaiFf,CCrBiB,Cd5DnC,CAA5B,Cc4DkE,CAAf;ADuBnD,ACrBA,AElDI,ACGJ,AjBdA,AqBAI,AEtF2D,Ad+EhE,AFIE,ACDD,A8CgBJ,K/CxBwC,CAWpC,G+CaJ,CzCsEU,ACrBA,Ad7DA,AQJA,CSkBE,CIdA,CLWC,AhBXA,CqBAL,EJcS,AjBdD,CgBWC,CHuEC,ACrBA,AElDA,CRfC,EKsFE,ACrBA,AElDA,CAAC,AhBXC,AQJD,GQeG,CHuEC,ACrBA,AElDlB,ARfkB,CKsFC,ACrBA,CElDC,CAAC,AhBXC,EiBclB,CDHoB,CCG5B,EDHI,EAA6B,CAAC,CHuEC,ACrBA,CElD/B,ARfc,EKsFoB,ACrBA,AElDA,ARftC,CKsFsB,ACrBA,CwCjD1B,CAA6C,EzCsEE,ACrBA,CDqB1B,ACrBjB,Ad7DkB,GakF6B,AblFE,CakFjD,GblFqD,CAAC,IAAL,CAAU,IsDYlB,GtDZyB,AsDYoB,iBAA1F,EtDZqD,AsDYsD,CtDZvG;AamFA,ACrBA,AElDM,ACIN,AjBfA,AqBAI,AZNN,ADGE,A8CeF,I9CfE,MKqFM,ACrBA,AG9CA,AjBfA,AsDYA,EjCZE,CrBAC,AQHA,CQcC,AKXN,AbHM,ERGE,CiBeC,GAAG,ATlBhB,ERGkB,CQHC,CKqFC,ACrBA,AElDA,ACIA,CDJE,CAAF,CHuEG,ACrBA,AElDb,CRdV,CRGyB,CsDY3B,EtCDgC,AhBX9B,CgBWM,EAA2B,IHuEE,ACrBA,CG9CnB,EJmEsB,ACrBA,AG9CtC,CAHQ,CAKR,UJiEuB,ACrBvB,GDqBqD,CAArD;AAEA,ACrBA,ACjDM,ACFA,AhBXN,AqBAI,AdDJ,ACFA,A8CeA,EvCCM,EPhBN,IKsFI,ACrBA,CwClDC,CtDZC,EqBAE,CRmFC,ACrBA,Ad9DA,AQHA,CaGL,AbHM,COgBS,CFsEP,ACrBA,ACjDQ,ACFR,AhBXA,GgBWG,ERdf,CQckB,AhBXA,EQHE,KRGK,AsDYzB,CzCuE0B,ACrBA,ACjDP,AfbD,AQHlB,EOgBkD,ACFtB,CHwEC,ACrBA,AEnDC,AhBXD,CgBWD,CAAtB,CAFgC,AhBTtC,CgBYM,IHuE+B,CAAC,ICrBI,CAAC,GDqB/B,GAAqC,CAAjD,CCrBY,GAA0C,CAAtD;ADsBA,ACrBA,ACjDA,AEGA,AqCL2B,QzCwEvB,ACrBA,CG9CC,CFHC,GFsEG,ACrBA,AG9CA,AqCLyB,EvCEvB,CFsEC,ACrBA,CwCnD0B,CvCExB,MFsEM,CAAC,AInEA,AqCLyB,CAAC,ErCKvB,CH8CC,AG9CzB,CH8C0B,CG9CC,CFHC,CAAC,EFsE7B,KCrBA,CCjDc,CuCFoB,CvCElC,AEGuC,CqCLZ,ErCKe,KAAK,OAA/C,EAAwD,YAAY,EAApE,EAAwE;AJoExE,ACrBA,ACjDA,ACDM,ACIJ,AjBhBF,AqBDI,AbFJ,QKsFI,ACrBA,CNjEC,COgBC,AEGA,AjBhBA,EqBDE,CrBCC,AQHA,CKsFC,ACrBA,ANjEA,CSmBC,CFHC,ACDA,AhBZA,CamFC,ACrBA,AO/DA,AbFA,CKsFC,ACrBA,ANjET,COgBU,CCDC,ACIV,ATnBU,CSmBE,ATnBD,EKsFE,ACrBA,AElDA,CRfC,CRGC,CAAC,EgBYE,KDCK,AEGvB,CFHwB,CFsEhB,ACrBA,ANjEiB,CAAC,CQeb,ACIgB,CDJD,ACIhC,AjBhBU,CamFuB,ACrBA,Ad9DA,CamFtB,ACrBA,AG9CyB,AIjBlC,ErBCQ,AqBD0B,AbFtC,COgBe,CFsEyB,ACrBA,Ad9DA,AQHA,COgBxC,APhByC,ERG7B,CAAZ,AQH4C,CAA5C,EAA+C,CKsFC,ALtFA,CKsFC,CLtFjD,EAAoD,CMiEC,AElDlC,CFkDmC,AElDA,GAAnC,EAAwC,CHuE3D,EGvEmB,CAAb,EFkDN;ADuBA,ACrBA,AClDA,AEGI,AIjBE,AbFJ,A8CaF,M9CbE,EKuFE,ACrBA,CwCrDC,CvCGC,AMdA,CRqFC,ACrBA,COhEC,ERqFE,ACrBA,AG/CA,CIjBC,AbFA,CAAC,CSmBC,GJoEG,ACrBA,AClDA,AEGA,GFHG,CFuEC,ACrBA,CG/CC,AqCNrB,E9CbE,CAAsB,CaEC,AbFvB,CSmBc,AIjBU,CJiBE,AIjBjB,CRqFiB,CAAC,ALvFA,CaEC,GPgEG,AClDA,CDkDC,AClDA,KEGlB,CAAZ,EIjBsC,AbFP,CaEQ,CAArC,CRqFN,EEvEmB,EAAnB,CDkDA,MNlE6B,CAAqB,WAAW,CAAC,CAAD,CAAX,GAAiB,CAAtC,CAA3B,CADkD,CACmB;AKwFvE,ACrBA,ACjDA,ACHM,ACKF,AjBhBJ,AqBDM,AbFL,A8CYsB,QzC2EnB,ACrBA,ECjDE,AfdA,AqBDA,CRqFC,ACrBA,COhEC,CiCUsB,CvCKpB,ACHA,ACKA,CJoEC,ACrBA,AG/CA,AjBhBA,AqBDA,CRqFX,ACrBA,CCjDa,AuCLqB,CzC2EpB,ACrBA,AEpDA,ACKA,AjBhBA,GaoFG,ACrBA,AEpDA,AhBXA,EiBgBE,CJoEC,ACrBA,Ad/DA,CaoFN,ACrBA,AwCtD4B,CtCEpC,AsCFqC,CtDT3C,CgBWwB,ACKV,AjB3DsF,CiB2D1E,AjBhBD,AqBDA,CAAC,CNeC,AMfhB,CNeiB,EMfE,KiCUA,CvCKjB,CAAyB,AEExB,AqCPS,CvCKV,CAAb,EEE2C,CIjBD,CAAC,CJiBvC,AIjBE;ANgBN,ACHQ,ACKJ,AIjBE,UNeA,AMfA,EAAE,ENeE,AEEA,CAAC,AIjBA,ENeE,CEEC,KAAK,MIjBM,CJiBX,AIjBY,CNeC,AEEC,AIjBjB,CNeiB,EMfE,MNejB,CAAyB,CAAzB,CAAb,AEEc,GIjB4B,CJiBG,AIjBF,CAArC,EJiBF;AJqEJ,ACrBA,ACjDA,ACHQ,ACKJ,AjBjBJ,AqBAM,AbFN,A8CWA,SzC4EK,ACrBA,AwCvDA,CvCMC,AffA,AqBAA,CbFC,CQcC,AKZA,CRqFC,ACrBA,CDqBC,ACrBA,ACjDA,AEEA,CAAC,AjBjBA,AqBAA,ERqFE,ACrBA,ACjDA,CFsEb,ACrBA,AG/Cc,AjBjBA,CgBYC,CHyEC,ACrBA,AEpDA,ARdhB,A8CWA,CzC4EiB,ACrBA,ACjDA,AffA,EiBiBE,CJoEC,ACrBA,ACjDA,ACHZ,AhBZY,CgBYC,EHyErB,ACrBA,AdhEA,CeeA,Af3DoG,CaiI3E,ACrBA,AEpDA,ACKX,AjBjBW,AqBAA,CRqFC,ACrBA,AG/CC,AIjBD,CAAf,CRqFX,ACrBA,EDqB8B,ACrBA,AOhEA,OLYT,CAAiB,ACKxB,CDLO,EAAoB,CCKG,AIjBF,CAAC,CLYtB,AKZf,CJiBF,CDL0C,IAAzB,CAAb;AH0EN,ACrBA,AEpDM,ACKJ,AIjBC,AdDL,ACDD,A8CUmB,SjCbd,ER0FG,ACrBA,APjEA,CSaC,ATbA,C+CSiB,CrCSf,CAAC,AIjBA,AdDA,E+CSkB,CrCSf,EJoEZ,ACrBA,CDqBgB,ACrBA,APjEL,CMsFX,ACrBA,AEpDgB,CAAE,ACKD,CDLD,ATbX,CSaC,AsCJ6B,CzC6Eb,ACrBA,AwCxDc,C/CTnB,CSaO,ATbN,CSaZ,CCKM,CJoEe,ACrBA,AG/CD,AVlBL,IMsFW,ACrBA,AwCxDT,CzC6EU,ACrBA,CPjEV,A+CSP,EzC6EoB,ACrBA,GDqBG,ACrBA,APjElC,CUkBO,EJoEqB,ACrBA,APjEF,CAAC,CUkBW,CJoEE,ACrBA,CDqBC,ACrBA,APjEX,CUkBjC,EJoE+C,ACrBA,CDqBjB,ACrBA,EPjEK,EMsFiB,ACrBA,EPjExD,MMsFgE,CAAC,ICrBI,CAAC,GDqBrC,IAA6C,CCrB7C,EDqBgD,ECrBE,CDqBC,ECrBE,CDqBrD,CAAJ,CAAL,ACrBiE,GAAxD,CAAJ,CDqBiE,ACrB5F,CDqBA;AACD,ACrBA,AClDD,ACFQ,AhBbR,AqBCM,AdDP,UQeO,AffA,AqBCA,ELYE,AKZA,GNcG,AffA,AqBCA,GNcG,ACFA,AhBbA,GAAG,EeeE,CffC,GAApB,CA7CoG,AqB8C5E,CrBDC,AqBCA,CAAd,GNcG,AMde,CNcC,KAAhB,EAAuB,IMdI,CAAC,CNc5B,AMdR,ENcuC,IAA/B,EAAqC,IAArC,CAAd;ACDO,ACKH,AIjBE,AbFR,A8CSE,S9CTK,A8CSA,CjCPC,EAAE,EJiBE,CIjBC,IJiBI,ATnBjB,CAAkB,ESmBE,CqCVlB,G9CTF,EaE0B,AbFQ,CaEP,CAAd,GAAkB,AbF/B,ESmB0B,ATnBuB,MAAjD,EAA+D,EaEpB,CAAC,CJiBxB,AIjBZ,CJiB+B,CAAC,GAAG,CAAvB,EAA0B,CAAC,GAAG,CAA9B,EAAiC,CAAC,GAAG,CAArC,EAAwC,CAAC,GAAG,CAA5C,CAAd;AJqEJ,ACrBA,ACnDA,ACDK,AhBbL,AqBCM,AdDA,ACDN,A8CQqB,E/CPf,MMsFF,ACrBA,ECnDE,AMbA,AbFA,CRCC,CasFP,ACrBA,AOhEQ,CdDS,A+COW,EvCOjB,AfdA,AqBCA,CrBDC,AOAK,C+COe,CvCOlB,CfdP,CAAS,CQDC,EOeE,CPfC,CRCb,AsDOiC,CAAC,CtDPlB,CAAhB,AqBCiB,AbFA,CaEC,CAAd,ErBDiB,Cec5B,AMb6B,AiCMD,EAAP,CtDPW,CAAC,EQDb,CRCQ,AQDQ,CRCC,IqBCI,CrBDb,AqBCc,AbFA,CaEpC,AbFqC,CRCC,CAAhB,CAArB,GAA0C,AQD7B,EAA+B,ERCE,CAAC,GAAL,AQDQ,CRCC,AQDA,KRCT,EAAgB,CAAhB,CAA1C,CQDa,ERCkD,AQDA,GRCG,GAAG,AQDA,CAAC,IRCP,GAAc,GQDd,ERCtE,CQD0F,WAAW,CAAC,iBAAlF,CAApB;AOiBA,ACFG,ACIC,AjBjBL,AqBCO,AdDN,ACDA,IOgBA,GC9B8B,CA6B5B,ACGE,CFFC,ARfA,CQeC,AMdA,CbFC,CaEC,GJgBG,AIhBA,AdDX,CUiBY,CFFZ,CAAc,ARfA,CUiBV,AVjBW,CUiBC,CFFC,GRfG,CQeA,AEEhB,AVjBW,ACDM,CAAC,EaEE,CAAC,AdDA,CcCd,CdDI,EcCc,CdDC,KAAK,CAAL,CCDvB,CAA+B,EDCE,CcCC,CAAC,AdD3B,CcCT,EdDuC,ICDtC,CDC2C,CAAL,ACDM,IDCI,CAAxC,ACDR,EAAmD,CDCC,KAAK,ACDzD,CDCO,ACDd,MDCuE,CAAvE;AMsFA,ACrBA,ACjDE,ACDA,ACGC,AIhBE,AdDN,ACDA,A8COC,QzC+EI,ACrBA,CwC1DC,CvCSC,IAAI,GAAG,GFsEG,ACrBA,AwC1DhB,CvCSiB,CAAC,CFsEC,ACrBA,ICjDN,CAAY,GFsEE,AEtEC,CFsEA,AEtEC,CAAJ,GDiDO,ACjDC,CDiDA,ECjDG,CAAC,CAAb,GAAkB,IFsE1C,AEtEa,EFsEiC,EEtEI,CDiDlD,EAAmD,WCjDa,CAAC,UAA/D;AFuEA,ACrBA,AEjDA,ACED,AjBrIoD,AsDyHnC,MzCgFhB,ACrBA,IDqBI,ACrBA,GDqBG,ACrBA,AwC3DgB,CzCgFvB,ACrBA,GwC3D2B,QAAQ,CAAC,SAAb,EAAP;AzCiFjB,ACrBA,AClDC,AflIJ,AqBqHM,AdDE,AC1HJ,ED0HI,GMmFN,ACrBA,KChDM,CFuEC,ACrBA,APhEQ,GQcL,AMbA,AdDK,CMqFJ,ACrBA,EClDE,CAAX,EAAc,AMbA,GAAG,CNaC,EMbE,CRoFC,ACrBA,AClDA,CAAP,EFuEU,ACrBA,CO/DC,CAAR,GAAY,CAAZ,ERoFe,CAAC,AQpFA,IP+DI,CAAC,AO/DA,ERoF7B,KAAoC,ACrBpC,AO/DwB,CRoF5B,AQpFyC,ERoFE,ECrBE,CAA7C,CO/D4B,CP+DoB,EO/DE,CAArD;ARqFF,ACrBA,ACjDA,AEEF,AIhBI,AdDJ,A+CIA,IrCaA,EJoEE,ACrBA,GPhEG,A+CIA,CzCiFC,ACrBA,APhEN,CUiBO,CFFC,AEEA,CJoEC,ACrBA,APhEA,CcCC,EJgBV,CFFa,CMdC,AdDA,EQe8B,CFsE3B,AQpFA,CRoFC,AEtEhB,EMdkB,AdDX,EOgEa,AwC5DtB,CxC4DuB,APhEA,EMqFrB,AQpFuB,CAAR,CdDjB,EcC6B,CP+D3B,IO/DgC,OAAL,CAAa,MAAzB,GAAkC,CAAC,CAAhD;ARqFH,ACrBA,AEnDC,ACKF,AVlBA,A+CGwB,KzCgFjB,ACrBA,CEjDL,GTbG,CUkBC,AVlBN,CMqFO,ACrBA,AEnDA,ETbG,A+CGqB,EzCkFnB,ACrBA,AEnDA,EsCVuB,C/CHpB,GSaG,GAAG,ATbX,C+CGiC,CAAC,CzCkFpB,ACrBA,EEnDE,ATbA,CMqFC,ACrBA,APhElB,GAAsB,GSaV,CTbrB,CMqFmC,CAAC,AGxEA,CAAzB,AsCVoB,EAAP,CxC6DgB,AEnDC,CFmDA,EDqB9B,EGxEmC,GHwEG,ACrBtC,CDqBJ,EAA6C,ECrBE,CAA/C,EAAkD,KEnD9C,GAAsD,KAAK,kBAApE;AHyEA,ACrBA,AClDA,ACDD,ACKC,AIjBE,AdDJ,KSzCsC,CH8HpC,ACrBA,AEjDF,ACGE,GVlBG,CMqFC,ACrBA,APhEN,CQcO,EFuEE,ACrBA,AG/CH,AIhBG,AdDC,IcCG,CAAC,AdDC,GMqFE,AQpFA,CRoFC,AEvEhB,CAAiB,CRdT,EOgEY,AClDpB,CDkDqB,AO/DnB,CNaoB,CFuEtB,AQpFuB,AdDC,CcCA,CdDjB,EQcP,CDkDA,APhE8B,CQcA,AMbD,CNaA,ERd/B,CcCI,CNaiC,CMbA,CAAC,IAAI,GAAtC,EAA2C;ARqF9C,ACrBA,AClDG,AEIF,AIjBI,AdDN,A+CEA,KzCiFO,ACrBA,CG5CL,GVlBG,A+CEA,C/CFL,CMqFO,ACrBA,EPhEG,CQcA,AEIA,CJmEE,ACrBA,CG9CA,AIjBA,CNaC,CMbC,AdDC,EQcC,CMbC,GdDP,EcCY,CRoFE,ACrBA,EPhEE,CMqFC,ACrBA,AClDD,CAAE,ARdnB,CQciB,CAAV,AMbC,CNae,AMbD,AdDC,A+CEhC,CjCDiB,EAAmB,CRoFD,AQpFlB,AdDjB,CMqFoC,CEvEhC,CADiC,CAGjC,AMfsC,CP+DF,CAAC,CO/DnC,CRoFK,KAAsC,ACrBtC,CDqBJ,EAA6C,ECrBE,CAA/C,EAAkD;ADsBvD,ACrBA,AGjDI,AIdA,AdDP,A+CCiC,KrCchC,CJsEE,ACrBA,IDqBI,ACrBA,GDqBG,ACrBA,AwC/D8B,GjCA3B,CiCA+B,CjCA7B,GRoFG,AQpFA,CRoFC,GyCpFiC,CxC+D7B,AO/DA,AiCA8B,CxC+D7B,EDqBrB,IQpFe,CP+Df,AO/D6B,CAAd,EAAmB,CAAnB,CAAX,QiCAiC,EAAP;AzCqF/B,ACrBA,ACjDG,ACFJ,ACKD,KJiEQ,ACrBA,GEjDH,GHwEG,ACrBA,ECjDE,CCFC,GAAG,KDET,ACFc,CDEC,KAAf,CAAqB,ACFzB,EAA2B,CDEvB;AFuEF,ACrBA,AEnDA,AKZI,AdDA,A+CAN,E/CAM,IMqFJ,ACrBA,GwChEG,CzCqFC,ACrBA,GDqBG,ACrBA,CO/DC,EAAE,CdDS,EcCN,CAAL,AdDW,A+CArB,CzCqFiB,CAAC,EQpFE,CAAV,CP+DY,CAAC,EDqBrB,AQpFuB,EAAE,GP+DzB,AO/D4B,CAAL,GAAS,KAAxB,IAAiC,EAAE,GAAG,CAAL,IAAU,CAA3C,IAAgD,EAAE,GAAG,CAAL,GAAS,MAA7D,EAAqE;ARqF1E,ACrBA,ACjDG,ACFF,ACKI,AjBzIgB,AqBwHd,AdDR,A+CDkB,GrCmBV,MjBzIc,AOuHjB,CPvHiB,EesId,CftIc,AOuHtB,A+CDyB,C/CCd,CQeA,ARfX,CPvH4B,CsDsHC,CrCmBvB,AIjBQ,CNcC,AMdA,AdDE,EUkBM,CIjBL,CrBxHiB,CesI/B,ARfkB,CAAtB,A+CDqC,CvCgBf,AftIM,AsDsHU,CjCEf,ErBxHkB,GAAnB,EgBoIT,AKZK,CAAc,AiCFP,CjCEP,CiCFA,CjCEmB,CAAnB,CAAV,CLYN,EAAoB,UAAU,CAAV,EAA2B,CAA3B,EAA0C;ADG1D,ACFF,ACKJ,AjBzIsB,AqBwHd,AdDR,SPvHsB,AOuHjB,CQeC,AftIgB,GOuHtB,CAAW,CQeA,ACFA,ATbX,CQea,ACFD,CAAC,CKZC,CNcH,AftIW,AqBwHP,AdDE,CQeX,EftIoC,AqBwHxB,EdDI,CSaX,ATbX,CPvH8C,CAAC,CgBoIvB,CAAC,CAAC,AhBpIgB,CAAS,CqBwHvB,CrBxHc,AqBwHZ,ErBxHyB,AqBwH3B,CrBxHc,AqBwHxB,CrBxHI,AqBwHc,CLYhC,CKZkC,GAAG,CAAvB,CAAV;ARqFR,ACrBA,ACjDK,ACFF,ACKH,AjBzIsB,AqByHd,AdFR,A+CFA,OtCaE,EDEE,AfpIkB,AOuHjB,A+CFA,CzCuFC,ACrBA,AdvLgB,CiById,CIhBA,CAAC,AdFT,CcEW,AdFA,CQeA,AMbF,AdFT,CUkBa,AIhBL,CRmFK,ACrBA,ECjDE,AMbE,AdFA,CMqFD,ACrBA,AO9DE,CAAE,CNaF,AftII,AqByHJ,CAAD,CRmFG,ACrBA,APhEE,CPvHuB,AOuH7C,CQesB,AMbI,AiCJ1B,EjCI4B,GNajB,AMboB,CAAvB,CNaqB,AEGrB,EAAR,WJmEgB,ACrBA,CDqBoB,ACrBA,WdvLyB,Ga4M7C,ACrBA,AdvL6B,CAAvB,Ca4M8B,ACrBA,EDqBpC,ACrBA,CDqBhB,ACrBA;AChDM,ACDJ,ACKF,AjB1IsB,AqByHd,AdFR,A+CHwB,QrCsBpB,CjB1IkB,AOuHjB,CScC,AhBrIgB,CgBqIf,CCKC,AIjBA,CAAC,AdFT,A+CH+B,CvCkBrB,ACDA,AKZC,AdFA,CScT,ACKS,AIjBF,AdFT,CQeY,AEIZ,AIjBQ,CiCL2B,EjCKlB,AdFA,CcEC,CNaD,AMbG,CNaD,AftIG,AqByHJ,CAAD,CdFK,CQeL,AftI4B,AOuH7C,A+CH2C,CvCkBjC,AMbgB,AiCLkB,EjCKhB,ENaA,CMbG,CAAvB,ENaF,EAA4B,IuClBH,EAAP,gBtDpHqC,GAAhB,CAAvB;Aa4MtB,ACrBA,AChDQ,AEIR,AjB1IsB,AqByHd,AdDR,SMmFK,ACrBA,AdtLiB,CiB0IhB,AjB1IgB,EesId,AMbA,CRkFC,ACrBA,AO7DA,CRkFC,ACrBA,AO7DC,CAAF,CAAD,CRkFK,ACrBA,AChDA,CFqER,ACrBA,AChDU,CMbE,CRkFD,ACrBA,AO7DE,CNaL,AftIS,AqByHF,CNaZ,AMbU,CAAD,CJiBG,AjB1IwB,CesIrB,CMbG,CJiBH,CIjBK,ERkFF,ACrBA,AChDE,CAAE,AMbC,CAAvB,CRkFqB,ACrBA,CDqB7B,ACrBA,AChD4B,CAApB,CFqEwB,ACrBA,CDqBC,ACrBA,GDqBG,ACrBA,AG5CA,CAAC,KAAK,OAAN,CJiEpC,ACrBA,AG5CA,CALuB,CAOvB,CJ+DqD,ACrBA,AdtLO,EAAhB,CAAtB;Aa4MpB,ACrBA,AChDK,ACFL,AhBpIoB,AqByHd,AiCNR,StDnHsB,AsDmHjB,CzCwFC,ACrBA,AdtLgB,EqByHd,CLWC,AKXA,CAAE,CAAF,CAAD,CRkFK,ACrBA,CDqBC,ACrBA,CElDC,AKXE,CrBzHK,AqByHJ,CAAE,CLWF,AKXA,CrBzHyB,AqByH1B,GAAS,CLWH,CKXK,AiCN5B,EzCwFM,ACrBA,CDqBqB,ACrBA,AO7DI,CRkFzB,ACrBA,AO7DE,CRkFN,ACrBA,CElDO,CHuEsB,ACrBA,GElDG,CAAC,GAAG,OAAO,CAAC,MAA5C,AhBpIyD,CAAhB,CgBoIW,AhBpIhC;Aa4MlB,ACrBA,AChDC,ACFD,ACOJ,AjB3IsB,AqByHf,AiCPmB,SvCgBf,AESN,AjB3IiB,CAAA,GiB2Ib,AqCzBwB,CzCyFvB,ACrBA,AElDA,CDEC,EuCpB0B,ItDlHf,CiB2IJ,EjB3I0B,CiB2IvB,AqCzBwB,CtCkBvB,ACOtB,AqCzB8C,ErCyBtB,CDPC,OAAO,CAAE,ACOD,CDPD,CAA5B,CADkD,ACQlB,CDNhC,CsCnB6B,EAAP,CrCyBe,OAAzC,EAAkD,EAAE,CjB3IQ,EAAhB,CAAtB,KiB2ItB,EAA+D;AJiEzD,ACrBA,AChDA,AEKJ,AjB3IoB,AqByHjB,SrBzHiB,Ca2MhB,ACrBA,AChDA,AftIgB,KesIX,CAAE,EFqEC,ACrBA,CChDH,CFqEK,ACrBA,AChDV,EftIgB,CesID,CAAf,CftIuC,Ea2MtB,ACrBA,CDqBC,ACrBA,8BdtLqC,GAAhB,CAAvB;Aa0MZ,ACrBA,AC9CL,ACFD,ACOF,AjB3IoB,AqByHnB,AiCRH,QtCmBI,CHqEA,ACrBA,AdpLkB,AsDiHjB,CrC0BC,AjB3IgB,KiB2IX,GDPG,CAAE,ACOV,AqC1BN,CrC0BgB,CjB3IM,GAAsB,CiB2IvB,MDPO,ACOZ,CDPa,ACOA,IAAb,CDPF,ACOR,CDPF,CCOiC,EDPE,CAAnC,ECOsC,MAAL,CAAa,MjB3IU,EAAhB,CiB2IP,AjB3If,CiB2IhB,CAAJ,EAA8D;AJiE7D,ACrBA,AChDA,ACFC,ACOA,AIlBH,AiCTgB,OvCOf,CCaE,ACOA,KqC3BoB,CtCoBd,GsCpBkB,KrC2BV,CAAE,EqC3BgB,CAAC,CrC2BnB,CAAd,GAAyB,GqC3BL,ErC2BU,AqC3BjB,MrC2BY,CAAa,IAAb,EAAoB,MAApB,GAA6B,CAA7B,GAAiC,KAAK,kBAAL,CAAwB,KAAK,MAAL,CAAa,IAAb,CAAxB,CAAjC,GAAgF,GAAzG;AFJH,ACFG,ACOA,KF1BJ,EAXkD,CAkClD,ACJI,ACOA,CDPC,aCOa,CAAE,SAAF,CAAd,GAA8B,KAAK,MAAL,CAAa,SAAb,EAAyB,MAAzB,GAAkC,CAAlC,GAAsC,KAAK,kBAAL,CAAwB,KAAK,MAAL,CAAa,SAAb,CAAxB,CAAtC,GAA0F,GAAxH;AJiEF,ACrBA,AElDC,ACOA,AIlBH,AdDD,A+CTC,OrCyBE,GIfI,ERkFE,ACrBA,CG3CC,IJgEI,ACrBA,GDqBG,ACrBA,KDqBK,ACrBA,WDqBL,ACrBA,CDqBkB,ACrBA,UDqBlB,ACrBA,CDqBd,ACrBA;ADsBA,ACrBA,AC/CF,ACHC,ACOG,AIlBF,AiCXO,MjCWP,GNcG,GFoEG,ACrBA,AwCxEO,CzC6FN,ACrBA,GDqBG,ACrBA,AwCxEO,EvCyBnB,CAAe,CMfT,CRmFW,ACrBA,AwCxEF,CzC6FG,ACrBA,AwCxEO,CzC6Fb,ACrBA,IDqBW,ACrBA,YC/CvB,CAAoC,GFoElC,ACrBA,EC/CF,SuCzByD,oBAAoB,EAA9D,CAAN;AzC8FP,ACrBA,AC9CH,AEGK,AIlBF,AdzIA,A+CiHJ,GvC7GI,CAsJJ,EMjBI,EJkBE,IJgEI,ACrBA,CDqBC,ACrBA,CO7DC,ERkFE,ACrBA,AO7DA,KRkFK,ACrBA,CDqBC,ACrBA,AG3CA,CJgEN,ACrBA,AG3CQ,IJgEG,ACrBA,AG3CL,CAAd,GAAyB,GAAzB,SJgEF,ACrBA;ADsBA,ACrBA,AElDF,ACOI,AIrBE,AiCRT,KjCQG,GLcI,ACOA,IJgEI,ACrBA,CDqBC,ACrBA,CElDC,EHuEE,ACrBA,CElDC,ACOA,IJgEI,ACrBA,CDqBC,ACrBA,CDqBN,ACrBA,IDqBW,ACrBA,AElDA,CAAC,MAAxB,SHuEE,ACrBA;ADsBA,ACrBA,AG3CC,AIlBJ,YRkFS,ACrBA,CDqBC,ACrBA,GDqBG,ACrBA,KDqBK,ACrBA,CDqBC,ACrBA,CDqBN,ACrBA,IDqBW,ACrBA,gBDqBrB,ACrBA;AC7CI,ACLN,AsCrBJ,EvC0BU,OCLD,AsCrBT,IvC0BqB,ACLR,CDKS,IAAD,EAAY,GAAZ,ACLE,EDKuB,CCLpB,CDKL,EAAgD,GCLrC,GAAG,CAA/B,EAAkC,IsCrBtC,CAA2C,KtCqBK,IAAI,CAAhD,EAAmD,MsCrBvD,EAA2F,EtCqB1B,EAA7D,EAAiE,WsCrBsB,GAAuC,iBAAlI,EAAmJ;AzC6F7I,ACrBA,AC7CF,ACLE,ACQA,AIlBI,AiCXR,EjCWQ,IJkBJ,IFHI,ACLA,ACQA,AqC7BA,CvC0BC,CFkEC,ACrBA,CG1CC,CFHC,AEGR,EIlBkB,CAAC,CNerB,ECLgB,CAAE,EHuEC,ACrBA,GDqBG,ACrBA,AO5DF,CiCXtB,CjCW8C,GRiFjB,ACrBA,AElDX,CAAV,CKVc,EAAqC,ELUtB,CAAjC,CHuEoB,ACrBA,CDqBc,ACrBA,AElDE,CHuEhB,ACrBA,EDqBiB,ACrBA,CDqBjB,ACrBA,EDqBoB,ACrBA,CDqBpB,ACrBA,EDqBuB,ACrBA,CDqBvB,ACrBA,CDqBpB,ACrBA;AC5CF,ACLI,ACQF,AIlBF,AiCXA,SAAK,CvC0BC,AEGA,EFHE,ACLA,ECQE,CFHC,CAAC,CAAC,AEGA,CFHF,AuC1BX,GvC0BiB,CCLC,EDKP,GAAY,ACLA,CDKC,CAAC,CAAzB,CEG2B,CAAE,CDRA,ACQF,CAAzB,EDR8B,CAA5B,EAA+B;AHwEjC,ACrBA,AC7CF,ACLM,AKVN,AZAF,A6CZkB,QjCYZ,ENeE,ACLA,CHuEC,ACrBA,CC7CC,CuC3Be,EvC2BZ,CAAC,CAAC,AMfA,AiCZc,CvC2Bb,AMfA,CNeF,CCLI,CAAE,CDKA,AuC3Bc,CzC6F9B,ACrBA,AC7CiB,AuC3Bc,CzC6Fb,ACrBA,AC7CA,AMfhB,CNeQ,EMfW,CNeC,CFkEtB,ACrBA,AC7CS,EFkEgB,ACrBA,AElDX,CAAV,AKVN,CNe6B,CMfC,CLUG,AsCtBV,CvC2BZ,AuC3BmC,IvC2BV,CAAC,CFkEnC,ACrBA,AC7CoC,CAAF,CFkEI,ACrBA,CDqBtC,ACrBA,AElDyC,CDKD,ACLG,CHuEF,ACrBA,AC7CA,CFkEzC,ACrBA,AC7C0C,CAAR,CFkEU,ACrBA,CDqB5C,ACrBA,CC7C8C,ACLG,CHuEF,ACrBA,AC7CtC,CFkET,ACrBA,AC7CF,AuC3BuB,CtCsB+B,AsCtBtC,CtCsB2B,CAArC;ADMN,ACLK,ACQH,AIlBA,AZAJ,MYAI,INeI,CEGC,GFHG,CEGC,AIlBA,CAAC,CNeC,GAAG,AEGA,EIlBd,CNeiB,AEGA,CFHC,AEGlB,CFHmB,AMfA,CNeR,AEGS,GFHG,CAAzB,AMfE,CJkByB,IAAI,SAA7B,EAAwC,EAAE,KAA1C,EAAiD;AJ+DjD,ACrBA,AC3CF,AEEI,AIlBH,AZAH,A6CbE,KjCSyD,CAMzD,ENcI,CuC7BC,CzC6FC,ACrBA,CC3CC,CEEC,CJ8DC,ACrBA,CC3CC,CAAV,GFgEc,ACrBA,CDqBZ,ACrBA,CwCxEF,CzC6FiB,ACrBA,KDqBK,ACrBA,AGzCA,CAAE,KAAF,CAAd,GAA0B,IAA9B,CJ8Da,ACrBA,CDqBqB,ACrBA,AGzCE,GJ8DvB,ACrBA,EDqB0B,ACrBA,WDqB1B,ACrBA,EDqBuC,ACrBA,CDqBvC,ACrBA,EDqB0C,ACrBA,CDqB1C,ACrBA,EDqB6C,ACrBA,CDqB7C,ACrBA,EDqBgD,ACrBA,CDqBhD,ACrBA;ADuBf,ACrBA,AC5CF,ACPI,ACSE,AqChCY,QvC8Bd,CAAC,CCPC,ACSA,EFFE,CuC9BiB,CvC8BzB,AEEU,EDTN,CCSS,AqChCgB,KAAK,CAAC,QrCgCR,CAAE,KAAF,CAArB,QqChCmB,CAAkC,kBAAlC,CAAP;AtCwBf,ACSG,UAAA,IAAI,GAAG,KAAP;AJ+DJ,ACrBA,AC3CF,ACPC,ACSI,AIlBL,AZFF,A6CbE,E7CaF,IIkFI,ACrBA,AL7DA,CMkBC,ENlBD,A6CbG,CjCeC,CAAC,GAAG,ERgFE,ACrBA,IDqBI,ACrBA,GO3DG,CRgFjB,ACrBA,AO3DkB,EiCfpB,IjCeA;ARiFE,ACrBA,AC3CA,AEEC,ARpBH,A6CdwB,MvCgCtB,EAAE,CAAC,ANlBA,CIkFC,ACrBA,GC3CJ,AuChC6B,CvCgCrB,ENlBV,C6CdmC,CvCgCjC,CNlBa,CIkFC,ACrBA,AC3CA,CAAd,ANlBF,C6CdwC,CAAC,CzCgGrB,ACrBA,YDqBlB,ACrBA,EDqBgC,ACrBA,IwC3EH,CAA8B,KzCgGjB,ACrBA,IDqBI,ACrBA,SwC3EjB,EAAkD,CzCgG/C,ACrBA,IwC3EoD,CAAC,yBAAN,CAAgC,cAAlF,CAAP;AzCiGtB,ACrBA,AC3CA,ACRF,AKTA,ILSA,EHwEE,ACrBA,AC3CA,CFgEC,ACrBA,AC3CA,EMjBE,ENiBG,EAAE,AMjBD,CLSC,AKTA,CLSC,CDQH,CMjBK,CAAb,CNiBgB,CAAC,AMjBD,CNiBE,ACRlB,AKTiB,CNiBT,ECRY,AKTA,CAApB,ENiBwB,AMjBD,CNiBhB,AMjBiB,ELSxB,AKTA,CNiB6B,CMjBD,GNiBrB,GAA6B,CAAlC;AFkEA,ACrBA,AC5CD,ACPD,ACSE,AInBA,AZFF,A6CdA,ItC0BA,CDIA,INhBK,A6CdA,CzCkGC,ACrBA,AG1CA,CDTC,CAAC,AKVA,CNiBC,CAAC,AEEA,CJ+DC,ACrBA,CEnDX,CKVa,CNiBC,AEEA,EJ+DE,ACrBA,AC/ChB,AMdgB,AZFhB,CIoFE,ACrBA,AG1CA,ARrBe,EIoFE,ACrBA,AG1CA,ERrBnB,CAAsB,CAAC,CIoFC,ACrBA,AL/DF,CYEG,CAAE,AZFM,CIoFN,ACrBA,AO7DF,AZFH,CIoFH,ACrBA,AO7DjB,AiChBF,I7Cc6C;AMoB9C,ACNC,ACQI,AInBF,AZFA,A6Cf4B,MjCiB5B,ILWI,CKXC,CAAE,AZFD,CQqBC,AInBF,AiCjB8B,CjCiBnC,EZFU,CYEG,AiCjB0B,E7Ce1B,CQqBX,EInBgB,AiCjB0B,CrCoC3B,AInBG,AiCjByB,CjCiB3B,CAAL,GAAa,IJmBA,CInBK,CAAE,CJmBJ,AInBE,CJmB7B,AInBwB,GAAa,EZFlB,CAAC,A6Cfa,C7CeZ,A6Cf0C,CjCiBrB,AZF/B,CYEiC,CAAF,AZFlB,CYEa,AZFZ,CAAC,CAAf,CYEuC,CAApD,AZF+B,CAAC,CAAC,CAApB,CAAb,M6CfmC,EAAkD,KAAK,CAAC,yBAAN,CAAgC,mBAAlF,CAAP;AzCoG5B,ACrBA,AC3CJ,ACPI,ACQE,AInBH,AZFC,KYTuD,CLsBvD,AKTF,IRgFM,ACrBA,CDqBC,ACrBA,CL/DC,COYF,CHwEI,ACrBA,EL/DE,GIoFN,ACrBA,AL/DS,KIoFK,ACrBA,CDqBlB,ACrBA,EDqBqB,ACrBA,cL/DA,CAAC,CAAC,CAAV,EAAa,CAAC,CAAC,CAAf,EAAkB,CAAC,CAAC,CAApB,CAAb,CAF2C,CAI3C;AImFE,ACrBA,AElDF,ACQC,AqCrCH,MtC6BE,EHuEE,ACrBA,CwC/EC,IzCoGI,ACrBA,CElDC,EAAE,CHuEE,ACrBA,AwC/Ed,KzCoGmB,ACrBA,GDqBG,ACrBA,QDqBT,ACrBT,GDqB8B,CAA9B;AACA,ACrBA,AErDE,ACWL,ARpBC,A6ClBa,KtC2Bf,GH0EI,ACrBA,IL9DI,C6ClBc,CzCqGZ,ACrBA,EL9DE,C6ClBc,CzCqGX,ACrBA,CL9DC,CAAC,CAAC,CAAF,A6ClBe,CAAC,CzCqGX,ACrBA,GDqBG,ACrBA,AL9DA,CAAC,CAAC,CAAV,IAAe,CImFC,AJnFA,CImFC,AJnFA,CAAF,GK8DM,CAAC,CL9DC,A6ClBjB,C7CkBkB,A6ClBY,C7CkBX,CAA1B,GAA+B,CAA/B,EImFD,CJnFoC,EImFE,CAAhD,CCrBA,AL9DkD,K6ClBhC,EAAkD,C7CkBV,CAAC,G6ClBc,C7CkBV,A6ClBW,C7CkBV,CAAN,EAAS,SAAT,CAA5D,W6ClBsE,CAAgC,MAAlF,CAAP;AzCsGX,ACrBA,AElDL,AKXC,AZDE,QImFE,ACrBA,CO7DC,ERkFE,ACrBA,CL9DC,CYCC,CRkFC,ACrBA,AO7DA,EZDE,CYCC,CAAb,CZDgB,CImFA,ACrBA,AO7DA,AZDC,CYCA,AZDC,CAAF,EImFI,ACrBA,AO7DA,GZDI,CAAC,CYCzB,AZD0B,CAAV,CYCW,CRkFC,AQlFA,CRkFC,CQlF7B,AZD+B,CAAC,CYCA,AZDC,CK8DA,AL9DF,CK8DG,IL9DK,CAAC,CAAC,CAA1B,GAA+B,CImF1C,AJnFW,GAAmC,EK8D9C,EL9DkD,QAAQ,CAAC,IAAI,CAAC,CAAN,EAAS,SAAT,CAA5D;AIqFE,ACrBA,AG3CJ,AInBE,AZDA,A6CnBF,MjCoBE,GiCpBG,CrCuCC,EJgEE,ACrBA,GDqBG,ACrBA,AO9DA,CAAE,CAAF,CAAT,CRmFa,ACrBA,AG3CA,AqCvCf,CzCuGI,ACrBA,CO9De,CRmFD,ACrBA,AG3CU,AInBR,EJmBpB,CJgEqB,ACrBA,AO9DF,EAAM,CRmFD,ACrBA,CDqBN,ACrBA,CO9DC,EAAW,GAAX,EAAgB,GAAhB,CAAjB;AL3IgD,AC+JlD,AInBC,AiCrBgB,UrCwCX,GqCxCkB,IAAI,IrCwCX,CqCxCgB,CAAC,CrCwCJ,EAA9B,gBqCxCwB,CAA8B,kBAA9B,EAAkD,KAAK,CAAC,yBAAN,CAAgC,QAAlF,CAAP;AzCwGb,ACrBA,AC7CE,AEGN,AInBD,ENgBO,QEGA,EFHU,CFkEP,ACrBA,AC7CQ,IFkEJ,ACrBA,CDqBC,ACrBA,AC7CE,EAAgB,AEGhB,CJ+DC,ACrBA,CDqBb,ACrBA,CG1CyB,CJ+DT,ACrBA,CDqBC,ACrBA,AG1CrB,CFHgB,EFkEQ,ACrBA,AC7CwB,GFkE5C,ACrBA,EDqByB,ACrBA,AC7Cb,CFkEc,ACrBA,CC7CiC,CFkE3D,ACrBA,EDqB8B,ACrBA,EC7ClB,EAA4D,CFkErC,ACrBA,SDqBL,ACrBA,CDqBgB,ACrBA,CDqBhB,ACrBA,IDqBsB,ACrBA,KDqBK,ACrBA,IDqBK,ACrBA,CDqBC,ACrBA,GDqBG,ACrBA,GDqBG,ACrBA,GDqBN,ACrBA,GDqBY,ACrBA,CDqBC,ACrBA,GDqBG,ACrBA,CDqBjB,ACrBA,IDqBsB,ACrBA,QDqBQ,CAAC,ICrBI,CAAC,GDqBrC,IAA6C,CCrB7C,EDqBgD,ECrBE,CDqBC,ECrBE,CDqBrD,CAAJ,CAAL,ACrBiE,GAAxD,CAAJ,CDqBiE,ACrB5F,CDqBA;AAC/B,ACrBA,AC7CH,AEGA,AqCzCA,SAAK,CvCsCC,AEGA,IFHI,GAAG,AuCtCb,IrCyCiB,CFHC,EEGY,CFHT,CEGrB,CAtCuB,CAwCvB,EFLA;AFmEC,ACrBA,AC7CD,AMhBM,AiCvBS,EjCuBT,QNgBC,EMhBS,CAAC,AiCvBK,CvCuCX,GAAG,AuCvCY,EjCuBV,EAAkC,CiCvBnB,CvCuCX,AuCvCY,GvCuCT,KAAvB,WuCvCsB,CAA8B,kBAA9B,EAAkD,KAAK,CAAC,yBAAN,CAAgC,MAAlF,CAAP;AzC0GhB,ACpBA,AC9CC,AEIA,AIpBA,AZDE,SQqBG,CFJC,EMhBE,AZDA,CQqBC,CFJC,AEIA,GFJG,AEIA,CAAb,AIpBA,CZDe,CQqBC,CAAC,CFJC,ANjBA,EQqBE,CFJC,CNjBC,GMiBtB,AEIyB,ARrBA,IAAvB,GQqBF,EAAkC,EAAE,CAApC,EAAuC;AFHvC,AEKE,AIrBA,AZDA,A6CvBF,SAAK,CvCwCC,ANjBA,CYCC,CJqBC,EFLE,GAAG,ANjBX,A6CvBF,CrC6Cc,CRtBC,EQsBE,EFLE,GAAG,ANjBA,CAAC,CQsBC,CAAC,CFLzB,INjBe,EQsBE,AIrBe,CJqBC,AIrBA,KJqBK,MAAL,CAAa,CAAb,CAAhB,AIrBf,EJqBiD,KAAK,QAAvC,CAAf;AJ8DI,ACpBA,AC9CN,AMhBI,AZAF,A6CzBa,EzC2GT,ACpBA,QC9CA,GMhBG,AiCzBa,EzC2GH,ACpBA,EwCvFO,CzC2GP,ACpBA,EC9CH,AMhBZ,EiCzB2B,CvCyCL,AMhBP,AiCzBa,CjC0B1B,CNeN,AMfO,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CADa,EAEb,CAAC,CiC3Be,CAA8B,EjC2BzC,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CAFa,EAGb,CAAC,GiC5Be,CjC4BX,CiC5B6D,CjC4BlE,EAAS,CAAT,CiC5BuE,CjC4B3D,AiC5B4D,CjC4BxE,CAHa,EAIb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAJa,CAAf,MiCzBoE,CAAgC,MAAlF,CAAP;AzC4Gf,ACpBA,AGzCE,AIhBE,UR6EE,ACpBA,AGzCA,MAAM,CJ6DC,ACpBA,EGzCE,CJ6DC,ACpBA,AGzCd,EAAgB,EJ6DE,ACpBA,gBDoBJ,ACpBA,EDoBhB,ACpBA;AC7CA,AEKI,AqC/CJ,QrC+CI,CFLC,AuC1CA,IvC0CI,CAAC,GAAG,AEKA,AqC/Cb,CvC0CA,AEKe,CAAF,CFLG,AEKZ,CFLa,EEKK,CFLF,MAApB,AEK6B,CAAC,CFLF,CAAC,IAAI,CEKX,CAAgB,GFLtC,EAAwC,AEKG,MAAL,CAAa,CAAb,CAAhB,EAAkC,KAAK,WAAvC,IAAsD,MAAvD,GAAiE,CAAlF;AJ8DJ,ACpBA,AC9CE,AEKE,AIhBF,AiChCa,QrCgDX,CJ6DC,ACpBA,EC9CE,AMXA,EiChCe,EvC2CX,CAAC,CFkEZ,ACpBA,AwCzF0B,CzC6GZ,ACpBA,CC9CC,AEKA,CFLb,AEKe,CAAF,CFLG,AEKd,AqChD2B,CvC2CZ,AuC3Ca,EzC6GhC,ACpBA,AGzCwB,CJ6DF,ACpBA,AC9CA,KAApB,CFkE0B,ACpBA,AGzCG,CFLF,AEKG,CFLF,EFkEC,ACpBA,AOzDC,CAAC,CNWC,EEKV,CAAgB,CqChDlB,CvC2CpB,AuC3CkD,EvC2CX,CEKI,MAAL,CAAa,CAAb,CAAhB,CIhBtB,CJgBwD,IqChDpC,CrCgDyC,CqChDS,KAAK,CAAC,MrCgDtD,IAAwD,MAAzD,GAAmE,CAAtF,KqChDoE,CAAgC,MAAlF,CAAP;AzC8Gb,ACpBA,AC9CE,AEKA,AIhBA,MR6EF,ACpBA,EC9CE,AEKA,KJ6DK,ACpBA,AOzDA,CR6EC,ACpBA,GDoBR,ACpBA,CDoBY,ACpBA,AC9CA,AEKA,CFLC,AEKC,CAAF,AIhBV,CJgBA,EFLA,AMXe,CR6EC,ACpBA,AC9CA,AEKG,AIfjB,CR4Ee,ACpBA,AOxDd,IAAI,CAAL,CJewB,CJ6DhB,ACpBA,AGzCiB,AIfjB,CAAR,CR4EJ,ACpBA,COxDe,CAAX,CADa,EJgBI,AIdjB,CJciC,AIdhC,IAAI,CJciC,AIdtC,EAAQ,CAAR,EAAW,CJcsB,AIdjC,CJc8C,AIhBjC,CJgBoB,CAAhB,AIbjB,CAAC,CJakD,GIb9C,CAAL,CJawD,CIbhD,CAAR,EAAW,CAAX,CAHa,CAAf,KJgBmB,IAAuD,MAAxD,GAAkE,CAApF;AJ8DH,ACpBA,AC/CqB,AEMlB,AIZA,AZVF,A6C3BF,KzC4GA,ACpBA,GGvCI,CqCjDC,CvC2CiB,CAAF,CNhBZ,EAAE,GAAG,CAAC,CQsBC,ARtBA,CQsBE,CAAF,AqCjDf,CrCiDI,GAAoB,OAAO,ARtBlB,CQsBmB,ARtBH,IAAhB,CAAX,EQsBsB,CAAgB,KAAK,MAAL,CAAa,CAAb,CAAhB,EAAkC,KAAK,aAAvC,IAAwD,MAAzD,GAAmE,CAAtF;AFNqB,AEOtB,ARtBD,A6C5BiB,OrC6CjB,GFFuB,CAAL,CNfZ,CQsBC,AqClDiB,C7C4BhB,GAAG,A6C5BiB,C7C4BhB,CAAC,G6C5BoB,CAAC,S7C4BvB,CAAgB,IAAhB,CAAX,I6C5BwB,CAA8B,kBAA9B,EAAkD,KAAK,CAAC,yBAAN,CAAgC,SAAlF,CAAP;AzCgHnB,ACpBA,ACjD4B,AEQxB,AIZF,AZTA,IIkFF,ACpBA,IGzCI,EFRwB,ANbtB,CIkFC,ACpBA,ACjDsB,AMJtB,CRyEC,ACpBA,AL9DA,CMawB,CAAC,CNbtB,CIkFX,ACpBA,CGzCa,ARrBP,CQqBS,CFRuB,AEQzB,CAAT,ERrBc,CMac,AEQX,ARrBnB,CQqBE,CRrBiB,CMawB,IAAb,ENbJ,CMawB,CNbtB,EYSE,CAAC,AZTA,CMab,CNbC,IYSnB;AR0EF,ACpBA,AClD4D,AESxD,AIZA,AZRF,A6C/BF,QrCmDI,CqCnDC,CvC0CuD,CFsErD,ACpBA,AClDsD,CNXrD,CMWwD,AMHvD,CNGwD,IFsEjE,ACpBA,CClDsE,AESvD,ARpBA,CQoBE,AIZb,CJYW,CAAX,ARpBc,A6C/BlB,CvC0CgE,AMH7C,AZRC,CYSd,CJWiB,AIXhB,CNEsE,AESzE,CRpBoB,CAAC,CYSd,AZTS,CMW4C,CMF1D,CZTuB,CMWuD,AMFrE,CAAT,CZTa,CYSD,CAAZ,CADa,AZRiB,CAAlB,CYUZ,CAAC,GZVoC,CYUhC,EAAL,CZVyC,CYUhC,AZViC,CYU1C,AZVqC,EYUzB,CAAZ,AZV8C,CYQjC,EAGb,AZXoC,CYWnC,EZXoD,CAAzC,CYWP,AZXT,EYWI,EAAS,CAAC,CAAV,EAAa,CAAb,CAHa,EAIb,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CAJa,EAKb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CALa,EAMb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CANa,EAOb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAPa,EAQb,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CARa,EASb,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CATa,EAUb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAVa,EAWb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAXa,EAYb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAZa,CAAf;AR0EL,ACpBA,ACnDqB,AEUhB,AICA,AZrBF,A6ChCkB,QrCoDhB,CFVA,CNVE,G6ChCqB,I7CgCzB,A6ChC6B,CrCoDjB,CAAE,ARpBD,CQoBD,CAAV,CqCpDgC,CAAC,CrCoDf,CAAlB,CRpBkB,CAAC,OAAR,Q6ChCY,CAA8B,kBAA9B,EAAkD,KAAK,CAAC,yBAAN,CAAgC,UAAlF,CAAP;AzCmHtB,ACpBA,ACpDK,AEUC,ARnBF,QQmBE,KRnBK,CAAP,KQmBa,CAAE,CAAF,CAAX,GAAmB,CAAnB;AFTH,AEUE,AICD,AZpBD,A6ClCD,K7CMA,MYgDO,yBAAyB,CAAC,QAA/B;AJAD,AICG,AZpBL,A6CnCU,YAAM,CjCuDN,GiCvDU,IjCuDf,CiCvDW,CAAU,CjCuDN,CACb,CAAC,IAAI,CAAL,EAAQ,CAAR,EAAW,CAAX,CADa,EAEb,CAAC,IAAI,CAAL,EAAQ,CAAR,EAAW,CAAX,AiCzDgD,CjCuDnC,EAGb,CAAC,IAAI,CAAL,EAAQ,CAAC,CAAT,EAAY,CAAZ,CAHa,AiCvDoD,EjC2DjE,AiC3DS,CjC2DR,AiC3DE,IjC2DE,CAAL,EAAQ,CAAR,EAAW,CAAX,CAJa,EAKb,CAAC,IAAI,CAAL,EAAQ,CAAR,EAAW,CAAX,CALa,EAMb,CAAC,IAAI,CAAL,EAAQ,CAAR,EAAW,CAAX,CANa,CAAf;ANVJ,AMkBI,AiC3EN,WvCyDS,UAAP;AACD,AEUC,AR/LE,A6CyIL,SrCsDQ,KAAL,GAAa,aAAa,CAAC,KAAK,OAAL,GAAe,CAAhB,CAA1B;AJ6DM,ACpBA,AGxCN,AIQE,ERoDI,ACpBA,OGxCD,EIQE,KJRP,CJ4DqB,ACpBA,CDoBC,ACpBA,CGxCP,EJ4DM,ACpBA,EDoBc,ACpBA,CDoBd,ACpBA,EDoByB,ACpBA,CDoBzB,ACpBA,EDoBoC,ACpBA,CDoBpC,ACpBA,EDoB+C,ACpBA,AGxCxC,CJ4DP,ACpBA,AGxCQ,EJ4DkD,ACpBA,COhC/C,CRoDX,ACpBA,AOhCY,CJRC,CJ4DuD,ACpBA,IOhCvF,EJR2B,GAAe,CAAhB,CAA5B;AJ6DA,ACpBA,AC5OE,AEoMF,AIQI,AiC9DR,QzCkHQ,ACpBA,CGxCC,AqCtDT,CzCkHU,ACpBA,GDoBG,ACpBA,AOhCA,CRoDC,ACpBA,CGxCV,EJ4Da,ACpBA,CGxCC,EJ4Dd,ACpBA,AOhCI,GAAe,CACb,CAAC,IAAI,EJTgB,AISrB,CJTsB,CISb,CAAT,EAAY,CJTe,AIS3B,CADa,EAEb,CAAC,GJVqB,CIUjB,CiChEf,CrCsD+C,AIUrC,AiChEqC,CrCsDhB,CAA3B,AIUe,CAAT,EAAY,CAAZ,CAFa,EAGb,CAAC,IAAI,EAAL,EAAS,AiCjEnB,CjCiEoB,CAAV,AiCjEqF,EjCiExE,CAAb,CAHa,EAIb,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,AiClEwE,CjCkErF,CAJa,CiC9DmH,CjCmEhI,CAAC,IAAI,EAAL,CiCnEV,CjCmEmB,CAAT,AiCnE2I,EjCmE/H,CAAZ,CALa,EAMb,AiCpEiJ,CjCoEhJ,EiCpEmJ,EjCoE/I,CiCpEf,CjCoEU,CiCpEuJ,CjCoE9I,CAAT,EAAY,CAAZ,CANa,EAOb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAPa,EAQb,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CARa,EASb,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CATa,EAUb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAVa,EAWb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAXa,EAYb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAZa,CAAf;ARqDJ,ACpBA,AGxCA,AIqBI,AiC3EN,QzCkHM,ACpBA,CGxCC,CJ4DC,ACpBA,AwC9FA,GzCkHG,ACpBA,CDoBC,ACpBA,CDoBV,ACpBA,CGxCA,CJ4Da,ACpBA,EDoBE,ACpBA,AGxCA,GJ4DG,ACpBA,CDoBC,ACpBA,CDoBN,ACpBA,KwC9Ff,GrCsD8B,CAAC,KAAK,OAAL,GAAe,CAAhB,CAA5B;AJ8DA,ACpBA,AGzCA,AqCtDA,QzCmHI,ACpBA,CGzCC,AqCtDA,CzCmHC,ACpBA,GDoBG,ACpBA,CDoBC,ACpBA,AGzCV,GJ6Da,ACpBA,AGzCA,EqCtDb,CzCmHA,ACpBA,UGzC0B,CAAC,KAAK,OAAL,GAAe,CAAhB,CAA1B,CA9DuB,CAgEvB;AJ4DA,ACpBA,AC/Oa,AM2NX,AiC5Ee,QzCoHb,ACpBA,EDoBE,ACpBA,COpBC,ERwCE,ACpBA,AwChGe,CvC/IX,CAAA,EuC+Ie,CzCoHd,ACpBA,KC/OD,CuC+IsB,CAAC,CvC/IZ,CAAC,EAAD,CFmQxB,ACpBA,CC/O6B,CFmQD,ACpBA,CC/OJ,AuC+IA,CzCoHM,ACpBA,AC/OjB,AuC+IgC,EjC4Eb,CRwCC,ACpBA,AOpBA,KRwCK,ACpBA,COpBpC,SiC5EsB,EzCoHI,ACpBA,AwChGqC,MAAzC,CAAP;AzCsHjB,ACpBA,AChPa,AEuMb,AIoBI,QRyCA,ACpBA,CDoBC,ACpBA,AGzCA,GJ6DG,ACpBA,CDoBC,ACpBA,AGzCA,AIoBA,CN3NI,CAAA,CFoQD,ACpBA,CDoBZ,ACpBA,CGzCc,EIoBV,CJpBa,CAAZ,CIoBc,CJpBC,AIqBd,CN5NO,AEuMQ,AIqBd,GN5NmB,AEuMF,CFvMX,AM4NF,EAAL,EJrBuB,AIqBd,CAAT,EAAY,CAAZ,CADa,EJpBK,AIsBlB,CJtB+B,AIsB9B,IAAI,EJtBX,AIsBM,EJtBuC,AIsB9B,CAAT,EAAY,CAAZ,CJtB4C,AIoB/B,EAGb,CJvB+C,AIuB9C,CJvBP,EAAwD,CIuB7C,EAAL,EJvBuD,AIuB9C,CAAC,CJvBhB,AIuBM,EJvB2D,AIuB9C,CAAb,CAHa,EAIb,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CAJa,EAKb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CALa,EAMb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CANa,EAOb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAPa,CAAf;AR0CJ,ACpBA,AChPa,AEuMX,AI4BE,AiCrFJ,QzCsHI,ACpBA,CDoBC,ACpBA,AwClGA,GzCsHG,ACpBA,AGzCA,CJ6DC,ACpBA,CChPI,CAAA,CFoQD,ACpBA,CDoBZ,ACpBA,AGzCa,EqCzDb,CrCyDgB,KFvMH,AEuMQ,GFvMK,EAAb,EEuMG,CAAc,KAAd,CAAd;AJ8DF,ACpBA,AGxCE,AqC3De,QzCuHb,ACpBA,CDoBC,ACpBA,GDoBG,ACpBA,AGxCA,CJ4DR,ACpBA,AwCnGwB,IrC2DX,AqC3De,GrC2DZ,CAAC,CAAf,EqC3DiC,CAAC,QAAZ,CAAqB,kBAArB,EAAyC,MAAzC,CAAP;ArC6Df,AI0BA,UJ1BI,CI0BC,QJ1BQ,GAAG,KAAhB,SI0B8B,CAAC,MAA/B;ARkCF,ACpBA,AGvCE,AI0BE,AiCvFJ,SAAK,CrC6DC,CJ2DC,ACpBA,CDoBC,ACpBA,CObC,ERiCE,ACpBA,EDoBJ,ACpBA,CwCpGP,EjCuFI,CRiCa,ACpBA,CDoBC,ACpBA,AGvCA,CI0BC,CACb,CRgCe,ACpBA,AGvCA,AI2Bd,ERgCP,ACpBA,EDoByB,ACpBA,AOZd,EJ3BgB,AI2BrB,CJ3BsB,CI2Bb,CAAT,EAAY,CAAZ,CADa,EAEb,CJ5BJ,AI4BK,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAFa,EAGb,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CAHa,EAIb,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CAJa,EAKb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CALa,EAMb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CANa,EAOb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAPa,EAQb,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CARa,EASb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CATa,EAUb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAVa,CAAf;ARkCF,ACpBA,AOFE,AiCnGY,YzCyHR,ACpBA,CDoBC,ACpBA,AwCrGc,GzCyHX,ACpBA,CwCrGe,IzCyHV,ACpBA,GwCrGiB,CAAC,KzCyHvB,ACpBA,CDoBgB,ACpBA,CDoBC,ACpBA,AwCrGN,CAAoB,CzCyH/B,ACpBA,IDoBwB,ACpBA,QDoBQ,CAAC,ICpBI,AwCrG1B,CxCqG2B,CwCrGa,MAAxC,CzCyHrB,AyCzHc,KxCqGd;AGtCA,WAAK,IAAI,MAAM,GAAG,CAAlB,EAAqB,MAAM,GAAG,KAAK,OAAnC,EAA4C,MAAM,EAAlD,EAAsD;AJ2DtD,ACpBA,AGtCE,AIqCF,AiCpGF,SAAK,CzCyHC,ACpBA,CDoBC,ACpBA,AODA,GRqBG,ACpBA,AGtCA,EJ0DR,ACpBA,EDoBY,ACpBA,IGtCI,GAAG,AqC/DrB,SrC+D8B,CAAE,CIqCA,CAAC,IJrCH,CAA1B,IIqCF;ARsBE,ACpBA,AGtCA,AIqCA,AiCrGmB,ajCqGd,AiCrGqB,CzC0HpB,ACpBA,AGtCA,CJ0DC,ACpBA,EwCtGuB,CzC0HpB,ACpBA,EODV,GRqBe,ACpBA,AODA,CJrCC,AIsCd,AiCtGmC,CjCsGlC,AiCtGmC,ErCgEnB,EIsCZ,ERoBG,ACpBA,AOAR,CRoBuB,ACpBA,CDoBC,ACpBA,AOAf,CAAT,CRoBQ,ACpBA,CDoBV,ACpBA,AOAc,CAAZ,CJtC4B,AIqCf,AiCrGW,CrCgEM,AqChEoB,CjCuGlD,CAAC,IJvC2B,AIuCvB,CJvCP,CIuCE,EAAS,CAAT,EAAY,CAAZ,CAFa,EAGb,CAAC,AiCxGuB,EAA8C,EjCwGjE,EAAL,EAAS,AiCxGe,CjCwGd,AiCxGO,CjCwGjB,EAAa,CAAb,CAHa,EAIb,CAAC,IAAI,EAAL,EAAS,CAAC,CAAV,EAAa,CAAb,CAJa,EAKb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CALa,EAMb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CANa,EAOb,CAAC,IAAI,EAAL,EAAS,CAAT,EAAY,CAAZ,CAPa,CAAf;ARsBA,ACpBA,AGtCA,AI6CA,QRaA,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,IGtCI,IJ0DN,ACpBA,CDqBE,ACpBA,CDoBC,ACpBA,GGvCY,CJ2DR,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,AGvCS,CJ2DX,ACpBA,GDoBM,ACpBA,CDoBV,ACpBA,CDmBH,ACpBA,EDsBE,ACpBA,CDoBC,ACpBA,CGxCyB,CAAE,EJ4DvB,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,CDoBF,ACpBA,CGxCqB,CAA5B,CJ4Da,ACpBA,CDoBV,ACpBA,CDkBH,ACpBA,EDuBE,ACpBA,CDoBC,ACpBA,IDoBI,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,CDoBF,ACpBA,GDoBM,ACpBA,CDoBV,ACpBA,CDiBH,ACpBA,EDwBE,ACpBA,CDoBC,ACpBA,IDoBI,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,CDoBF,ACpBA,GDoBM,ACpBA,EDoBV,ACpBA,CDgBH,ACpBA;AD0BD,ACpBA,AG3CC,AqCjEJ,crCiEU,UAAU,GAAG,WAAW,CAAE,MAAF,CAA9B;AI8CF,AiC/GO,WjC+GF,CiC/GQ,IAAI,KAAJ,CAAU,cjC+GO,CAAC,UAA/B,MiC/GsD,mBAAmB,EAA5D,CAAN;AzCkIP,ACpBA,AG3CE,AI6CA,AiCrHN,UzCuIQ,ACpBA,CDoBC,ACpBA,EOEE,CRkBC,ACpBA,AG3CA,EJ+DR,ACpBA,EDoBY,ACpBA,EOEV,EJ7Cc,CI6CC,CACb,CJ9Ce,AI8Cd,IAAI,CJ9Ce,AI8CpB,EAAQ,CAAR,EAAW,CAAX,CADa,EJ7CE,AI+Cf,CJ/C8B,AI+C7B,IAAI,CAAL,EAAQ,CAAC,CAAT,EAAY,CJ/CG,AI+Cf,CJ/C2C,AI6C9B,EAGb,CAAC,IAAI,CJhDU,AIgDf,EJhDqD,AIgD7C,CAAR,EAAW,CAAX,CAHa,CAAf,IJ7CiB,EAAkD,SAAlD,EAA6D,UAA7D,EAAyE,KAAK,CAAC,CAA/E,EAAkF,KAAK,CAAC,CAAxF,EAA2F,KAAK,CAAC,CAAjG,EAAoG,KAAK,CAAC,CAA1G,CAAjB;AJgEA,ACpBA,AOMA,AiCnHP,czCiIa,ACpBA,CDoBC,ACpBA,GDoBG,ACpBA,KDoBK,ACpBA,QDoBL,ACpBA,CDoBe,ACpBA,CDoBC,ACpBA,EDoBhB,ACpBA,CDoBV,ACpBA;ADqBA,ACpBA,AG3CA,QJ+DA,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,EG3CE,MJ+DJ,ACpBA,CDqBE,ACpBA,CDoBC,ACpBA,AG5CS,GAAG,CJgER,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,CDoBF,ACpBA,GDoBM,ACpBA,CDoBV,ACpBA,CDmBH,ACpBA,EDsBE,ACpBA,CDoBC,ACpBA,AG7CH,EAA6B,EJiEtB,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,CDoBF,ACpBA,GDoBM,ACpBA,CDoBV,ACpBA,CDkBH,ACpBA,EDuBE,ACpBA,CDoBC,ACpBA,IDoBI,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,CDoBF,ACpBA,GDoBM,ACpBA,CDoBV,ACpBA,CDiBH,ACpBA,EDwBE,ACpBA,CDoBC,ACpBA,IDoBI,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,CDoBF,ACpBA,GDoBM,ACpBA,EDoBV,ACpBA,CDgBH,ACpBA;AD0BD,ACpBA,AGhDG,AIiDJ,UJjDI,YAAY,GAAG,QAAf;AJqEL,ACpBA,AGhDK,AIiDF,UJjDE,IIiDI,IAAI,CJjDC,GAAG,CIiDR,CAAU,IJjDd,uCIiDyD,MAArD,CAAN;ARoBL,ACpBA,AGhDM,AI/DL;ARqIF,ACpBA,AGjDK,AIiDJ;;AJ/CG,AI1NyD,WJ0NpD,KAAL,CAAY,SAAZ,KAA2B,KAAK,CAAC,CAAjC;AACA,WAAK,OAAL,CAAc,SAAd,KAA6B,KAAK,CAAC,CAAnC;AACA,WAAK,MAAL,CAAa,SAAb,KAA4B,KAAK,CAAC,CAAlC;AJoEI,ACpBA,AG/CJ,EJmEI,ACpBA,SG/CC,GJmEW,ACpBA,CDoBC,ACpBA,GG/CjB,CAAc,CJmEE,ACpBA,EDoBgB,ACpBA,CDoBhB,ACpBA,EDoB2B,ACpBA,CDoB3B,ACpBA,EDoBsC,ACpBA,AG/CtD,CJmEgB,ACpBA,EDoBiD,ACpBA,CDoBjD,ACpBA,CG/Ca,CJmE+C,ACpBA,CDoB5D,ACpBA,EDoBqE,ACpBA,CG/CnD,CAAC,CAAnC;AJoEF,ACpBA,AG/CE,IJmEF,ACpBA,KDoBK,ACpBA,EG/CE,EJmEE,ACpBA,GG/CP,CAAY,IJmEG,CAAC,ICpBI,AG/CpB,CH+CqB,KDoBvB,KCpBA;ADsBA,ACpBA,AGhDC;AACF;AJoEC,ACpBA,UDoBM,ACpBA,CDoBC,ACpBA,GDoBG,ACpBA,KDoBK,ACpBA,QDoBL,ACpBA,CDoBe,ACpBA,CDoBf,ACpBA,CDoBV,ACpBA;ADqBA,ACpBA,AG/CM,EAAA,EJmEN,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,KG/Ca,CAAC,EJmEhB,ACpBA,CDqBE,ACpBA,EGhDa,EAAa,CJoErB,ACpBA,IDoBI,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,CDoBF,ACpBA,GDoBM,ACpBA,CDoBV,ACpBA,CDmBP,ACpBA,EDsBE,ACpBA,KDoBK,ACpBA,IDoBI,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,CDoBF,ACpBA,GDoBM,ACpBA,CDoBV,ACpBA,CDkBP,ACpBA,EDuBE,ACpBA,KDoBK,ACpBA,IDoBI,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,CDoBF,ACpBA,GDoBM,ACpBA,CDoBV,ACpBA,CDiBP,ACpBA,EDwBE,ACpBA,KDoBK,ACpBA,IDoBI,ACpBA,CDoBC,ACpBA,CDoBC,ACpBA,CDoBF,ACpBA,GDoBM,ACpBA,CDoBV,ACpBA,CDgBP,ACpBA;AD0BD,ACpBA,AGpDC,UAAM,YAAY,GAAG,IAAI,KAAK,0BAA9B;AJ0EF,ACpBA,AGrDE,UAAM,QAAQ,GAAG,CAAC,KAAK,CAAC,CAAN,IAAW,YAAZ,IAA4B,CAA7C;AACA,UAAM,UAAU,GAAG,CAAC,KAAK,CAAC,CAAN,IAAW,YAAZ,IAA4B,CAA/C;AACA,UAAM,SAAS,GAAG,CAAC,KAAK,CAAC,CAAN,IAAW,YAAZ,IAA4B,CAA9C;AACA,UAAM,UAAU,GAAG,CAAC,KAAK,CAAC,CAAN,IAAW,YAAZ,IAA4B,CAA/C,CAL4B,CAO5B;;AACA,SAAK,QAAL,CAAe,UAAf,EAA6B,QAA7B,EAAyC,UAAzC,EAAuD,SAAvD;AACA,SAAK,WAAL,CAAkB,UAAlB,EAAgC,QAAhC,EAA4C,UAA5C,EAA0D,SAA1D,KAAyE,KAAK,CAAC,CAA/E;AACA,SAAK,aAAL,CAAoB,UAApB,EAAkC,QAAlC,EAA8C,UAA9C,EAA4D,SAA5D,KAA2E,KAAK,CAAC,CAAjF;AACA,SAAK,YAAL,CAAmB,UAAnB,EAAiC,QAAjC,EAA6C,UAA7C,EAA2D,SAA3D,KAA0E,KAAK,CAAC,CAAhF;AACA,SAAK,aAAL,CAAoB,UAApB,EAAkC,QAAlC,EAA8C,UAA9C,EAA4D,SAA5D,KAA2E,KAAK,CAAC,CAAjF;AACA,SAAK,QAAL,CAAe,UAAf,EAA6B,QAA7B,EAAyC,UAAzC,EAAuD,SAAvD,KAAsE,KAAK,MAAL,CAAa,KAAK,CAAC,CAAnB,IAAyB,KAAK,MAAL,CAAa,KAAK,CAAC,CAAnB,CAAzB,GAAkD,KAAK,MAAL,CAAa,KAAK,CAAC,CAAnB,CAAlD,GAA2E,KAAK,MAAL,CAAa,KAAK,CAAC,CAAnB,CAAjJ,CAb4B,CAc5B;AACD;AAED;AJqEQ,ACpBA,EDoBA,ACpBA,QDoBQ,ACpBA,CDoBC,ACpBA,CDoBD,ACpBA,EDoBY,ACpBA,CDoBZ,ACpBA,EDoBuB,ACpBA,CDoBvB,ACpBA,EDoBkC,ACpBA,CDoBlC,CCpBA,CDoB2C,CCpBC;ADqB1D,ACpBA,UDoBM,ACpBA,UDoBU,ACpBA,GDoBI,ACpBA,MDoBM,ACpBA,CDoBP,ACpBA,IDoBa,ACpBA,gBDoBhC,ACpBA;ADsBA,ACpBA,QDoBI,ACpBA,KDoBK,ACpBA,GDoBG,ACpBA,EDoBE,ACpBA,KDoBK,ACpBA,EDoBP,ACpBA,CDoBZ,ACpBA;ADqBA,ACpBA,QDoBI,ACpBA,SDoBS,ACpBA,GDoBG,ACpBA,KDoBhB,ACpBA;ADqBA,ACpBA,AGnDM,GAAE,KJuEJ,ACpBA,ODoBO,ACpBA,GDoBG,ACpBA,CDoBC,ACpBA,CDoBf,ACpBA,AGnDM,GAAmB;AJwEzB,ACpBA,AGnDA,QJuEI,ACpBA,EGnDE,IAAI,GAAa,EJuER,ACpBA,AGnDf,GJuEkB,ACpBA,ODoBlB,ACpBA;AGlDA,UAAM,OAAO,GAAa,EAA1B;AJwEA,ACpBA,AGnDA,SJuEK,ACpBA,CGnDC,GJuEG,ACpBA,CDoBC,ACpBA,GDoBG,ACpBA,CDoBb,ACpBA,CGnDe,CJuEC,ACpBA,CDoBC,ACpBA,CGnDW,EJuER,ACpBA,AGnDpB,KJuEyB,ACpBA,YDoBzB,ACpBA,EDoBuC,ACpBA,CDoBC,ACpBA,EDoBxC,ACpBA,EDoB4C,ACpBA;ADqB1C,ACpBA,AGnDF,UAAM,EJuEE,ACpBA,CDoBC,ACpBA,GDoBG,ACpBA,EGnDE,GJuEG,ACpBA,AGnDU,EAA3B,MJuEY,ACpBA,CDoBe,ACpBA,CDoBf,ACpBA,CDoBV,ACpBA;ADqBA,ACpBA,AGnDF,UAAM,EJuEE,ACpBA,IDoBI,ACpBA,GDoBG,ACpBA,AGnDA,GAAa,EJuER,ACpBA,AGnDpB,SJuEe,ACpBA,CDoBe,ACpBA,mBDoBf,ACpBA,CDoBmC,ACpBA,CDoBnC,ACpBA,EDoBsC,ACpBA;ADoBE,ACpBA,AGlDvD,QJsEuD,ACpBA,CDoBF,ACpBA,CGlD/C,KAAK,GAAa,EAAxB;AJsE0D,ACpBA,AGhD1D,QJoE0D,ACpBA,CDoBL,ACpBA,CGhD/C,KAAK,GAAG,aAAa,CAAC,KAAK,SAAN,EAAiB,KAAK,SAAtB,EAAiC,KAAK,SAAtC,CAA3B;AJoE6D,ACpBA,AG/C7D,QJmE6D,ACpBA,CDoBR,ACpBA,CG/C/C,QAAQ,GAAG,aAAa,CAAC,KAAK,SAAN,EAAiB,KAAK,SAAtB,EAAiC,KAAK,SAAtC,CAA9B;AJmEgE,ACpBA,AG9ChE,QJkEgE,ACpBA,CAAC,CG9C3D,CH8C6D,SG9CnD,GAAG,aAAa,CAAC,KAAK,SAAN,EAAiB,KAAK,SAAtB,EAAiC,KAAK,SAAtC,CAAhC;AJkEqD,ACpBA,AG7CrD,OJiEe,ACpBA,GG7CT,CJiEiE,ACpBI,QG7C5D,EJiEA,ACpBb,CG7CgB,EJiEkE,CAAlF,UIjE6B,CAAC,KAAK,SAAN,EAAiB,KAAK,SAAtB,EAAiC,KAAK,SAAtC,CAA/B;AACA,UAAM,UAAU,GAAG,aAAa,CAAC,KAAK,SAAN,EAAiB,KAAK,SAAtB,EAAiC,KAAK,SAAtC,CAAhC;AJkEE,ACpBA,AG7CF,UJiEM,ACpBA,AG7CA,IJiEI,ACpBA,EG7CE,CJiEC,ACpBA,EG7CE,GJiEb,ACpBA,EDoBkB,ACpBA,QG7CQ,CAAC,KAAK,SAAN,EAAiB,KAAK,SAAtB,EAAiC,KAAK,SAAtC,CAA5B;AJkEI,ACpBA,AG5CJ,QJgEI,ACpBA,AG5CA,KJgEK,ACpBA,GDoBG,ACpBA,IDoBR,ACpBA,GG5Ce,GAAG,CAAtB;AJiEI,ACpBA,AG5CJ,QJgEI,ACpBA,EG5CE,KJgEK,ACpBA,EG5CE,CJgEC,ACpBA,CDoBV,ACpBA,CG5CY,IAAI,sBAAJ,CAAoB,KAAK,kBAAL,GAA0B,KAAK,aAAnD,EAAkE,EAAlE,CAAhB;AJiEG,ACpBA;AG3CH,SAAK,IAAI,UAAU,GAAG,CAAtB,EAAyB,UAAU,IAAI,KAAK,kBAA5C,EAAgE,EAAE,UAAlE,EAA8E;AJiE5E,ACpBA,AG5CA,MAAA,MJgEM,ACpBA,KG5CK,CAAS,EJgEN,ACpBA,GDoBG,ACpBA,AG5CN,EAAgB,EJgEN,ACpBA,GG5CW,CJgEN,ACpBA,KDoBK,ACpBA,GG5CpB,EJgEe,ACpBA,AG5CiB,CJgEL,ACpBA,CDoBZ,ACpBA,CDoBD,ACpBA,EG5CuB,EJgED,ACpBA,OG5CpC,CJgE4C,CAAC,AIhEG,IH4CC,CAAC,AG5CG,SAArD,EAAgE,CJgE5B,AIhEpC,CAAX,EJgE4E,ECpB7B,GAAkC,WDoB5D,CAArB,ICpBqB,CAArB;AG3CA,MAAA,WAAW,CAAS,QAAT,EAAmB,KAAK,SAAxB,EAAmC,KAAK,SAAxC,EAAmD,KAAK,SAAxD,EAAmE,CAAnE,CAAX;AJgEA,ACpBA,AG3CA,MAAA,IJ+DI,ACpBA,OG3CO,CJ+DC,ACpBA,AG3CQ,GJ+DL,ACpBA,OG3CJ,EJ+DX,ACpBA,AG3CgC,EJ+DN,ACpBA,GG3CW,SAA1B,EAAqC,KAAK,SAA1C,EAAqD,KAAK,SAA1D,EAAqE,CAArE,CAAX;AJgEE,ACpBA,AG3CF,MAAA,EJ+DE,ACpBA,SDoBS,ACpBA,AG3CA,CAAS,EJ+DN,ACpBA,OG3CH,CJ+DT,ACpBA,CG3C6B,KAAK,SAAzB,EAAoC,KAAK,SAAzC,EAAoD,KAAK,SAAzD,EAAoE,CAApE,CAAX;AJgEE,ACpBA,AG3CF,MAAA,EJ+DE,ACpBA,SG3CS,CAAS,CJ+DP,ACpBA,GDoBG,ACpBA,CDoBd,ACpBA,KG3CS,EAAqB,KAAK,SAA1B,EAAqC,KAAK,SAA1C,EAAqD,KAAK,SAA1D,EAAqE,CAArE,CAAX;AJgEC,ACpBA,AG3CD,MAAA,WAAW,CAAS,MAAT,EAAiB,KAAK,SAAtB,EAAiC,KAAK,SAAtC,EAAiD,KAAK,SAAtD,EAAiE,CAAjE,CAAX;;AJgEA,ACpBA,AG1CA,WAAK,CJ8DC,ACpBA,GG1CG,KJ8DK,ACpBA,GDoBI,ACpBA,AG1CD,GAAG,CAApB,CJ8DuB,ACpBA,CG1CA,IJ8DL,ACpBA,CDoBY,ACpBA,CDoBZ,ACpBA,EG1Ca,GJ8DM,ACpBA,CG1CF,KAAK,EJ8DK,CAAC,ICpBI,CAAC,KDoBnD,AI9DA,EAAuD,EAAE,CH0CzD,OG1CuD,EAAY,EAAE,eAArE,EAAsF;AJ+DtF,ACpBA,AG1CE,WJ8DG,ACpBA,CG1CC,IJ8DN,ACpBA,CDoBY,ACpBA,CDoBZ,ACpBA,CG1Ca,CAAC,GJ8DK,ACpBA,QDoBnB,ACpBA,CG1CM,CAAqB,eAArB,CAAJ,EAA2C;AJ+D7C,ACpBA,AG1CI,WJ8DC,ACpBA,KDoBL,ACpBA,AG1CU,CJ8DE,ACpBA,CDoBZ,ACpBA,KDoBoB,ACpBA,QDoBQ,ACpBA,IDoBI,ACpBA,QDoBQ,CAAC,ICpBI,CAAC,MDoB9C,KCpBA;ADqBD,ACpBA,AG1CO,YAAA,QAAQ,EAAE,OAAO,CAAC;AADd,WAAN;AJgEN,ACpBA,AGzCK,SJ6DA,ACpBA,KDoBL,ACpBA,CDoBY,ACpBA,ODoBZ,ACpBA,KDoByB,ACpBA,QDoBQ,CAAC,ICpBI,CDoBtC,ACpBuC,KAAvC;ADqBA,ACpBA,SDoBK,ACpBA,KDoBL,ACpBA,CDoBY,ACpBA,ODoBZ,ACpBA,KDoByB,ACpBA,QDoBQ,CAAC,ICpBI,CAAC,KDoBvC,KCpBA;ADqBA,ACpBA,AGzCI,QAAA,GJ6DG,ACpBA,QGzCQ,CAAS,EJ6DxB,ACpBA,EGzCe,EAAe,KAAK,SAApB,EAA+B,CAA/B,CAAX;AJ8DL,ACpBA,AGzCK,QAAA,WAAW,CAAS,OAAT,EAAkB,KAAK,SAAvB,EAAkC,CAAlC,CAAX;AACA,QAAA,WAAW,CAAS,SAAT,EAAoB,KAAK,SAAzB,EAAoC,CAApC,CAAX;AJjO8C,ACrBK,AGuPnD,QAAA,WAAW,CAAS,QAAT,EAAmB,KAAK,SAAxB,EAAmC,CAAnC,CAAX;AJjON,ACrBA,AGuPM,QAAA,WAAW,CAAS,SAAT,EAAoB,KAAK,SAAzB,EAAoC,CAApC,CAAX;AACA,QAAA,WAAW,CAAS,KAAT,EAAgB,KAAK,SAArB,EAAgC,CAAhC,CAAX;;AAEA,aAAK,IAAI,UAAU,GAAG,CAAtB,EAAyB,UAAU,IAAI,KAAK,aAA5C,EAA2D,EAAE,UAA7D,EAAyE;AACvE,cAAI,IAAI,GAAG,CAAX;AACA,cAAI,OAAO,GAAG,CAAd;AACA,cAAI,SAAS,GAAG,CAAhB;AJpOgB,ACrBA,AG0PhB,QJrOgB,CAAA,ICrBA,CAAA,AG0PZ,EJrOY,GAAkB,ECrBlB,CDqBA,AIqOJ,EH1PsB,CG0PnB,CAAf,CH1PgB;ADsBA,ACrBA,AG0PhB,QJrOgB,CAAA,ICrBA,CAAA,AG0PZ,EJrOY,GAAkB,ECrBlB,CDqBA,CIqOH,CH1PqB,EG0PlB,CH1PA,AG0PhB;AJpOgB,ACrBA,AG0PhB,QJrOgB,CAAA,ICrBA,CAAA,AG0PZ,EJrOY,GAAkB,AIqOzB,EH1PO,CDqBA,AIqOJ,EH1PsB,CG0PlC,EH1PgB;ADsBA,ACrBA,QDqBA,CAAA,ICrBA,CAAA,EDqBA,GAAkB,ECrBlB,CDqBA,ECrBkB,GAAlB;ADsBA,ACrBA,AG0PhB,QJrOgB,CAAA,ICrBA,CAAA,CG0PX,IAAI,MJrOO,GAA2B,AIqOzB,EH1PF,CG0PK,CAArB,CH1P2C,CG0PnB,EJrO2B,CAAC,MIqOnB,CJrOjB,EAExB,ACvBgE,CAAC,AG0PpB,KAAK,EH1P1B,EAExB,SGwPQ,EAAyD,EAAE,SAA3D,EAAsE;AACpE,YAAA,IAAI,IAAI,KAAK,QAAL,CAAe,UAAf,EAA6B,QAA7B,EAAyC,UAAzC,EAAuD,SAAvD,CAAR;AJnOc,ACrBA,AGyPd,QJpOc,CAAA,GIoOd,CHzPc,CAAA,GDqBA,EIoOP,CJpO0B,ECrBnB,CDqBA,AIoOH,EJlOrB,ACvB2C,GAAnB,AGyPE,EHvP1B,SGuPqB,CAAkB,UAAlB,EAAgC,QAAhC,EAA4C,UAA5C,EAA0D,SAA1D,CAAX;AACA,YAAA,SAAS,IAAI,KAAK,aAAL,CAAoB,UAApB,EAAkC,QAAlC,EAA8C,UAA9C,EAA4D,SAA5D,CAAb;AJlOc,ACrBA,AGwPd,QJnOc,CAAA,GImOd,CHxPc,CAAA,MGwPN,IAAI,EJnOE,GAA4B,AImOzB,EJnOH,ACrBA,EDuBxB,CCvBoD,EAA5B,EAExB,GGsPsB,CAAmB,UAAnB,EAAiC,QAAjC,EAA6C,UAA7C,EAA2D,SAA3D,CAAZ;AACA,YAAA,SAAS,IAAI,KAAK,aAAL,CAAoB,UAApB,EAAkC,QAAlC,EAA8C,UAA9C,EAA4D,SAA5D,CAAb;AJjOc,ACrBA,AGuPd,QJlOc,CAAA,GIkOd,CHvPc,CAAA,GGuPT,IJlOS,AIkOL,GJlO6B,ECrBxB,AGuPA,GJlO6B,ACrBL,KAAK,AGuPlC,CAAe,EJlO2B,CAAC,OIkO3C,EHvP+C,AGuPlB,CHvPmB,ODqB3C,AIkOL,EAAyC,QHvPpC,EGuPL,EAAuD,SAAvD,CAAT;AJjOc,ACrBA,AGwPd,QJnOc,CAAA,GImOd,CHxPc,CAAA,EGwPV,CAAE,GJnOQ,GAAsB,EAAtB,ACrBA,CGwPV,CJjOd,AIiOU,CHxPoC,EAAtB,CGwPO,CHtP/B,GGsPU;AJhOV,ACrBA,AGsPU,YAAA,OAAO,CAAE,SAAF,CAAP,IAAwB,OAAxB;AJhOV,ACrBA,AGsPU,YAAA,SAAS,CAAE,SAAF,CAAT,IAA0B,SAA1B;AACA,YAAA,QAAQ,CAAE,SAAF,CAAR,IAAyB,QAAzB;AJjOc,ACrBA,AGuPd,QJlOc,CAAA,GIkOd,CHvPc,CAAA,KDqBA,EIkOL,CJlO0B,AIkOxB,EJlOG,ACrBA,GAAqB,EAArB,EGuPL,CAAT,IAA0B,SAA1B;AJjOc,ACrBA,AGuPd,QJlOc,CAAA,GIkOd,CHvPc,CDqBA,ACrBA,GDqBiB,AIkO1B,CAAE,CHvPO,GAAiB,GDqBQ,CAAC,CIkOnC,CAAL,IAAsB,GHvPsB,CAAC,CGuP7C,CJlO+B,IAAyB,MCrBzB,EDqBiC,CAAC,CCrBJ,SDqB/C,EAExB,ECvBoF,CAAC,UAA7D,EAExB;AGuPU,YAAA,KAAK,CAAE,QAAF,CAAL,CAAmB,UAAnB,EAAiC,SAAjC,IAA+C,KAAK,CAAE,QAAQ,GAAG,CAAb,CAAL,CAAuB,UAAvB,EAAqC,SAArC,IAAmD,IAAI,CAAE,SAAF,CAAtG;AJjOc,ACrBA,AGuPd,QJlOc,CAAA,GIkOd,CHvPc,CAAA,KDqBA,CIkON,CAAE,CJlO0B,ECrBtB,GAAsB,EGuP5B,CJlOoC,AIkO5C,CJlO6C,AIkOvB,SHvP2B,CAAC,AGuPlD,EJlOoC,AIkOA,IJlO0B,KIkO9D,CHvPoC,EDqBkC,CAAC,AIkOrB,CHvPiB,OGuPT,CAAE,EJlOE,GAAuB,ACrBL,CAAC,EGuPb,GAAG,CAAb,CJlOmC,AIkO3C,CJlO4C,AIkOlB,GHvPT,GAA4B,IDqBjF,AIkOoC,EAAwC,OHvPkB,CAAC,CGuP3D,IAAsD,KHvP1F,EGuPiG,CAAE,SAAF,CAA/G;AJhOV,ACrBA,AGsPU,YAAA,UAAU,CAAE,QAAF,CAAV,CAAwB,UAAxB,EAAsC,SAAtC,IAAoD,UAAU,CAAE,QAAQ,GAAG,CAAb,CAAV,CAA4B,UAA5B,EAA0C,SAA1C,IAAwD,SAAS,CAAE,SAAF,CAArH;AACA,YAAA,SAAS,CAAE,QAAF,CAAT,CAAuB,UAAvB,EAAqC,SAArC,IAAmD,SAAS,CAAE,QAAQ,GAAG,CAAb,CAAT,CAA2B,UAA3B,EAAyC,SAAzC,IAAuD,QAAQ,CAAE,SAAF,CAAlH;AACA,YAAA,UAAU,CAAE,QAAF,CAAV,CAAwB,UAAxB,EAAsC,SAAtC,IAAoD,UAAU,CAAE,QAAQ,GAAG,CAAb,CAAV,CAA4B,UAA5B,EAA0C,SAA1C,IAAwD,SAAS,CAAE,SAAF,CAArH;AACA,YAAA,MAAM,CAAE,QAAF,CAAN,CAAoB,UAApB,EAAkC,SAAlC,IAAgD,MAAM,CAAE,QAAQ,GAAG,CAAb,CAAN,CAAwB,UAAxB,EAAsC,SAAtC,IAAoD,KAAK,CAAE,SAAF,CAAzG;AJjOc,ACrBA,AGwPd,QJnOc,CAAA,ICrBA,CAAA,GGwPT,QJnOS,AImOd,CAAe,EJnO0B,CAA3B,CCrBA,CDuBxB,ECvBmD,CAA3B,EAExB,AGsPU,EAA6B,QAA7B,EAAyC,UAAzC,EAAuD,SAAvD,IAAqE,KAAK,QAAL,CAAe,UAAU,GAAG,CAA5B,EAAiC,QAAjC,EAA6C,UAA7C,EAA2D,SAA3D,IAAyE,KAAK,CAAE,QAAF,CAAL,CAAmB,UAAnB,EAAiC,SAAjC,CAA9I;AACA,iBAAK,WAAL,CAAkB,UAAlB,EAAgC,QAAhC,EAA4C,UAA5C,EAA0D,SAA1D,IAAwE,KAAK,WAAL,CAAkB,UAAU,GAAG,CAA/B,EAAoC,QAApC,EAAgD,UAAhD,EAA8D,SAA9D,IAA4E,QAAQ,CAAE,QAAF,CAAR,CAAsB,UAAtB,EAAoC,SAApC,CAApJ;AJjOc,ACrBA,AGuPd,QJlOc,CAAA,ICrBA,CAAA,GGuPT,GJlOS,GAAsB,ECrBtB,GDqB2B,ACrBL,EGuPpC,CAAoB,EHvPqB,GDqBQ,CAAC,IIkOlD,EAAkC,GHvPoB,CAAC,IGuPvD,EJlOc,AIkOgC,EJhOxD,QCvBwB,AGuPd,EHrPV,AGqPsE,SAA5D,IAA0E,KAAK,aAAL,CAAoB,UAAU,GAAG,CAAjC,EAAsC,QAAtC,EAAkD,UAAlD,EAAgE,SAAhE,IAA8E,UAAU,CAAE,QAAF,CAAV,CAAwB,UAAxB,EAAsC,SAAtC,CAAxJ;AACA,iBAAK,YAAL,CAAmB,UAAnB,EAAiC,QAAjC,EAA6C,UAA7C,EAA2D,SAA3D,IAAyE,KAAK,YAAL,CAAmB,UAAU,GAAG,CAAhC,EAAqC,QAArC,EAAiD,UAAjD,EAA+D,SAA/D,IAA6E,SAAS,CAAE,QAAF,CAAT,CAAuB,UAAvB,EAAqC,SAArC,CAAtJ;AJhOc,ACrBA,AGsPd,QJjOc,CAAA,ICrBA,CAAA,GGsPT,OJjOS,GAA0B,EAA1B,ACrBA,CGsPd,CAAoB,CHtPoB,EAA1B,OGsPd,EAAkC,QAAlC,EAA8C,UAA9C,EAA4D,SAA5D,IAA0E,KAAK,aAAL,CAAoB,UAAU,GAAG,CAAjC,EAAsC,QAAtC,EAAkD,UAAlD,EAAgE,SAAhE,IAA8E,UAAU,CAAE,QAAF,CAAV,CAAwB,UAAxB,EAAsC,SAAtC,CAAxJ;AJ/NV,ACrBA,AGqPU,iBAAK,QAAL,CAAe,UAAf,EAA6B,QAA7B,EAAyC,UAAzC,EAAuD,SAAvD,IAAqE,KAAK,QAAL,CAAe,UAAU,GAAG,CAA5B,EAAiC,QAAjC,EAA6C,UAA7C,EAA2D,SAA3D,IAAyE,MAAM,CAAE,QAAF,CAAN,CAAoB,UAApB,EAAkC,SAAlC,CAA9I;AJ9NV,ACrBA,AGoPS;AACF;AJ/NiB,ACrBA,AGqPnB,QJhOmB,CAAA,ICrBA,CAAA,UDqBA,GAA0B,EAA1B,ACrBA,EDuBxB,CCvBkD,EAA1B,EAExB;AGoPG;AJ9NqB,ACrBA,AGoPvB,QJ/NuB,CAAA,ICrBA,CAAA,KDqBA,GAAsB,ECrBtB,GDqB2B,ACrBL,KAAK,GDqBQ,CAAC,SCrBI,CAAC,KDqBzC,UCrBA;ADuBxB,ACrBA,AGoPA;;AJ9NwB,ACrBA,QDqBA,CAAA,ICrBA,CAAA,QDqBA,GAAwB,CAAxB,CCrBA,GAAwB,CAAxB;ADsBA,ACrBA,QDqBA,CAAA,ICrBA,CAAA,GDqBA,GAAmB,ECrBnB,GDqBwB,ACrBL,KAAK,GDqBQ,CAAC,SCrBI,CAAC,GDqBtC,UCrBA;ADsBA,ACrBA,QDqBA,CAAA,ICrBA,CAAA,aDqBA,GAA6B,ECrB7B,GAA6B,GDqBQ,CAAC,SCrBI,CAAC,KDqBd,GAA2B,OCrB3B,CDqBmC,CAAC,CCrBJ,YDqB7D,CCrB0E,CAAC,aAA3E;ADsBA,ACrBA,AGmPhB,QJ9NgB,CAAA,AI8NT,IHnPS,CAAA,OGmPhB,CJ9NgB,AI8NI,GJ9NoB,CI8NxC,CHnPgB,CGmPuB,EJ9NM,ACrBL,IGmPxC,CHnP6C,CGmPgB,EJ9NR,CAAC,SCrBI,CAAC,QDqB3C,UCrBA;AGoPtB,WAAQ,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,IACN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CADM,GAEN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAFM,GAGN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAHM,GAIN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAJM,GAKN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CALM,GAMN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CANM,GAON,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAPK,IASJ,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,IACD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CADC,GAED,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAFC,GAGD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAHC,GAID,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAJC,GAKD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CALC,GAMD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CANC,GAOD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAhBK,CAAP;AAiBD;AAED;;;;;AAGQ,SAAO,OAAP,CAAe,IAAf,EAAkC,MAAlC,EAAwD;AAC9D,WAAO,OAAO,CAAC,YAAR,CAAqB,IAArB,EAA2B,MAA3B,IAAqC,CAA5C;AACD;AAED;;;;;AAGQ,SAAO,IAAP,CAAY,IAAZ,EAA+B,SAA/B,EAAkD,QAAlD,EAAoE,MAApE,EAA0F;AAChG,QAAI,MAAJ;;AACA,YAAQ,SAAR;AACE,WAAK,OAAO,CAAC,MAAb;AACE,QAAA,MAAM,GAAI,MAAM,CAAE,QAAF,CAAN,CAAoB,IAAI,CAAC,UAAzB,EAAuC,IAAI,CAAC,YAA5C,EAA4D,IAAI,CAAC,WAAjE,IACR,MAAM,CAAE,QAAF,CAAN,CAAoB,IAAI,CAAC,UAAzB,EAAuC,IAAI,CAAC,YAA5C,EAA4D,IAAI,CAAC,WAAjE,CADQ,GAER,MAAM,CAAE,QAAF,CAAN,CAAoB,IAAI,CAAC,UAAzB,EAAuC,IAAI,CAAC,YAA5C,EAA4D,IAAI,CAAC,WAAjE,CAFQ,GAGR,MAAM,CAAE,QAAF,CAAN,CAAoB,IAAI,CAAC,UAAzB,EAAuC,IAAI,CAAC,YAA5C,EAA4D,IAAI,CAAC,WAAjE,CAHO,IAIN,MAAM,CAAE,QAAF,CAAN,CAAoB,IAAI,CAAC,UAAzB,EAAuC,IAAI,CAAC,YAA5C,EAA4D,IAAI,CAAC,WAAjE,IACD,MAAM,CAAE,QAAF,CAAN,CAAoB,IAAI,CAAC,UAAzB,EAAuC,IAAI,CAAC,YAA5C,EAA4D,IAAI,CAAC,WAAjE,CADC,GAED,MAAM,CAAE,QAAF,CAAN,CAAoB,IAAI,CAAC,UAAzB,EAAuC,IAAI,CAAC,YAA5C,EAA4D,IAAI,CAAC,WAAjE,CAFC,GAGD,MAAM,CAAE,QAAF,CAAN,CAAoB,IAAI,CAAC,UAAzB,EAAuC,IAAI,CAAC,YAA5C,EAA4D,IAAI,CAAC,WAAjE,CAPO,CAAT;AAQA;;AAEF,WAAK,OAAO,CAAC,IAAb;AACE,QAAA,MAAM,GAAI,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,QAA7B,EAAyC,IAAI,CAAC,YAA9C,EAA8D,IAAI,CAAC,WAAnE,IACR,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,QAA7B,EAAyC,IAAI,CAAC,YAA9C,EAA8D,IAAI,CAAC,WAAnE,CADQ,GAER,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,QAA7B,EAAyC,IAAI,CAAC,YAA9C,EAA8D,IAAI,CAAC,WAAnE,CAFQ,GAGR,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,QAA7B,EAAyC,IAAI,CAAC,YAA9C,EAA8D,IAAI,CAAC,WAAnE,CAHO,IAIN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,QAA7B,EAAyC,IAAI,CAAC,YAA9C,EAA8D,IAAI,CAAC,WAAnE,IACD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,QAA7B,EAAyC,IAAI,CAAC,YAA9C,EAA8D,IAAI,CAAC,WAAnE,CADC,GAED,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,QAA7B,EAAyC,IAAI,CAAC,YAA9C,EAA8D,IAAI,CAAC,WAAnE,CAFC,GAGD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,QAA7B,EAAyC,IAAI,CAAC,YAA9C,EAA8D,IAAI,CAAC,WAAnE,CAPO,CAAT;AAQA;;AAEF,WAAK,OAAO,CAAC,MAAb;AACE,QAAA,MAAM,GAAI,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,QAAhD,EAA4D,IAAI,CAAC,WAAjE,IACR,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,QAAhD,EAA4D,IAAI,CAAC,WAAjE,CADQ,GAER,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,QAAhD,EAA4D,IAAI,CAAC,WAAjE,CAFQ,GAGR,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,QAAhD,EAA4D,IAAI,CAAC,WAAjE,CAHO,IAIN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,QAAhD,EAA4D,IAAI,CAAC,WAAjE,IACD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,QAAhD,EAA4D,IAAI,CAAC,WAAjE,CADC,GAED,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,QAAhD,EAA4D,IAAI,CAAC,WAAjE,CAFC,GAGD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,QAAhD,EAA4D,IAAI,CAAC,WAAjE,CAPO,CAAT;AAQA;;AAEF,WAAK,OAAO,CAAC,KAAb;AACE,QAAA,MAAM,GAAI,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,QAArE,IACR,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,QAArE,CADQ,GAER,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,QAArE,CAFQ,GAGR,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,QAArE,CAHO,IAIN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,QAArE,IACD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,QAArE,CADC,GAED,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,QAArE,CAFC,GAGD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,QAArE,CAPO,CAAT;AAQA;;AACF;AACE,cAAM,IAAI,KAAJ,CAAU,YAAV,CAAN;AA7CJ;;AAgDA,WAAO,MAAM,GAAG,CAAhB;AACD;AAED;;;;;AAGQ,SAAO,OAAP,CAAe,IAAf,EAAkC,SAAlC,EAAqD,MAArD,EAA2E;AACjF,YAAQ,SAAR;AACE,WAAK,OAAO,CAAC,MAAb;AACE,eAAQ,CAAC,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAAD,GACN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CADM,GAEN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAFM,GAGN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAHK,IAIJ,CAAC,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAAD,GACD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CADC,GAED,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAFC,GAGD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAPK,CAAP;;AASF,WAAK,OAAO,CAAC,IAAb;AACE,eAAQ,CAAC,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAAD,GACN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CADM,GAEN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAFM,GAGN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAHK,IAIJ,CAAC,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAAD,GACD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CADC,GAED,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAFC,GAGD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAPK,CAAP;;AASF,WAAK,OAAO,CAAC,MAAb;AACE,eAAQ,CAAC,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAAD,GACN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CADM,GAEN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAFM,GAGN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAHK,IAIJ,CAAC,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAAD,GACD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CADC,GAED,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAFC,GAGD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAPK,CAAP;;AASF,WAAK,OAAO,CAAC,KAAb;AACE,eAAQ,CAAC,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAAD,GACN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CADM,GAEN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAFM,GAGN,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAHK,IAIJ,CAAC,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAAD,GACD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CADC,GAED,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAFC,GAGD,MAAM,CAAE,IAAI,CAAC,YAAP,CAAN,CAA6B,IAAI,CAAC,UAAlC,EAAgD,IAAI,CAAC,YAArD,EAAqE,IAAI,CAAC,WAA1E,CAPK,CAAP;;AASF;AACE;AACA,eAAO,CAAP;AA3CJ;AA6CD;AAED;;;;;AAGS,EAAA,kBAAkB,CAAC,IAAD,EAAkB;AAC3C,UAAM,SAAS,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,EAAsB,KAAK,WAA3B,CAAlB;;AACA,UAAM,WAAW,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,EAAsB,KAAK,aAA3B,CAApB;;AACA,UAAM,UAAU,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,EAAsB,KAAK,YAA3B,CAAnB;;AACA,UAAM,WAAW,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,EAAsB,KAAK,aAA3B,CAApB;;AACA,UAAM,YAAY,GAAG,OAAO,CAAC,YAAR,CAAqB,IAArB,EAA2B,KAAK,QAAhC,CAArB;;AACA,UAAM,YAAY,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,EAAsB,KAAK,QAA3B,CAArB;;AACA,UAAM,QAAQ,GAAG,SAAS,GAAG,SAAZ,GAAwB,WAAW,GAAG,WAAtC,GAAoD,UAAU,GAAG,UAAjE,GAA8E,WAAW,GAAG,WAA7G;AAEA,WAAO,YAAY,GAAI,QAAQ,GAAG,YAAlC;AACD;AAED;;;;;AAGQ,EAAA,SAAS,CAAC,IAAD,EAAoB,SAApB,EAAuC,KAAvC,EAAsD,IAAtD,EAAoE,QAApE,EAAsF,UAAtF,EAA0G,SAA1G,EAA6H,UAA7H,EAAiJ,WAAjJ,EAAoK;AACnL,UAAM,SAAS,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,EAAsB,SAAtB,EAAiC,KAAK,WAAtC,IAAqD,CAAvE;AACA,UAAM,WAAW,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,EAAsB,SAAtB,EAAiC,KAAK,aAAtC,IAAuD,CAA3E;AACA,UAAM,UAAU,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,EAAsB,SAAtB,EAAiC,KAAK,YAAtC,IAAsD,CAAzE;AACA,UAAM,WAAW,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,EAAsB,SAAtB,EAAiC,KAAK,aAAtC,IAAuD,CAA3E;AACA,UAAM,YAAY,GAAG,OAAO,CAAC,OAAR,CAAgB,IAAhB,EAAsB,SAAtB,EAAiC,KAAK,QAAtC,IAAkD,CAAvE;AAEA,QAAI,MAAM,GAAG,GAAb;AACA,QAAI,WAAW,GAAG,CAAC,CAAnB;;AAEA,SAAK,IAAI,QAAQ,GAAG,KAApB,EAA2B,QAAQ,GAAG,IAAtC,EAA4C,EAAE,QAA9C,EAAwD;AACtD;AACA,UAAI,OAAO,GAAG,SAAS,GAAG,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,SAAnB,EAA8B,QAA9B,EAAwC,KAAK,WAA7C,CAA1B;;AACA,UAAI,SAAS,GAAG,WAAW,GAAG,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,SAAnB,EAA8B,QAA9B,EAAwC,KAAK,aAA7C,CAA9B;;AACA,UAAI,QAAQ,GAAG,UAAU,GAAG,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,SAAnB,EAA8B,QAA9B,EAAwC,KAAK,YAA7C,CAA5B;;AACA,UAAI,SAAS,GAAG,WAAW,GAAG,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,SAAnB,EAA8B,QAA9B,EAAwC,KAAK,aAA7C,CAA9B;;AACA,UAAI,UAAU,GAAG,YAAY,GAAG,OAAO,CAAC,IAAR,CAAa,IAAb,EAAmB,SAAnB,EAA8B,QAA9B,EAAwC,KAAK,QAA7C,CAAhC,CANsD,CAQtD;;;AACA,UAAI,UAAU,KAAK,CAAnB,EAAsB;AACpB,YAAI,YAAY,GAAG,OAAO,GAAG,OAAV,GAAoB,SAAS,GAAG,SAAhC,GAA4C,QAAQ,GAAG,QAAvD,GAAkE,SAAS,GAAG,SAAjG;AACA,YAAI,IAAI,GAAG,YAAY,GAAG,UAA1B;AAEA,QAAA,OAAO,GAAG,QAAQ,GAAG,OAArB;AACA,QAAA,SAAS,GAAG,UAAU,GAAG,SAAzB;AACA,QAAA,QAAQ,GAAG,SAAS,GAAG,QAAvB;AACA,QAAA,SAAS,GAAG,UAAU,GAAG,SAAzB;AACA,QAAA,UAAU,GAAG,WAAW,GAAG,UAA3B;;AAEA,YAAI,UAAU,KAAK,CAAnB,EAAsB;AACpB,UAAA,YAAY,GAAG,OAAO,GAAG,OAAV,GAAoB,SAAS,GAAG,SAAhC,GAA4C,QAAQ,GAAG,QAAvD,GAAkE,SAAS,GAAG,SAA7F;AACA,UAAA,IAAI,IAAI,YAAY,GAAG,UAAvB;;AAEA,cAAI,IAAI,GAAG,MAAX,EAAmB;AACjB,YAAA,MAAM,GAAG,IAAT;AACA,YAAA,WAAW,GAAG,QAAd;AACD;AACF;AACF;AACF;;AAED,WAAO;AAAE,MAAA,GAAG,EAAE,MAAP;AAAe,MAAA,QAAQ,EAAE;AAAzB,KAAP;AACD,GAvdkD,CAydnD;;;AACQ,EAAA,IAAI,CAAC,KAAD,EAAqB,MAArB,EAAwC;AAClD,QAAI,SAAJ;;AAEA,UAAM,QAAQ,GAAG,OAAO,CAAC,OAAR,CAAgB,KAAhB,EAAuB,KAAK,WAA5B,CAAjB;;AACA,UAAM,UAAU,GAAG,OAAO,CAAC,OAAR,CAAgB,KAAhB,EAAuB,KAAK,aAA5B,CAAnB;;AACA,UAAM,SAAS,GAAG,OAAO,CAAC,OAAR,CAAgB,KAAhB,EAAuB,KAAK,YAA5B,CAAlB;;AACA,UAAM,UAAU,GAAG,OAAO,CAAC,OAAR,CAAgB,KAAhB,EAAuB,KAAK,aAA5B,CAAnB;;AACA,UAAM,WAAW,GAAG,OAAO,CAAC,OAAR,CAAgB,KAAhB,EAAuB,KAAK,QAA5B,CAApB;;AAEA,UAAM,GAAG,GAAG,KAAK,SAAL,CAAe,KAAf,EAAsB,OAAO,CAAC,IAA9B,EAAoC,KAAK,CAAC,UAAN,GAAmB,CAAvD,EAA0D,KAAK,CAAC,UAAhE,EAA4E,QAA5E,EAAsF,UAAtF,EAAkG,SAAlG,EAA6G,UAA7G,EAAyH,WAAzH,CAAZ;;AACA,UAAM,KAAK,GAAG,KAAK,SAAL,CAAe,KAAf,EAAsB,OAAO,CAAC,MAA9B,EAAsC,KAAK,CAAC,YAAN,GAAqB,CAA3D,EAA8D,KAAK,CAAC,YAApE,EAAkF,QAAlF,EAA4F,UAA5F,EAAwG,SAAxG,EAAmH,UAAnH,EAA+H,WAA/H,CAAd;;AACA,UAAM,IAAI,GAAG,KAAK,SAAL,CAAe,KAAf,EAAsB,OAAO,CAAC,KAA9B,EAAqC,KAAK,CAAC,WAAN,GAAoB,CAAzD,EAA4D,KAAK,CAAC,WAAlE,EAA+E,QAA/E,EAAyF,UAAzF,EAAqG,SAArG,EAAgH,UAAhH,EAA4H,WAA5H,CAAb;;AACA,UAAM,KAAK,GAAG,KAAK,SAAL,CAAe,KAAf,EAAsB,OAAO,CAAC,MAA9B,EAAsC,KAAK,CAAC,YAAN,GAAqB,CAA3D,EAA8D,KAAK,CAAC,YAApE,EAAkF,QAAlF,EAA4F,UAA5F,EAAwG,SAAxG,EAAmH,UAAnH,EAA+H,WAA/H,CAAd;;AAEA,QAAI,KAAK,CAAC,GAAN,IAAa,GAAG,CAAC,GAAjB,IAAwB,KAAK,CAAC,GAAN,IAAa,KAAK,CAAC,GAA3C,IAAkD,KAAK,CAAC,GAAN,IAAa,IAAI,CAAC,GAAxE,EAA6E;AAC3E,MAAA,SAAS,GAAG,OAAO,CAAC,MAApB,CAD2E,CAG3E;;AACA,UAAI,KAAK,CAAC,QAAN,GAAiB,CAArB,EAAwB,OAAO,KAAP;AACzB,KALD,MAKO;AACL,UAAI,GAAG,CAAC,GAAJ,IAAW,KAAK,CAAC,GAAjB,IAAwB,GAAG,CAAC,GAAJ,IAAW,KAAK,CAAC,GAAzC,IAAgD,GAAG,CAAC,GAAJ,IAAW,IAAI,CAAC,GAApE,EAAyE;AACvE,QAAA,SAAS,GAAG,OAAO,CAAC,IAApB;AACD,OAFD,MAEO,IAAI,KAAK,CAAC,GAAN,IAAa,KAAK,CAAC,GAAnB,IAA0B,KAAK,CAAC,GAAN,IAAa,GAAG,CAAC,GAA3C,IAAkD,KAAK,CAAC,GAAN,IAAa,IAAI,CAAC,GAAxE,EAA6E;AAClF,QAAA,SAAS,GAAG,OAAO,CAAC,MAApB;AACD,OAFM,MAEA;AACL,QAAA,SAAS,GAAG,OAAO,CAAC,KAApB;AACD;AACF;;AAED,IAAA,MAAM,CAAC,UAAP,GAAoB,KAAK,CAAC,UAA1B;AACA,IAAA,MAAM,CAAC,YAAP,GAAsB,KAAK,CAAC,YAA5B;AACA,IAAA,MAAM,CAAC,WAAP,GAAqB,KAAK,CAAC,WAA3B;AACA,IAAA,MAAM,CAAC,YAAP,GAAsB,KAAK,CAAC,YAA5B,CAhCkD,CAkClD;;AACA,YAAQ,SAAR;AACE,WAAK,OAAO,CAAC,IAAb;AACE,QAAA,MAAM,CAAC,UAAP,GAAoB,KAAK,CAAC,UAAN,GAAmB,GAAG,CAAC,QAA3C;AACA,QAAA,MAAM,CAAC,YAAP,GAAsB,KAAK,CAAC,YAA5B;AACA,QAAA,MAAM,CAAC,WAAP,GAAqB,KAAK,CAAC,WAA3B;AACA,QAAA,MAAM,CAAC,YAAP,GAAsB,KAAK,CAAC,YAA5B;AACA;;AAEF,WAAK,OAAO,CAAC,MAAb;AACE,QAAA,MAAM,CAAC,YAAP,GAAsB,KAAK,CAAC,YAAN,GAAqB,KAAK,CAAC,QAAjD;AACA,QAAA,MAAM,CAAC,UAAP,GAAoB,KAAK,CAAC,UAA1B;AACA,QAAA,MAAM,CAAC,WAAP,GAAqB,KAAK,CAAC,WAA3B;AACA,QAAA,MAAM,CAAC,YAAP,GAAsB,KAAK,CAAC,YAA5B;AACA;;AAEF,WAAK,OAAO,CAAC,KAAb;AACE,QAAA,MAAM,CAAC,WAAP,GAAqB,KAAK,CAAC,WAAN,GAAoB,IAAI,CAAC,QAA9C;AACA,QAAA,MAAM,CAAC,UAAP,GAAoB,KAAK,CAAC,UAA1B;AACA,QAAA,MAAM,CAAC,YAAP,GAAsB,KAAK,CAAC,YAA5B;AACA,QAAA,MAAM,CAAC,YAAP,GAAsB,KAAK,CAAC,YAA5B;AACA;;AAEF,WAAK,OAAO,CAAC,MAAb;AACE,QAAA,MAAM,CAAC,YAAP,GAAsB,KAAK,CAAC,YAAN,GAAqB,KAAK,CAAC,QAAjD;AACA,QAAA,MAAM,CAAC,WAAP,GAAqB,KAAK,CAAC,WAA3B;AACA,QAAA,MAAM,CAAC,UAAP,GAAoB,KAAK,CAAC,UAA1B;AACA,QAAA,MAAM,CAAC,YAAP,GAAsB,KAAK,CAAC,YAA5B;AACA;AA3BJ,KAnCkD,CAiElD;;;AACA,IAAA,KAAK,CAAC,MAAN,GAAe,CAAC,KAAK,CAAC,UAAN,GAAmB,KAAK,CAAC,UAA1B,KAAyC,KAAK,CAAC,YAAN,GAAqB,KAAK,CAAC,YAApE,KAAqF,KAAK,CAAC,WAAN,GAAoB,KAAK,CAAC,WAA/G,KAA+H,KAAK,CAAC,YAAN,GAAqB,KAAK,CAAC,YAA1J,CAAf;AACA,IAAA,MAAM,CAAC,MAAP,GAAgB,CAAC,MAAM,CAAC,UAAP,GAAoB,MAAM,CAAC,UAA5B,KAA2C,MAAM,CAAC,YAAP,GAAsB,MAAM,CAAC,YAAxE,KAAyF,MAAM,CAAC,WAAP,GAAqB,MAAM,CAAC,WAArH,KAAqI,MAAM,CAAC,YAAP,GAAsB,MAAM,CAAC,YAAlK,CAAhB,CAnEkD,CAqElD;;AACA,WAAO,IAAP;AACD;;AAEO,EAAA,WAAW,CAAC,MAAD,EAAe;AAChC,SAAK,OAAL,GAAe,MAAf,CADgC,CAGhC;;AACA,SAAK,MAAL,GAAc,EAAd,CAJgC,CAMhC;;AACA,SAAK,IAAI,SAAS,GAAG,CAArB,EAAwB,SAAS,GAAG,MAApC,EAA4C,SAAS,EAArD,EAAyD;AACvD,WAAK,MAAL,CAAa,SAAb,IAA2B,IAAI,WAAJ,EAA3B;AACD,KAT+B,CAWhC;;;AACA,SAAK,MAAL,CAAa,CAAb,EAAiB,UAAjB,GAA8B,CAA9B;AACA,SAAK,MAAL,CAAa,CAAb,EAAiB,YAAjB,GAAgC,CAAhC;AACA,SAAK,MAAL,CAAa,CAAb,EAAiB,WAAjB,GAA+B,CAA/B;AACA,SAAK,MAAL,CAAa,CAAb,EAAiB,YAAjB,GAAgC,CAAhC,CAfgC,CAiBhC;;AACA,SAAK,MAAL,CAAa,CAAb,EAAiB,UAAjB,GAA8B,KAAK,aAAnC;AACA,SAAK,MAAL,CAAa,CAAb,EAAiB,YAAjB,GAAgC,KAAK,aAArC;AACA,SAAK,MAAL,CAAa,CAAb,EAAiB,WAAjB,GAA+B,KAAK,aAApC;AACA,SAAK,MAAL,CAAa,CAAb,EAAiB,YAAjB,GAAgC,KAAK,kBAArC;AAEA,SAAK,QAAL,GAAgB,aAAa,CAAC,KAAK,cAAN,EAAsB,KAAK,SAA3B,EAAsC,KAAK,SAA3C,EAAsD,KAAK,SAA3D,CAA7B;AACA,SAAK,WAAL,GAAmB,aAAa,CAAC,KAAK,cAAN,EAAsB,KAAK,SAA3B,EAAsC,KAAK,SAA3C,EAAsD,KAAK,SAA3D,CAAhC;AACA,SAAK,aAAL,GAAqB,aAAa,CAAC,KAAK,cAAN,EAAsB,KAAK,SAA3B,EAAsC,KAAK,SAA3C,EAAsD,KAAK,SAA3D,CAAlC;AACA,SAAK,YAAL,GAAoB,aAAa,CAAC,KAAK,cAAN,EAAsB,KAAK,SAA3B,EAAsC,KAAK,SAA3C,EAAsD,KAAK,SAA3D,CAAjC;AACA,SAAK,aAAL,GAAqB,aAAa,CAAC,KAAK,cAAN,EAAsB,KAAK,SAA3B,EAAsC,KAAK,SAA3C,EAAsD,KAAK,SAA3D,CAAlC;AACA,SAAK,QAAL,GAAgB,aAAa,CAAC,KAAK,cAAN,EAAsB,KAAK,SAA3B,EAAsC,KAAK,SAA3C,EAAsD,KAAK,SAA3D,CAA7B;AAEA,SAAK,MAAL,GAAc,EAAd;;AACA,SAAK,IAAI,UAAU,GAAG,CAAtB,EAAyB,UAAU,GAAG,GAAtC,EAA2C,EAAE,UAA7C,EAAyD;AACvD,WAAK,MAAL,CAAa,UAAb,IAA4B,UAAU,GAAG,UAAzC;AACD;;AAED,SAAK,OAAL,GAAe,EAAf;AACD;;AAEO,EAAA,WAAW,CAAC,yBAAyB,GAAG,CAA7B,EAA8B;AAC/C,SAAK,0BAAL,GAAkC,yBAAlC;AACA,SAAK,aAAL,GAAqB,KAAK,KAAK,0BAA/B;AACA,SAAK,kBAAL,GAA0B,KAAK,aAA/B;AAEA,SAAK,SAAL,GAAiB,KAAK,aAAL,GAAqB,CAAtC;AACA,SAAK,cAAL,GAAsB,KAAK,kBAAL,GAA0B,CAAhD;AACD;;AAhlBkD;;;AAE3B,OAAA,CAAA,MAAA,GAAS,CAAT;AACA,OAAA,CAAA,IAAA,GAAO,CAAP;AACA,OAAA,CAAA,MAAA,GAAS,CAAT;AACA,OAAA,CAAA,KAAA,GAAQ,CAAR","file":"src.f10117fe.js","sourceRoot":"..","sourcesContent":["/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * constants.ts - part of Image Quantization Library\n */\n\n/**\n * sRGB (based on ITU-R Recommendation BT.709)\n * http://en.wikipedia.org/wiki/SRGB\n */\nexport enum Y {\n  RED = .2126, GREEN = .7152, BLUE = .0722, WHITE = 1,\n}\n\n// tslint:disable-next-line:naming-convention\nexport enum x {\n  RED = .6400, GREEN = .3000, BLUE = .1500, WHITE = .3127,\n}\n\n// tslint:disable-next-line:naming-convention\nexport enum y {\n  RED = .3300, GREEN = .6000, BLUE = .0600, WHITE = .3290,\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * constants.ts - part of Image Quantization Library\n */\nimport * as bt709 from './bt709';\n\nexport {\n  bt709,\n};\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * rgb2xyz.ts - part of Image Quantization Library\n */\nfunction correctGamma(n: number) {\n  return n > 0.04045 ? Math.pow((n + 0.055) / 1.055, 2.4) : n / 12.92;\n}\n\nexport function rgb2xyz(r: number, g: number, b: number) {\n  // gamma correction, see https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation\n  r = correctGamma(r / 255);\n  g = correctGamma(g / 255);\n  b = correctGamma(b / 255);\n\n  // Observer. = 2°, Illuminant = D65\n  return {\n    x: r * 0.4124 + g * 0.3576 + b * 0.1805,\n    y: r * 0.2126 + g * 0.7152 + b * 0.0722,\n    z: r * 0.0193 + g * 0.1192 + b * 0.9505,\n  };\n}\n","export function degrees2radians(n: number) {\n  return n * (Math.PI / 180);\n}\n\nexport function max3(a: number, b: number, c: number) {\n  let m = a;\n  if (m < b) m = b;\n  if (m < c) m = c;\n  return m;\n}\n\nexport function min3(a: number, b: number, c: number) {\n  let m = a;\n  if (m > b) m = b;\n  if (m > c) m = c;\n  return m;\n}\n\nexport function intInRange(value: number, low: number, high: number) {\n  if (value > high) value = high;\n  if (value < low) value = low;\n  return value | 0;\n}\n\nexport function inRange0to255Rounded(n: number) {\n  n = Math.round(n);\n  if (n > 255) n = 255;\n  else if (n < 0) n = 0;\n  return n;\n}\n\nexport function inRange0to255(n: number) {\n  if (n > 255) n = 255;\n  else if (n < 0) n = 0;\n  return n;\n}\n\nexport function stableSort<T>(arrayToSort: T[], callback: (a: T, b: T) => number) {\n  const type = typeof arrayToSort[ 0 ];\n  let sorted: T[];\n\n  if (type === 'number' || type === 'string') {\n    const ord = Object.create(null); // tslint:disable-line:no-null-keyword\n    for (let i = 0, l = arrayToSort.length; i < l; i++) {\n      const val: string = arrayToSort[ i ] as any; // tslint:disable-line:no-any\n      if (ord[ val ] || ord[ val ] === 0) continue;\n      ord[ val ] = i;\n    }\n\n    sorted = arrayToSort.sort(function (a, b) {\n      return callback(a, b) || ord[ a ] - ord[ b ];\n    });\n  } else {\n    const ord2 = arrayToSort.slice(0);\n    sorted = arrayToSort.sort(function (a, b) {\n      return callback(a, b) || ord2.indexOf(a) - ord2.indexOf(b);\n    });\n  }\n\n  return sorted;\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * rgb2hsl.ts - part of Image Quantization Library\n */\nimport { min3, max3 } from '../utils/arithmetic';\n\n/**\n * Calculate HSL from RGB\n * Hue is in degrees [0..360]\n * Lightness: [0..1]\n * Saturation: [0..1]\n * http://web.archive.org/web/20060914040436/http://local.wasp.uwa.edu.au/~pbourke/colour/hsl/\n */\nexport function rgb2hsl(r: number, g: number, b: number) {\n  const min = min3(r, g, b);\n  const max = max3(r, g, b);\n  const delta = max - min;\n  const l = (min + max) / 510;\n\n  let s = 0;\n  if (l > 0 && l < 1) s = delta / (l < 0.5 ? (max + min) : (510 - max - min));\n\n  let h = 0;\n  if (delta > 0) {\n    if (max === r) {\n      h = (g - b) / delta;\n    } else if (max === g) {\n      h = (2 + (b - r) / delta);\n    } else {\n      h = (4 + (r - g) / delta);\n    }\n\n    h *= 60;\n    if (h < 0) h += 360;\n  }\n  return { h, s, l };\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * xyz2lab.ts - part of Image Quantization Library\n */\nconst refX = 0.95047; // ref_X =  95.047   Observer= 2°, Illuminant= D65\nconst refY = 1.00000; // ref_Y = 100.000\nconst refZ = 1.08883; // ref_Z = 108.883\n\nfunction pivot(n: number) {\n  return n > 0.008856 ? Math.pow(n, 1 / 3) : (7.787 * n + 16 / 116);\n}\n\nexport function xyz2lab(x: number, y: number, z: number) {\n  x = pivot(x / refX);\n  y = pivot(y / refY);\n  z = pivot(z / refZ);\n\n  if ((116 * y) - 16 < 0) throw new Error('xxx');\n  return {\n    L: Math.max(0, (116 * y) - 16),\n    a: 500 * (x - y),\n    b: 200 * (y - z),\n  };\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * rgb2lab.ts - part of Image Quantization Library\n */\nimport { rgb2xyz } from './rgb2xyz';\nimport { xyz2lab } from './xyz2lab';\n\nexport function rgb2lab(r: number, g: number, b: number) {\n  const xyz = rgb2xyz(r, g, b);\n  return xyz2lab(xyz.x, xyz.y, xyz.z);\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * lab2xyz.ts - part of Image Quantization Library\n */\nconst refX = 0.95047; // ref_X =  95.047   Observer= 2°, Illuminant = D65\nconst refY = 1.00000; // ref_Y = 100.000\nconst refZ = 1.08883; // ref_Z = 108.883\n\nfunction pivot(n: number) {\n  return n > 0.206893034 ? Math.pow(n, 3) : (n - 16 / 116) / 7.787;\n}\n\n// tslint:disable-next-line:naming-convention\nexport function lab2xyz(L: number, a: number, b: number) {\n  const y = (L + 16) / 116;\n  const x = a / 500 + y;\n  const z = y - b / 200;\n\n  return {\n    x: refX * pivot(x),\n    y: refY * pivot(y),\n    z: refZ * pivot(z),\n  };\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * xyz2rgb.ts - part of Image Quantization Library\n */\nimport { inRange0to255Rounded } from '../utils/arithmetic';\n\n// gamma correction, see https://en.wikipedia.org/wiki/SRGB#The_reverse_transformation\nfunction correctGamma(n: number) {\n  return n > 0.0031308 ? 1.055 * Math.pow(n, 1 / 2.4) - 0.055 : 12.92 * n;\n}\n\nexport function xyz2rgb(x: number, y: number, z: number) {\n  // Observer. = 2°, Illuminant = D65\n  const r = correctGamma(x * 3.2406 + y * -1.5372 + z * -0.4986);\n  const g = correctGamma(x * -0.9689 + y * 1.8758 + z * 0.0415);\n  const b = correctGamma(x * 0.0557 + y * -0.2040 + z * 1.0570);\n\n  return {\n    r: inRange0to255Rounded(r * 255),\n    g: inRange0to255Rounded(g * 255),\n    b: inRange0to255Rounded(b * 255),\n  };\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * lab2rgb.ts - part of Image Quantization Library\n */\nimport { lab2xyz } from './lab2xyz';\nimport { xyz2rgb } from './xyz2rgb';\n\n// tslint:disable-next-line:naming-convention\nexport function lab2rgb(L: number, a: number, b: number) {\n  const xyz = lab2xyz(L, a, b);\n  return xyz2rgb(xyz.x, xyz.y, xyz.z);\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\nexport { rgb2xyz } from './rgb2xyz';\nexport { rgb2hsl } from './rgb2hsl';\nexport { rgb2lab } from './rgb2lab';\nexport { lab2xyz } from './lab2xyz';\nexport { lab2rgb } from './lab2rgb';\nexport { xyz2lab } from './xyz2lab';\nexport { xyz2rgb } from './xyz2rgb';\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * common.ts - part of Image Quantization Library\n */\nimport { Point, PointRGBA } from '../utils/point';\n\nexport abstract class AbstractDistanceCalculator {\n  protected _maxDistance!: number;\n  protected _whitePoint!: {\n    r: number;\n    g: number;\n    b: number;\n    a: number;\n  };\n\n  constructor() {\n    this._setDefaults();\n\n    // set default maximal color component deltas (255 - 0 = 255)\n    this.setWhitePoint(255, 255, 255, 255);\n  }\n\n  setWhitePoint(r: number, g: number, b: number, a: number) {\n    this._whitePoint = {\n      r: (r > 0) ? 255 / r : 0,\n      g: (g > 0) ? 255 / g : 0,\n      b: (b > 0) ? 255 / b : 0,\n      a: (a > 0) ? 255 / a : 0,\n    };\n    this._maxDistance = this.calculateRaw(r, g, b, a, 0, 0, 0, 0);\n  }\n\n  calculateNormalized(colorA: PointRGBA, colorB: PointRGBA) {\n    return this.calculateRaw(colorA.r, colorA.g, colorA.b, colorA.a, colorB.r, colorB.g, colorB.b, colorB.a) / this._maxDistance;\n  }\n\n  /**\n   * Calculate raw distance (non-normalized)\n   */\n  abstract calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number): number;\n\n  protected abstract _setDefaults(): void;\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * cie94.ts - part of Image Quantization Library\n */\nimport { AbstractDistanceCalculator } from './distanceCalculator';\nimport { rgb2lab } from '../conversion/rgb2lab';\nimport { inRange0to255 } from '../utils/arithmetic';\n\n/**\n * CIE94 method of delta-e\n * http://en.wikipedia.org/wiki/Color_difference#CIE94\n */\nexport abstract class AbstractCIE94 extends AbstractDistanceCalculator {\n  /**\n   * Weight in distance: 0.25\n   * Max DeltaE: 100\n   * Max DeltaA: 255\n   */\n  protected _kA!: number;\n  protected _Kl!: number; // tslint:disable-line:naming-convention\n  protected _K1!: number; // tslint:disable-line:naming-convention\n  protected _K2!: number; // tslint:disable-line:naming-convention\n\n  calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number) {\n    const lab1 = rgb2lab(inRange0to255(r1 * this._whitePoint.r), inRange0to255(g1 * this._whitePoint.g), inRange0to255(b1 * this._whitePoint.b));\n    const lab2 = rgb2lab(inRange0to255(r2 * this._whitePoint.r), inRange0to255(g2 * this._whitePoint.g), inRange0to255(b2 * this._whitePoint.b));\n\n    const dL = lab1.L - lab2.L;\n    const dA = lab1.a - lab2.a;\n    const dB = lab1.b - lab2.b;\n    const c1 = Math.sqrt(lab1.a * lab1.a + lab1.b * lab1.b);\n    const c2 = Math.sqrt(lab2.a * lab2.a + lab2.b * lab2.b);\n    const dC = c1 - c2;\n\n    let deltaH = dA * dA + dB * dB - dC * dC;\n    deltaH = deltaH < 0 ? 0 : Math.sqrt(deltaH);\n\n    const dAlpha = (a2 - a1) * this._whitePoint.a * this._kA;\n\n    // TODO: add alpha channel support\n    return Math.sqrt(\n      Math.pow(dL / this._Kl, 2) +\n      Math.pow(dC / (1.0 + this._K1 * c1), 2) +\n      Math.pow(deltaH / (1.0 + this._K2 * c1), 2) +\n      Math.pow(dAlpha, 2),\n    );\n  }\n}\n\nexport class CIE94Textiles extends AbstractCIE94 {\n  protected _setDefaults() {\n    this._Kl = 2.0;\n    this._K1 = 0.048;\n    this._K2 = 0.014;\n    this._kA = 0.25 * 50 / 255;\n  }\n}\n\nexport class CIE94GraphicArts extends AbstractCIE94 {\n  protected _setDefaults() {\n    this._Kl = 1.0;\n    this._K1 = 0.045;\n    this._K2 = 0.015;\n    this._kA = 0.25 * 100 / 255;\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * ciede2000.ts - part of Image Quantization Library\n */\nimport { AbstractDistanceCalculator } from './distanceCalculator';\nimport { rgb2lab } from '../conversion/rgb2lab';\nimport { degrees2radians, inRange0to255 } from '../utils/arithmetic';\n\n// tslint:disable:variable-name\n// tslint:disable:naming-convention\n\n/**\n * CIEDE2000 algorithm - Adapted from Sharma et al's MATLAB implementation at\n * http://www.ece.rochester.edu/~gsharma/ciede2000/\n */\nexport class CIEDE2000 extends AbstractDistanceCalculator {\n  /**\n   * Weight in distance: 0.25\n   * Max DeltaE: 100\n   * Max DeltaA: 255\n   */\n  private static readonly _kA = 0.25 * 100 / 255;\n  private static readonly _pow25to7: number = Math.pow(25, 7);\n  private static readonly _deg360InRad: number = degrees2radians(360);\n  private static readonly _deg180InRad: number = degrees2radians(180);\n  private static readonly _deg30InRad: number = degrees2radians(30);\n  private static readonly _deg6InRad: number = degrees2radians(6);\n  private static readonly _deg63InRad: number = degrees2radians(63);\n  private static readonly _deg275InRad: number = degrees2radians(275);\n  private static readonly _deg25InRad: number = degrees2radians(25);\n\n  protected _setDefaults() {}\n\n  private static _calculatehp(b: number, ap: number) {\n    const hp = Math.atan2(b, ap);\n    if (hp >= 0) return hp;\n    return hp + CIEDE2000._deg360InRad;\n  }\n\n  private static _calculateRT(ahp: number, aCp: number) {\n    const aCp_to_7 = Math.pow(aCp, 7.0);\n    const R_C = 2.0 * Math.sqrt(aCp_to_7 / (aCp_to_7 + CIEDE2000._pow25to7)); // 25^7\n    const delta_theta = CIEDE2000._deg30InRad * Math.exp(-Math.pow((ahp - CIEDE2000._deg275InRad) / CIEDE2000._deg25InRad, 2.0));\n    return -Math.sin(2.0 * delta_theta) * R_C;\n  }\n\n  private static _calculateT(ahp: number) {\n    return 1.0 - .17 * Math.cos(ahp - CIEDE2000._deg30InRad) + .24 * Math.cos(ahp * 2.0) + .32 * Math.cos(ahp * 3.0 + CIEDE2000._deg6InRad) - .2 * Math.cos(ahp * 4.0 - CIEDE2000._deg63InRad);\n  }\n\n  private static _calculate_ahp(C1pC2p: number, h_bar: number, h1p: number, h2p: number) {\n    const hpSum = h1p + h2p;\n    if (C1pC2p === 0) return hpSum;\n    if (h_bar <= CIEDE2000._deg180InRad) return hpSum / 2.0;\n    if (hpSum < CIEDE2000._deg360InRad) return (hpSum + CIEDE2000._deg360InRad) / 2.0;\n    return (hpSum - CIEDE2000._deg360InRad) / 2.0;\n  }\n\n  private static _calculate_dHp(C1pC2p: number, h_bar: number, h2p: number, h1p: number) {\n    let dhp: number;\n    if (C1pC2p === 0) {\n      dhp = 0;\n    } else if (h_bar <= CIEDE2000._deg180InRad) {\n      dhp = h2p - h1p;\n    } else if (h2p <= h1p) {\n      dhp = h2p - h1p + CIEDE2000._deg360InRad;\n    } else {\n      dhp = h2p - h1p - CIEDE2000._deg360InRad;\n    }\n    return 2.0 * Math.sqrt(C1pC2p) * Math.sin(dhp / 2.0);\n  }\n\n  calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number) {\n    const lab1 = rgb2lab(inRange0to255(r1 * this._whitePoint.r), inRange0to255(g1 * this._whitePoint.g), inRange0to255(b1 * this._whitePoint.b));\n    const lab2 = rgb2lab(inRange0to255(r2 * this._whitePoint.r), inRange0to255(g2 * this._whitePoint.g), inRange0to255(b2 * this._whitePoint.b));\n    const dA = (a2 - a1) * this._whitePoint.a * CIEDE2000._kA;\n    const dE2 = this.calculateRawInLab(lab1, lab2);\n\n    return Math.sqrt(dE2 + dA * dA);\n  }\n\n  calculateRawInLab(Lab1: { L: number; a: number; b: number }, Lab2: { L: number; a: number; b: number }) {\n    // Get L,a,b values for color 1\n    const L1 = Lab1.L;\n    const a1 = Lab1.a;\n    const b1 = Lab1.b;\n\n    // Get L,a,b values for color 2\n    const L2 = Lab2.L;\n    const a2 = Lab2.a;\n    const b2 = Lab2.b;\n\n    // Calculate Cprime1, Cprime2, Cabbar\n    const C1 = Math.sqrt(a1 * a1 + b1 * b1);\n    const C2 = Math.sqrt(a2 * a2 + b2 * b2);\n    const pow_a_C1_C2_to_7 = Math.pow((C1 + C2) / 2.0, 7.0);\n\n    const G = 0.5 * (1.0 - Math.sqrt(pow_a_C1_C2_to_7 / (pow_a_C1_C2_to_7 + CIEDE2000._pow25to7))); // 25^7\n    const a1p = (1.0 + G) * a1;\n    const a2p = (1.0 + G) * a2;\n\n    const C1p = Math.sqrt(a1p * a1p + b1 * b1);\n    const C2p = Math.sqrt(a2p * a2p + b2 * b2);\n    const C1pC2p = C1p * C2p;\n\n    // Angles in Degree.\n    const h1p = CIEDE2000._calculatehp(b1, a1p);\n    const h2p = CIEDE2000._calculatehp(b2, a2p);\n    const h_bar = Math.abs(h1p - h2p);\n    const dLp = L2 - L1;\n    const dCp = C2p - C1p;\n    const dHp = CIEDE2000._calculate_dHp(C1pC2p, h_bar, h2p, h1p);\n    const ahp = CIEDE2000._calculate_ahp(C1pC2p, h_bar, h1p, h2p);\n\n    const T = CIEDE2000._calculateT(ahp);\n\n    const aCp = (C1p + C2p) / 2.0;\n    const aLp_minus_50_square = Math.pow((L1 + L2) / 2.0 - 50.0, 2.0);\n    const S_L = 1.0 + (.015 * aLp_minus_50_square) / Math.sqrt(20.0 + aLp_minus_50_square);\n    const S_C = 1.0 + .045 * aCp;\n    const S_H = 1.0 + .015 * T * aCp;\n\n    const R_T = CIEDE2000._calculateRT(ahp, aCp);\n\n    const dLpSL = dLp / S_L; // S_L * kL, where kL is 1.0\n    const dCpSC = dCp / S_C; // S_C * kC, where kC is 1.0\n    const dHpSH = dHp / S_H; // S_H * kH, where kH is 1.0\n\n    return Math.pow(dLpSL, 2) + Math.pow(dCpSC, 2) + Math.pow(dHpSH, 2) + R_T * dCpSC * dHpSH;\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * cmetric.ts - part of Image Quantization Library\n */\nimport { AbstractDistanceCalculator } from './distanceCalculator';\n\n/**\n * TODO: Name it: http://www.compuphase.com/cmetric.htm\n */\nexport class CMetric extends AbstractDistanceCalculator {\n  calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number) {\n    const rmean = (r1 + r2) / 2 * this._whitePoint.r;\n    const r = (r1 - r2) * this._whitePoint.r;\n    const g = (g1 - g2) * this._whitePoint.g;\n    const b = (b1 - b2) * this._whitePoint.b;\n    const dE = ((((512 + rmean) * r * r) >> 8) + 4 * g * g + (((767 - rmean) * b * b) >> 8));\n    const dA = (a2 - a1) * this._whitePoint.a;\n\n    return Math.sqrt(dE + dA * dA);\n  }\n\n  protected _setDefaults() {}\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * euclidean.ts - part of Image Quantization Library\n */\nimport { AbstractDistanceCalculator } from './distanceCalculator';\nimport { Y } from '../constants/bt709';\n\n/**\n * Euclidean color distance\n */\nexport abstract class AbstractEuclidean extends AbstractDistanceCalculator {\n  protected _kR!: number;\n  protected _kG!: number;\n  protected _kB!: number;\n  protected _kA!: number;\n\n  calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number) {\n    const dR = r2 - r1;\n    const dG = g2 - g1;\n    const dB = b2 - b1;\n    const dA = a2 - a1;\n    return Math.sqrt(this._kR * dR * dR + this._kG * dG * dG + this._kB * dB * dB + this._kA * dA * dA);\n  }\n}\n\nexport class Euclidean extends AbstractEuclidean {\n  protected _setDefaults() {\n    this._kR = 1;\n    this._kG = 1;\n    this._kB = 1;\n    this._kA = 1;\n  }\n}\n\n/**\n * Euclidean color distance (RGBQuant modification w Alpha)\n */\nexport class EuclideanBT709 extends AbstractEuclidean {\n  protected _setDefaults() {\n    this._kR = Y.RED;\n    this._kG = Y.GREEN;\n    this._kB = Y.BLUE;\n    // TODO: what is the best coefficient below?\n    this._kA = 1;\n  }\n}\n\n/**\n * Euclidean color distance (RGBQuant modification w/o Alpha)\n */\nexport class EuclideanBT709NoAlpha extends AbstractEuclidean {\n  protected _setDefaults() {\n    this._kR = Y.RED;\n    this._kG = Y.GREEN;\n    this._kB = Y.BLUE;\n    this._kA = 0;\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * manhattanNeuQuant.ts - part of Image Quantization Library\n */\nimport { AbstractDistanceCalculator } from './distanceCalculator';\nimport { Y } from '../constants/bt709';\n\n/**\n * Manhattan distance (NeuQuant modification) - w/o sRGB coefficients\n */\nexport abstract class AbstractManhattan extends AbstractDistanceCalculator {\n  protected _kR!: number;\n  protected _kG!: number;\n  protected _kB!: number;\n  protected _kA!: number;\n\n  calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number) {\n    let dR = r2 - r1;\n    let dG = g2 - g1;\n    let dB = b2 - b1;\n    let dA = a2 - a1;\n    if (dR < 0) dR = 0 - dR;\n    if (dG < 0) dG = 0 - dG;\n    if (dB < 0) dB = 0 - dB;\n    if (dA < 0) dA = 0 - dA;\n\n    return this._kR * dR + this._kG * dG + this._kB * dB + this._kA * dA;\n  }\n}\n\nexport class Manhattan extends AbstractManhattan {\n  protected _setDefaults() {\n    this._kR = 1;\n    this._kG = 1;\n    this._kB = 1;\n    this._kA = 1;\n  }\n}\n\n/**\n * Manhattan distance (Nommyde modification)\n * https://github.com/igor-bezkrovny/image-quantization/issues/4#issuecomment-235155320\n */\nexport class ManhattanNommyde extends AbstractManhattan {\n  protected _setDefaults() {\n    this._kR = 0.4984;\n    this._kG = 0.8625;\n    this._kB = 0.2979;\n    // TODO: what is the best coefficient below?\n    this._kA = 1;\n  }\n}\n\n/**\n * Manhattan distance (sRGB coefficients)\n */\nexport class ManhattanBT709 extends AbstractManhattan {\n  protected _setDefaults() {\n    this._kR = Y.RED;\n    this._kG = Y.GREEN;\n    this._kB = Y.BLUE;\n    // TODO: what is the best coefficient below?\n    this._kA = 1;\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * pngQuant.ts - part of Image Quantization Library\n */\nimport { AbstractDistanceCalculator } from './distanceCalculator';\n\n/**\n * TODO: check quality of this distance equation\n * TODO: ask author for usage rights\n * taken from:\n * {@link http://stackoverflow.com/questions/4754506/color-similarity-distance-in-rgba-color-space/8796867#8796867}\n * {@link https://github.com/pornel/pngquant/blob/cc39b47799a7ff2ef17b529f9415ff6e6b213b8f/lib/pam.h#L148}\n */\nexport class PNGQuant extends AbstractDistanceCalculator {\n  /**\n   * Author's comments\n   * px_b.rgb = px.rgb + 0*(1-px.a) // blend px on black\n   * px_b.a   = px.a   + 1*(1-px.a)\n   * px_w.rgb = px.rgb + 1*(1-px.a) // blend px on white\n   * px_w.a   = px.a   + 1*(1-px.a)\n   *\n   * px_b.rgb = px.rgb              // difference same as in opaque RGB\n   * px_b.a   = 1\n   * px_w.rgb = px.rgb - px.a       // difference simplifies to formula below\n   * px_w.a   = 1\n   *\n   * (px.rgb - px.a) - (py.rgb - py.a)\n   * (px.rgb - py.rgb) + (py.a - px.a)\n   *\n   */\n  calculateRaw(r1: number, g1: number, b1: number, a1: number, r2: number, g2: number, b2: number, a2: number) {\n    const alphas = (a2 - a1) * this._whitePoint.a;\n    return this._colordifferenceCh(r1 * this._whitePoint.r, r2 * this._whitePoint.r, alphas) +\n      this._colordifferenceCh(g1 * this._whitePoint.g, g2 * this._whitePoint.g, alphas) +\n      this._colordifferenceCh(b1 * this._whitePoint.b, b2 * this._whitePoint.b, alphas);\n  }\n\n  private _colordifferenceCh(x: number, y: number, alphas: number) {\n    // maximum of channel blended on white, and blended on black\n    // premultiplied alpha and backgrounds 0/1 shorten the formula\n    const black = x - y;\n    const white = black + alphas;\n\n    return black * black + white * white;\n  }\n\n  protected _setDefaults() {}\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\nexport { AbstractDistanceCalculator } from './distanceCalculator';\nexport { CIE94Textiles, CIE94GraphicArts } from './cie94';\nexport { CIEDE2000 } from './ciede2000';\nexport { CMetric } from './cmetric';\nexport { AbstractEuclidean, Euclidean, EuclideanBT709NoAlpha, EuclideanBT709 } from './euclidean';\nexport { AbstractManhattan, Manhattan, ManhattanBT709, ManhattanNommyde } from './manhattan';\nexport { PNGQuant } from './pngQuant';\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * common.ts - part of Image Quantization Library\n */\nimport { PointContainer } from '../utils/pointContainer';\nimport { Palette } from '../utils/palette';\nimport { PaletteQuantizerYieldValue } from './paletteQuantizerYieldValue';\n\nexport abstract class AbstractPaletteQuantizer {\n  abstract sample(pointContainer: PointContainer): void;\n  abstract quantize(): IterableIterator<PaletteQuantizerYieldValue>;\n\n  quantizeSync() {\n    for (const value of this.quantize()) {\n      if (value.palette) {\n        return value.palette;\n      }\n    }\n\n    throw new Error('unreachable');\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * point.ts - part of Image Quantization Library\n */\nimport { Y } from '../constants/bt709';\n\nexport interface PointRGBA {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n}\n\n/**\n * v8 optimized class\n * 1) \"constructor\" should have initialization with worst types\n * 2) \"set\" should have |0 / >>> 0\n */\nexport class Point implements PointRGBA {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n  uint32: number;\n  rgba: number[]; // TODO: better name is quadruplet or quad may be?\n  // Lab : { L : number; a : number; b : number };\n\n  static createByQuadruplet(quadruplet: number[]) {\n    const point = new Point();\n\n    point.r = quadruplet[ 0 ] | 0;\n    point.g = quadruplet[ 1 ] | 0;\n    point.b = quadruplet[ 2 ] | 0;\n    point.a = quadruplet[ 3 ] | 0;\n    point._loadUINT32();\n    point._loadQuadruplet();\n    // point._loadLab();\n    return point;\n  }\n\n  static createByRGBA(red: number, green: number, blue: number, alpha: number) {\n    const point = new Point();\n\n    point.r = red | 0;\n    point.g = green | 0;\n    point.b = blue | 0;\n    point.a = alpha | 0;\n    point._loadUINT32();\n    point._loadQuadruplet();\n    // point._loadLab();\n    return point;\n  }\n\n  static createByUint32(uint32: number) {\n    const point = new Point();\n\n    point.uint32 = uint32 >>> 0;\n    point._loadRGBA();\n    point._loadQuadruplet();\n    // point._loadLab();\n    return point;\n  }\n\n  constructor() {\n    this.uint32 = -1 >>> 0;\n    this.r = this.g = this.b = this.a = 0;\n    this.rgba = new Array(4);\n    this.rgba[ 0 ] = 0;\n    this.rgba[ 1 ] = 0;\n    this.rgba[ 2 ] = 0;\n    this.rgba[ 3 ] = 0;\n    /*\n     this.Lab = {\n     L : 0.0,\n     a : 0.0,\n     b : 0.0\n     };\n     */\n  }\n\n  from(point: Point) {\n    this.r = point.r;\n    this.g = point.g;\n    this.b = point.b;\n    this.a = point.a;\n    this.uint32 = point.uint32;\n    this.rgba[ 0 ] = point.r;\n    this.rgba[ 1 ] = point.g;\n    this.rgba[ 2 ] = point.b;\n    this.rgba[ 3 ] = point.a;\n\n    /*\n     this.Lab.L = point.Lab.L;\n     this.Lab.a = point.Lab.a;\n     this.Lab.b = point.Lab.b;\n     */\n  }\n\n  /*\n   * TODO:\n   Luminance from RGB:\n\n   Luminance (standard for certain colour spaces): (0.2126*R + 0.7152*G + 0.0722*B) [1]\n   Luminance (perceived option 1): (0.299*R + 0.587*G + 0.114*B) [2]\n   Luminance (perceived option 2, slower to calculate):  sqrt( 0.241*R^2 + 0.691*G^2 + 0.068*B^2 ) ? sqrt( 0.299*R^2 + 0.587*G^2 + 0.114*B^2 ) (thanks to @MatthewHerbst) [http://alienryderflex.com/hsp.html]\n   */\n  getLuminosity(useAlphaChannel: boolean) {\n    let r = this.r;\n    let g = this.g;\n    let b = this.b;\n\n    if (useAlphaChannel) {\n      r = Math.min(255, 255 - this.a + this.a * r / 255);\n      g = Math.min(255, 255 - this.a + this.a * g / 255);\n      b = Math.min(255, 255 - this.a + this.a * b / 255);\n    }\n\n    // var luma = this.r * Point._RED_COEFFICIENT + this.g * Point._GREEN_COEFFICIENT + this.b * Point._BLUE_COEFFICIENT;\n\n    /*\n     if(useAlphaChannel) {\n     luma = (luma * (255 - this.a)) / 255;\n     }\n     */\n\n    return r * Y.RED + g * Y.GREEN + b * Y.BLUE;\n  }\n\n  private _loadUINT32() {\n    this.uint32 = (this.a << 24 | this.b << 16 | this.g << 8 | this.r) >>> 0;\n  }\n\n  private _loadRGBA() {\n    this.r = this.uint32 & 0xff;\n    this.g = (this.uint32 >>> 8) & 0xff;\n    this.b = (this.uint32 >>> 16) & 0xff;\n    this.a = (this.uint32 >>> 24) & 0xff;\n  }\n\n  private _loadQuadruplet() {\n    this.rgba[ 0 ] = this.r;\n    this.rgba[ 1 ] = this.g;\n    this.rgba[ 2 ] = this.b;\n    this.rgba[ 3 ] = this.a;\n\n    /*\n     var xyz = rgb2xyz(this.r, this.g, this.b);\n     var lab = xyz2lab(xyz.x, xyz.y, xyz.z);\n     this.lab.l = lab.l;\n     this.lab.a = lab.a;\n     this.lab.b = lab.b;\n     */\n  }\n\n  /*\n   private _loadLab() : void {\n   var Lab = Color.Conversion.rgb2lab(this.r, this.g, this.b);\n   this.Lab.L = Lab.L;\n   this.Lab.a = Lab.a;\n   this.Lab.b = Lab.b;\n   }\n   */\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * pointContainer.ts - part of Image Quantization Library\n */\nimport { Point } from './point';\n\n/**\n * v8 optimizations done.\n * fromXXX methods are static to move out polymorphic code from class instance itself.\n */\nexport class PointContainer {\n  private readonly _pointArray: Point[];\n  private _width: number;\n  private _height: number;\n\n  constructor() {\n    this._width = 0;\n    this._height = 0;\n    this._pointArray = [];\n  }\n\n  getWidth() {\n    return this._width;\n  }\n\n  getHeight() {\n    return this._height;\n  }\n\n  setWidth(width: number) {\n    this._width = width;\n  }\n\n  setHeight(height: number) {\n    this._height = height;\n  }\n\n  getPointArray() {\n    return this._pointArray;\n  }\n\n  clone() {\n    const clone = new PointContainer();\n    clone._width = this._width;\n    clone._height = this._height;\n\n    for (let i = 0, l = this._pointArray.length; i < l; i++) {\n      clone._pointArray[i] = Point.createByUint32(this._pointArray[i].uint32 | 0); // \"| 0\" is added for v8 optimization\n    }\n\n    return clone;\n  }\n\n  toUint32Array() {\n    const l = this._pointArray.length;\n    const uint32Array = new Uint32Array(l);\n\n    for (let i = 0; i < l; i++) {\n      uint32Array[i] = this._pointArray[i].uint32;\n    }\n\n    return uint32Array;\n  }\n\n  toUint8Array() {\n    return new Uint8Array(this.toUint32Array().buffer);\n  }\n\n  static fromHTMLImageElement(img: HTMLImageElement) {\n    const width = img.naturalWidth;\n    const height = img.naturalHeight;\n\n    const canvas = document.createElement('canvas');\n    canvas.width = width;\n    canvas.height = height;\n\n    const ctx = canvas.getContext('2d')!; // tslint:disable-line:no-non-null-assertion\n    ctx.drawImage(img, 0, 0, width, height, 0, 0, width, height);\n\n    return PointContainer.fromHTMLCanvasElement(canvas);\n  }\n\n  static fromHTMLCanvasElement(canvas: HTMLCanvasElement) {\n    const width = canvas.width;\n    const height = canvas.height;\n\n    const ctx = canvas.getContext('2d')!; // tslint:disable-line:no-non-null-assertion\n    const imgData = ctx.getImageData(0, 0, width, height);\n\n    return PointContainer.fromImageData(imgData);\n  }\n\n  static fromImageData(imageData: ImageData) {\n    const width = imageData.width;\n    const height = imageData.height;\n\n    return PointContainer.fromUint8Array(imageData.data, width, height);\n  }\n\n  static fromUint8Array(uint8Array: number[] | Uint8Array | Uint8ClampedArray, width: number, height: number) {\n    switch (Object.prototype.toString.call(uint8Array)) {\n      case '[object Uint8ClampedArray]':\n      case '[object Uint8Array]':\n        break;\n\n      default:\n        uint8Array = new Uint8Array(uint8Array);\n    }\n\n    const uint32Array = new Uint32Array((uint8Array as Uint8Array).buffer);\n    return PointContainer.fromUint32Array(uint32Array, width, height);\n  }\n\n  static fromUint32Array(uint32Array: Uint32Array, width: number, height: number) {\n    const container = new PointContainer();\n\n    container._width = width;\n    container._height = height;\n\n    for (let i = 0, l = uint32Array.length; i < l; i++) {\n      container._pointArray[i] = Point.createByUint32(uint32Array[i] | 0); // \"| 0\" is added for v8 optimization\n    }\n\n    return container;\n  }\n\n  static fromBuffer(buffer: Buffer, width: number, height: number) {\n    const uint32Array = new Uint32Array(buffer.buffer, buffer.byteOffset, buffer.byteLength / Uint32Array.BYTES_PER_ELEMENT);\n    return PointContainer.fromUint32Array(uint32Array, width, height);\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * palette.ts - part of Image Quantization Library\n */\n\nimport { Point } from './point';\nimport { PointContainer } from './pointContainer';\nimport { AbstractDistanceCalculator } from '../distance/distanceCalculator';\nimport { rgb2hsl } from '../conversion/rgb2hsl';\n\n// TODO: make paletteArray via pointContainer, so, export will be available via pointContainer.exportXXX\n\nconst hueGroups = 10;\n\nexport function hueGroup(hue: number, segmentsNumber: number) {\n  const maxHue = 360;\n  const seg = maxHue / segmentsNumber;\n  const half = seg / 2;\n\n  for (let i = 1, mid = seg - half; i < segmentsNumber; i++, mid += seg) {\n    if (hue >= mid && hue < mid + seg) return i;\n  }\n  return 0;\n}\n\nexport class Palette {\n  private readonly _pointContainer: PointContainer;\n  private readonly _pointArray: Point[] = [];\n  private _i32idx: { [ key: string ]: number } = {};\n\n  constructor() {\n    this._pointContainer = new PointContainer();\n    this._pointContainer.setHeight(1);\n    this._pointArray = this._pointContainer.getPointArray();\n  }\n\n  add(color: Point) {\n    this._pointArray.push(color);\n    this._pointContainer.setWidth(this._pointArray.length);\n  }\n\n  has(color: Point) {\n    for (let i = this._pointArray.length - 1; i >= 0; i--) {\n      if (color.uint32 === this._pointArray[ i ].uint32) return true;\n    }\n\n    return false;\n  }\n\n  // TOTRY: use HUSL - http://boronine.com/husl/ http://www.husl-colors.org/ https://github.com/husl-colors/husl\n  getNearestColor(colorDistanceCalculator: AbstractDistanceCalculator, color: Point) {\n    return this._pointArray[ this._getNearestIndex(colorDistanceCalculator, color) | 0 ];\n  }\n\n  getPointContainer() {\n    return this._pointContainer;\n  }\n\n  // TOTRY: use HUSL - http://boronine.com/husl/\n  /*\n   public nearestIndexByUint32(i32) {\n   var idx : number = this._nearestPointFromCache(\"\" + i32);\n   if (idx >= 0) return idx;\n\n   var min = 1000,\n   rgb = [\n   (i32 & 0xff),\n   (i32 >>> 8) & 0xff,\n   (i32 >>> 16) & 0xff,\n   (i32 >>> 24) & 0xff\n   ],\n   len = this._pointArray.length;\n\n   idx = 0;\n   for (var i = 0; i < len; i++) {\n   var dist = Utils.distEuclidean(rgb, this._pointArray[i].rgba);\n\n   if (dist < min) {\n   min = dist;\n   idx = i;\n   }\n   }\n\n   this._i32idx[i32] = idx;\n   return idx;\n   }\n   */\n\n  private _nearestPointFromCache(key: string) {\n    return typeof this._i32idx[ key ] === 'number' ? this._i32idx[ key ] : -1;\n  }\n\n  private _getNearestIndex(colorDistanceCalculator: AbstractDistanceCalculator, point: Point) {\n    let idx = this._nearestPointFromCache('' + point.uint32);\n    if (idx >= 0) return idx;\n\n    let minimalDistance = Number.MAX_VALUE;\n\n    idx = 0;\n    for (let i = 0, l = this._pointArray.length; i < l; i++) {\n      const p = this._pointArray[ i ];\n      const distance = colorDistanceCalculator.calculateRaw(point.r, point.g, point.b, point.a, p.r, p.g, p.b, p.a);\n\n      if (distance < minimalDistance) {\n        minimalDistance = distance;\n        idx = i;\n      }\n    }\n\n    this._i32idx[ point.uint32 ] = idx;\n    return idx;\n  }\n\n  /*\n   public reduce(histogram : ColorHistogram, colors : number) {\n   if (this._pointArray.length > colors) {\n   var idxi32 = histogram.getImportanceSortedColorsIDXI32();\n\n   // quantize histogram to existing palette\n   var keep = [], uniqueColors = 0, idx, pruned = false;\n\n   for (var i = 0, len = idxi32.length; i < len; i++) {\n   // palette length reached, unset all remaining colors (sparse palette)\n   if (uniqueColors >= colors) {\n   this.prunePal(keep);\n   pruned = true;\n   break;\n   } else {\n   idx = this.nearestIndexByUint32(idxi32[i]);\n   if (keep.indexOf(idx) < 0) {\n   keep.push(idx);\n   uniqueColors++;\n   }\n   }\n   }\n\n   if (!pruned) {\n   this.prunePal(keep);\n   }\n   }\n   }\n\n   // TODO: check usage, not tested!\n   public prunePal(keep : number[]) {\n   var colors = this._pointArray.length;\n   for (var colorIndex = colors - 1; colorIndex >= 0; colorIndex--) {\n   if (keep.indexOf(colorIndex) < 0) {\n\n   if(colorIndex + 1 < colors) {\n   this._pointArray[ colorIndex ] = this._pointArray [ colors - 1 ];\n   }\n   --colors;\n   //this._pointArray[colorIndex] = null;\n   }\n   }\n   console.log(\"colors pruned: \" + (this._pointArray.length - colors));\n   this._pointArray.length = colors;\n   this._i32idx = {};\n   }\n   */\n\n  // TODO: group very low lum and very high lum colors\n  // TODO: pass custom sort order\n  // TODO: sort criteria function should be placed to HueStats class\n  sort() {\n    this._i32idx = {};\n    this._pointArray.sort((a: Point, b: Point) => {\n      const hslA = rgb2hsl(a.r, a.g, a.b);\n      const hslB = rgb2hsl(b.r, b.g, b.b);\n\n      // sort all grays + whites together\n      const hueA = (a.r === a.g && a.g === a.b) ? 0 : 1 + hueGroup(hslA.h, hueGroups);\n      const hueB = (b.r === b.g && b.g === b.b) ? 0 : 1 + hueGroup(hslB.h, hueGroups);\n      /*\n       var hueA = (a.r === a.g && a.g === a.b) ? 0 : 1 + Utils.hueGroup(hslA.h, hueGroups);\n       var hueB = (b.r === b.g && b.g === b.b) ? 0 : 1 + Utils.hueGroup(hslB.h, hueGroups);\n       */\n\n      const hueDiff = hueB - hueA;\n      if (hueDiff) return -hueDiff;\n\n      /*\n       var lumDiff = Utils.lumGroup(+hslB.l.toFixed(2)) - Utils.lumGroup(+hslA.l.toFixed(2));\n       if (lumDiff) return -lumDiff;\n       */\n      const lA = a.getLuminosity(true);\n      const lB = b.getLuminosity(true);\n\n      if (lB - lA !== 0) return lB - lA;\n\n      const satDiff = ((hslB.s * 100) | 0) - ((hslA.s * 100) | 0);\n      if (satDiff) return -satDiff;\n\n      return 0;\n    });\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * hueStatistics.ts - part of Image Quantization Library\n */\nimport { rgb2hsl } from '../conversion/rgb2hsl';\nimport { hueGroup } from './palette';\n\nclass HueGroup {\n  num = 0;\n  cols: number[] = [];\n}\n\nexport class HueStatistics {\n  private _numGroups: number;\n  private _minCols: number;\n  private _stats: HueGroup[];\n  private _groupsFull: number;\n\n  constructor(numGroups: number, minCols: number) {\n    this._numGroups = numGroups;\n    this._minCols = minCols;\n    this._stats = [];\n\n    for (let i = 0; i <= numGroups; i++) {\n      this._stats[ i ] = new HueGroup();\n    }\n\n    this._groupsFull = 0;\n  }\n\n  check(i32: number) {\n    if (this._groupsFull === this._numGroups + 1) {\n      this.check = function () {\n      };\n    }\n\n    const r = (i32 & 0xff);\n    const g = (i32 >>> 8) & 0xff;\n    const b = (i32 >>> 16) & 0xff;\n    const hg = (r === g && g === b) ? 0 : 1 + hueGroup(rgb2hsl(r, g, b).h, this._numGroups);\n    const gr = this._stats[ hg ];\n    const min = this._minCols;\n\n    gr.num++;\n\n    if (gr.num > min) {\n      return;\n    }\n    if (gr.num === min) {\n      this._groupsFull++;\n    }\n\n    if (gr.num <= min) {\n      this._stats[ hg ].cols.push(i32);\n    }\n  }\n\n  injectIntoDictionary(histG: { [key: string ]: number }) {\n    for (let i = 0; i <= this._numGroups; i++) {\n      if (this._stats[ i ].num <= this._minCols) {\n        this._stats[ i ].cols.forEach((col: number) => {\n          if (!histG[ col ]) {\n            histG[ col ] = 1;\n          } else {\n            histG[ col ]++;\n          }\n        });\n      }\n    }\n  }\n\n  injectIntoArray(histG: string[]) {\n    for (let i = 0; i <= this._numGroups; i++) {\n      if (this._stats[ i ].num <= this._minCols) {\n        this._stats[ i ].cols.forEach((col: any) => { // tslint:disable-line:no-any\n          if (histG.indexOf(col) === -1) {\n            histG.push(col);\n          }\n        });\n      }\n    }\n  }\n}\n","export class ProgressTracker {\n  static readonly steps = 100;\n\n  progress: number;\n\n  private _step: number;\n  private _range: number;\n  private _last: number;\n  private _progressRange: number;\n\n  constructor(valueRange: number, progressRange: number) {\n    this._range = valueRange;\n    this._progressRange = progressRange;\n    this._step = Math.max(1, this._range / (ProgressTracker.steps + 1) | 0);\n    this._last = -this._step;\n    this.progress = 0;\n  }\n\n  shouldNotify(current: number) {\n    if (current - this._last >= this._step) {\n      this._last = current;\n      this.progress = Math.min(this._progressRange * this._last / this._range, this._progressRange);\n      return true;\n    }\n\n    return false;\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\nimport * as arithmetic from './arithmetic';\nimport { HueStatistics } from './hueStatistics';\nimport { Palette } from './palette';\nimport { Point } from './point';\nimport { PointContainer } from './pointContainer';\nimport { ProgressTracker } from './progressTracker';\n\nexport {\n  Point,\n  PointContainer,\n  Palette,\n  HueStatistics,\n  ProgressTracker,\n  arithmetic,\n};\n","/*\n * NeuQuant Neural-Net Quantization Algorithm\n * ------------------------------------------\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\n * the algorithm.\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\n * this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons who\n * receive copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n */\n\n/**\n * @preserve TypeScript port:\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * neuquant.ts - part of Image Quantization Library\n */\n\nimport { Palette } from '../../utils/palette';\nimport { Point } from '../../utils/point';\nimport { PointContainer } from '../../utils/pointContainer';\nimport { AbstractDistanceCalculator } from '../../distance/distanceCalculator';\nimport { AbstractPaletteQuantizer } from '../paletteQuantizer';\nimport { PaletteQuantizerYieldValue } from '../paletteQuantizerYieldValue';\nimport { ProgressTracker } from '../../utils';\n\n// bias for colour values\nconst networkBiasShift = 3;\n\nclass Neuron {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n\n  constructor(defaultValue: number) {\n    this.r = this.g = this.b = this.a = defaultValue;\n  }\n\n  /**\n   * There is a fix in original NEUQUANT by Anthony Dekker (http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)\n   * @example\n   * r = Math.min(255, (neuron.r + (1 << (networkBiasShift - 1))) >> networkBiasShift);\n   */\n  toPoint() {\n    return Point.createByRGBA(this.r >> networkBiasShift, this.g >> networkBiasShift, this.b >> networkBiasShift, this.a >> networkBiasShift);\n  }\n\n  subtract(r: number, g: number, b: number, a: number) {\n    this.r -= r | 0;\n    this.g -= g | 0;\n    this.b -= b | 0;\n    this.a -= a | 0;\n  }\n\n  /*\n   public subtract(r : number, g : number, b : number, a : number) : void {\n   this.r = (-r + this.r) | 0;\n   this.g = (-g + this.g) | 0;\n   this.b = (-b + this.b) | 0;\n   this.a = (-a + this.a) | 0;\n\n   this.r -= r;\n   this.g -= g;\n   this.b -= b;\n   this.a -= a;\n\n   this.r -= r | 0;\n   this.g -= g | 0;\n   this.b -= b | 0;\n   this.a -= a | 0;\n   }\n   */\n}\n\nexport class NeuQuant extends AbstractPaletteQuantizer {\n  /*\n   four primes near 500 - assume no image has a length so large\n   that it is divisible by all four primes\n   */\n  private static readonly _prime1: number = 499;\n  private static readonly _prime2: number = 491;\n  private static readonly _prime3: number = 487;\n  private static readonly _prime4: number = 503;\n  private static readonly _minpicturebytes: number = NeuQuant._prime4;\n\n  // no. of learning cycles\n  private static readonly _nCycles: number = 100;\n\n  // defs for freq and bias\n  private static readonly _initialBiasShift: number = 16;\n\n  // bias for fractions\n  private static readonly _initialBias: number = (1 << NeuQuant._initialBiasShift);\n  private static readonly _gammaShift: number = 10;\n\n  // gamma = 1024\n  // TODO: why gamma is never used?\n  // private static _gamma : number     = (1 << NeuQuant._gammaShift);\n  private static readonly _betaShift: number = 10;\n  private static readonly _beta: number = (NeuQuant._initialBias >> NeuQuant._betaShift);\n\n  // beta = 1/1024\n  private static readonly _betaGamma: number = (NeuQuant._initialBias << (NeuQuant._gammaShift - NeuQuant._betaShift));\n\n  /*\n   * for 256 cols, radius starts\n   */\n  private static readonly _radiusBiasShift: number = 6;\n\n  // at 32.0 biased by 6 bits\n  private static readonly _radiusBias: number = 1 << NeuQuant._radiusBiasShift;\n\n  // and decreases by a factor of 1/30 each cycle\n  private static readonly _radiusDecrease: number = 30;\n\n  /* defs for decreasing alpha factor */\n\n  // alpha starts at 1.0\n  private static readonly _alphaBiasShift: number = 10;\n\n  // biased by 10 bits\n  private static readonly _initAlpha: number = (1 << NeuQuant._alphaBiasShift);\n\n  /* radBias and alphaRadBias used for radpower calculation */\n  private static readonly _radBiasShift: number = 8;\n  private static readonly _radBias: number = 1 << NeuQuant._radBiasShift;\n  private static readonly _alphaRadBiasShift: number = NeuQuant._alphaBiasShift + NeuQuant._radBiasShift;\n  private static readonly _alphaRadBias: number = 1 << NeuQuant._alphaRadBiasShift;\n\n  private _pointArray: Point[];\n  private readonly _networkSize: number;\n  private _network!: Neuron[];\n\n  /** sampling factor 1..30 */\n  private readonly _sampleFactor!: number;\n  private _radPower!: number[];\n\n  // bias and freq arrays for learning\n  private _freq!: number[];\n\n  /* for network lookup - really 256 */\n  private _bias!: number[];\n  private readonly _distance: AbstractDistanceCalculator;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator, colors = 256) {\n    super();\n    this._distance = colorDistanceCalculator;\n    this._pointArray = [];\n    this._sampleFactor = 1;\n    this._networkSize = colors;\n\n    this._distance.setWhitePoint(255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift);\n  }\n\n  sample(pointContainer: PointContainer) {\n    this._pointArray = this._pointArray.concat(pointContainer.getPointArray());\n  }\n\n  * quantize(): IterableIterator<PaletteQuantizerYieldValue> {\n    this._init();\n\n    yield * this._learn();\n\n    yield {\n      palette: this._buildPalette(),\n      progress: 100,\n    };\n  }\n\n  private _init() {\n    this._freq = [];\n    this._bias = [];\n    this._radPower = [];\n    this._network = [];\n    for (let i = 0; i < this._networkSize; i++) {\n      this._network[ i ] = new Neuron((i << (networkBiasShift + 8)) / this._networkSize | 0);\n\n      // 1/this._networkSize\n      this._freq[ i ] = NeuQuant._initialBias / this._networkSize | 0;\n      this._bias[ i ] = 0;\n    }\n  }\n\n  /**\n   * Main Learning Loop\n   */\n  private * _learn() {\n    let sampleFactor = this._sampleFactor;\n    const pointsNumber = this._pointArray.length;\n    if (pointsNumber < NeuQuant._minpicturebytes) sampleFactor = 1;\n\n    const alphadec = 30 + (sampleFactor - 1) / 3 | 0;\n    const pointsToSample = pointsNumber / sampleFactor | 0;\n\n    let delta = pointsToSample / NeuQuant._nCycles | 0;\n    let alpha = NeuQuant._initAlpha;\n    let radius = (this._networkSize >> 3) * NeuQuant._radiusBias;\n\n    let rad = radius >> NeuQuant._radiusBiasShift;\n    if (rad <= 1) rad = 0;\n\n    for (let i = 0; i < rad; i++) {\n      this._radPower[ i ] = alpha * (((rad * rad - i * i) * NeuQuant._radBias) / (rad * rad)) >>> 0;\n    }\n\n    let step: number;\n    if (pointsNumber < NeuQuant._minpicturebytes) {\n      step = 1;\n    } else if (pointsNumber % NeuQuant._prime1 !== 0) {\n      step = NeuQuant._prime1;\n    } else if ((pointsNumber % NeuQuant._prime2) !== 0) {\n      step = NeuQuant._prime2;\n    } else if ((pointsNumber % NeuQuant._prime3) !== 0) {\n      step = NeuQuant._prime3;\n    } else {\n      step = NeuQuant._prime4;\n    }\n\n    const tracker = new ProgressTracker(pointsToSample, 99);\n    for (let i = 0, pointIndex = 0; i < pointsToSample;) {\n      if (tracker.shouldNotify(i)) {\n        yield {\n          progress: tracker.progress,\n        };\n      }\n\n      const point = this._pointArray[ pointIndex ];\n      const b = point.b << networkBiasShift;\n      const g = point.g << networkBiasShift;\n      const r = point.r << networkBiasShift;\n      const a = point.a << networkBiasShift;\n      const neuronIndex = this._contest(b, g, r, a);\n\n      this._alterSingle(alpha, neuronIndex, b, g, r, a);\n      if (rad !== 0) this._alterNeighbour(rad, neuronIndex, b, g, r, a);\n\n      /* alter neighbours */\n      pointIndex += step;\n      if (pointIndex >= pointsNumber) pointIndex -= pointsNumber;\n      i++;\n\n      if (delta === 0) delta = 1;\n\n      if (i % delta === 0) {\n        alpha -= (alpha / alphadec) | 0;\n        radius -= (radius / NeuQuant._radiusDecrease) | 0;\n        rad = radius >> NeuQuant._radiusBiasShift;\n\n        if (rad <= 1) rad = 0;\n        for (let j = 0; j < rad; j++) this._radPower[ j ] = alpha * (((rad * rad - j * j) * NeuQuant._radBias) / (rad * rad)) >>> 0;\n      }\n    }\n  }\n\n  private _buildPalette() {\n    const palette = new Palette();\n\n    this._network.forEach(neuron => {\n      palette.add(neuron.toPoint());\n    });\n\n    palette.sort();\n    return palette;\n  }\n\n  /**\n   * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in radpower[|i-j|]\n   */\n  private _alterNeighbour(rad: number, i: number, b: number, g: number, r: number, al: number) {\n    let lo = i - rad;\n    if (lo < -1) lo = -1;\n\n    let hi = i + rad;\n    if (hi > this._networkSize) hi = this._networkSize;\n\n    let j = i + 1;\n    let k = i - 1;\n    let m = 1;\n\n    while (j < hi || k > lo) {\n      const a = this._radPower[ m++ ] / NeuQuant._alphaRadBias;\n      if (j < hi) {\n        const p = this._network[ j++ ];\n        p.subtract(\n          a * (p.r - r),\n          a * (p.g - g),\n          a * (p.b - b),\n          a * (p.a - al),\n        );\n      }\n\n      if (k > lo) {\n        const p = this._network[ k-- ];\n        p.subtract(\n          a * (p.r - r),\n          a * (p.g - g),\n          a * (p.b - b),\n          a * (p.a - al),\n        );\n      }\n    }\n  }\n\n  /**\n   * Move neuron i towards biased (b,g,r) by factor alpha\n   */\n  private _alterSingle(alpha: number, i: number, b: number, g: number, r: number, a: number) {\n    alpha /= NeuQuant._initAlpha;\n\n    /* alter hit neuron */\n    const n = this._network[ i ];\n    n.subtract(\n      alpha * (n.r - r),\n      alpha * (n.g - g),\n      alpha * (n.b - b),\n      alpha * (n.a - a),\n    );\n  }\n\n  /**\n   * Search for biased BGR values\n   * description:\n   *    finds closest neuron (min dist) and updates freq\n   *    finds best neuron (min dist-bias) and returns position\n   *    for frequently chosen neurons, freq[i] is high and bias[i] is negative\n   *    bias[i] = _gamma*((1/this._networkSize)-freq[i])\n   *\n   * Original distance equation:\n   *        dist = abs(dR) + abs(dG) + abs(dB)\n   */\n  private _contest(b: number, g: number, r: number, a: number) {\n    const multiplier = (255 * 4) << networkBiasShift;\n\n    let bestd = ~(1 << 31);\n    let bestbiasd = bestd;\n    let bestpos = -1;\n    let bestbiaspos = bestpos;\n\n    for (let i = 0; i < this._networkSize; i++) {\n      const n = this._network[ i ];\n      const dist = this._distance.calculateNormalized(n, { r, g, b, a }) * multiplier | 0;\n\n      if (dist < bestd) {\n        bestd = dist;\n        bestpos = i;\n      }\n\n      const biasdist = dist - ((this._bias[ i ]) >> (NeuQuant._initialBiasShift - networkBiasShift));\n      if (biasdist < bestbiasd) {\n        bestbiasd = biasdist;\n        bestbiaspos = i;\n      }\n      const betafreq = (this._freq[ i ] >> NeuQuant._betaShift);\n      this._freq[ i ] -= betafreq;\n      this._bias[ i ] += (betafreq << NeuQuant._gammaShift);\n    }\n    this._freq[ bestpos ] += NeuQuant._beta;\n    this._bias[ bestpos ] -= NeuQuant._betaGamma;\n    return bestbiaspos;\n  }\n}\n","/*\n * NeuQuantFloat Neural-Net Quantization Algorithm\n * ------------------------------------------\n *\n * Copyright (c) 1994 Anthony Dekker\n *\n * NEUQUANT Neural-Net quantization algorithm by Anthony Dekker, 1994. See\n * \"Kohonen neural networks for optimal colour quantization\" in \"Network:\n * Computation in Neural Systems\" Vol. 5 (1994) pp 351-367. for a discussion of\n * the algorithm.\n *\n * Any party obtaining a copy of these files from the author, directly or\n * indirectly, is granted, free of charge, a full and unrestricted irrevocable,\n * world-wide, paid up, royalty-free, nonexclusive right and license to deal in\n * this software and documentation files (the \"Software\"), including without\n * limitation the rights to use, copy, modify, merge, publish, distribute,\n * sublicense, and/or sell copies of the Software, and to permit persons who\n * receive copies from any such party to do so, with the only requirement being\n * that this copyright notice remain intact.\n */\n/**\n * @preserve TypeScript port:\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * neuquant.ts - part of Image Quantization Library\n */\nimport { Palette } from '../../utils/palette';\nimport { Point } from '../../utils/point';\nimport { PointContainer } from '../../utils/pointContainer';\nimport { AbstractDistanceCalculator } from '../../distance/distanceCalculator';\nimport { AbstractPaletteQuantizer } from '../paletteQuantizer';\nimport { PaletteQuantizerYieldValue } from '../paletteQuantizerYieldValue';\nimport { ProgressTracker } from '../../utils';\n\n// bias for colour values\nconst networkBiasShift = 3;\n\nclass NeuronFloat {\n  r: number;\n  g: number;\n  b: number;\n  a: number;\n\n  constructor(defaultValue: number) {\n    this.r = this.g = this.b = this.a = defaultValue;\n  }\n\n  /**\n   * There is a fix in original NEUQUANT by Anthony Dekker (http://members.ozemail.com.au/~dekker/NEUQUANT.HTML)\n   * @example\n   * r = Math.min(255, (neuron.r + (1 << (networkBiasShift - 1))) >> networkBiasShift);\n   */\n  toPoint() {\n    return Point.createByRGBA(this.r >> networkBiasShift, this.g >> networkBiasShift, this.b >> networkBiasShift, this.a >> networkBiasShift);\n  }\n\n  subtract(r: number, g: number, b: number, a: number) {\n    this.r -= r;\n    this.g -= g;\n    this.b -= b;\n    this.a -= a;\n  }\n}\n\nexport class NeuQuantFloat extends AbstractPaletteQuantizer {\n  /*\n   four primes near 500 - assume no image has a length so large\n   that it is divisible by all four primes\n   */\n  private static readonly _prime1: number = 499;\n  private static readonly _prime2: number = 491;\n  private static readonly _prime3: number = 487;\n  private static readonly _prime4: number = 503;\n  private static readonly _minpicturebytes: number = NeuQuantFloat._prime4;\n\n  // no. of learning cycles\n  private static readonly _nCycles: number = 100;\n\n  // defs for freq and bias\n  private static readonly _initialBiasShift: number = 16;\n\n  // bias for fractions\n  private static readonly _initialBias: number = (1 << NeuQuantFloat._initialBiasShift);\n  private static readonly _gammaShift: number = 10;\n\n  // gamma = 1024\n  // TODO: why gamma is never used?\n  // private static _gamma : number     = (1 << NeuQuantFloat._gammaShift);\n  private static readonly _betaShift: number = 10;\n  private static readonly _beta: number = (NeuQuantFloat._initialBias >> NeuQuantFloat._betaShift);\n\n  // beta = 1/1024\n  private static readonly _betaGamma: number = (NeuQuantFloat._initialBias << (NeuQuantFloat._gammaShift - NeuQuantFloat._betaShift));\n\n  /*\n   * for 256 cols, radius starts\n   */\n  private static readonly _radiusBiasShift: number = 6;\n\n  // at 32.0 biased by 6 bits\n  private static readonly _radiusBias: number = 1 << NeuQuantFloat._radiusBiasShift;\n\n  // and decreases by a factor of 1/30 each cycle\n  private static readonly _radiusDecrease: number = 30;\n\n  /* defs for decreasing alpha factor */\n\n  // alpha starts at 1.0\n  private static readonly _alphaBiasShift: number = 10;\n\n  // biased by 10 bits\n  private static readonly _initAlpha: number = (1 << NeuQuantFloat._alphaBiasShift);\n\n  /* radBias and alphaRadBias used for radpower calculation */\n  private static readonly _radBiasShift: number = 8;\n  private static readonly _radBias: number = 1 << NeuQuantFloat._radBiasShift;\n  private static readonly _alphaRadBiasShift: number = NeuQuantFloat._alphaBiasShift + NeuQuantFloat._radBiasShift;\n  private static readonly _alphaRadBias: number = 1 << NeuQuantFloat._alphaRadBiasShift;\n\n  private _pointArray!: Point[];\n  private readonly _networkSize!: number;\n  private _network!: NeuronFloat[];\n\n  /** sampling factor 1..30 */\n  private readonly _sampleFactor!: number;\n  private _radPower!: number[];\n\n  // bias and freq arrays for learning\n  private _freq!: number[];\n\n  /* for network lookup - really 256 */\n  private _bias!: number[];\n  private readonly _distance: AbstractDistanceCalculator;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator, colors = 256) {\n    super();\n    this._distance = colorDistanceCalculator;\n    this._pointArray = [];\n    this._sampleFactor = 1;\n    this._networkSize = colors;\n\n    this._distance.setWhitePoint(255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift, 255 << networkBiasShift);\n  }\n\n  sample(pointContainer: PointContainer) {\n    this._pointArray = this._pointArray.concat(pointContainer.getPointArray());\n  }\n\n  * quantize() {\n    this._init();\n    yield * this._learn();\n\n    yield {\n      palette: this._buildPalette(),\n      progress: 100,\n    };\n  }\n\n  private _init() {\n    this._freq = [];\n    this._bias = [];\n    this._radPower = [];\n    this._network = [];\n    for (let i = 0; i < this._networkSize; i++) {\n      this._network[ i ] = new NeuronFloat((i << (networkBiasShift + 8)) / this._networkSize);\n\n      // 1/this._networkSize\n      this._freq[ i ] = NeuQuantFloat._initialBias / this._networkSize;\n      this._bias[ i ] = 0;\n    }\n  }\n\n  /**\n   * Main Learning Loop\n   */\n  private * _learn(): IterableIterator<PaletteQuantizerYieldValue> {\n    let sampleFactor = this._sampleFactor;\n\n    const pointsNumber = this._pointArray.length;\n    if (pointsNumber < NeuQuantFloat._minpicturebytes) sampleFactor = 1;\n\n    const alphadec = 30 + (sampleFactor - 1) / 3;\n    const pointsToSample = pointsNumber / sampleFactor;\n\n    let delta = pointsToSample / NeuQuantFloat._nCycles | 0;\n    let alpha = NeuQuantFloat._initAlpha;\n    let radius = (this._networkSize >> 3) * NeuQuantFloat._radiusBias;\n\n    let rad = radius >> NeuQuantFloat._radiusBiasShift;\n    if (rad <= 1) rad = 0;\n\n    for (let i = 0; i < rad; i++) {\n      this._radPower[ i ] = alpha * (((rad * rad - i * i) * NeuQuantFloat._radBias) / (rad * rad));\n    }\n\n    let step: number;\n    if (pointsNumber < NeuQuantFloat._minpicturebytes) {\n      step = 1;\n    } else if (pointsNumber % NeuQuantFloat._prime1 !== 0) {\n      step = NeuQuantFloat._prime1;\n    } else if ((pointsNumber % NeuQuantFloat._prime2) !== 0) {\n      step = NeuQuantFloat._prime2;\n    } else if ((pointsNumber % NeuQuantFloat._prime3) !== 0) {\n      step = NeuQuantFloat._prime3;\n    } else {\n      step = NeuQuantFloat._prime4;\n    }\n\n    const tracker = new ProgressTracker(pointsToSample, 99);\n    for (let i = 0, pointIndex = 0; i < pointsToSample;) {\n      if (tracker.shouldNotify(i)) {\n        yield {\n          progress: tracker.progress,\n        };\n      }\n\n      const point = this._pointArray[ pointIndex ];\n      const b = point.b << networkBiasShift;\n      const g = point.g << networkBiasShift;\n      const r = point.r << networkBiasShift;\n      const a = point.a << networkBiasShift;\n      const neuronIndex = this._contest(b, g, r, a);\n\n      this._alterSingle(alpha, neuronIndex, b, g, r, a);\n      if (rad !== 0) this._alterNeighbour(rad, neuronIndex, b, g, r, a);\n\n      /* alter neighbours */\n      pointIndex += step;\n      if (pointIndex >= pointsNumber) pointIndex -= pointsNumber;\n      i++;\n\n      if (delta === 0) delta = 1;\n\n      if (i % delta === 0) {\n        alpha -= (alpha / alphadec);\n        radius -= (radius / NeuQuantFloat._radiusDecrease);\n        rad = radius >> NeuQuantFloat._radiusBiasShift;\n\n        if (rad <= 1) rad = 0;\n        for (let j = 0; j < rad; j++) this._radPower[ j ] = alpha * (((rad * rad - j * j) * NeuQuantFloat._radBias) / (rad * rad));\n      }\n    }\n\n  }\n\n  private _buildPalette() {\n    const palette = new Palette();\n\n    this._network.forEach(neuron => {\n      palette.add(neuron.toPoint());\n    });\n\n    palette.sort();\n    return palette;\n  }\n\n  /**\n   * Move adjacent neurons by precomputed alpha*(1-((i-j)^2/[r]^2)) in radpower[|i-j|]\n   */\n  private _alterNeighbour(rad: number, i: number, b: number, g: number, r: number, al: number) {\n    let lo = i - rad;\n    if (lo < -1) lo = -1;\n\n    let hi = i + rad;\n    if (hi > this._networkSize) hi = this._networkSize;\n\n    let j = i + 1;\n    let k = i - 1;\n    let m = 1;\n\n    while (j < hi || k > lo) {\n      const a = this._radPower[ m++ ] / NeuQuantFloat._alphaRadBias;\n      if (j < hi) {\n        const p = this._network[ j++ ];\n        p.subtract(\n          a * (p.r - r),\n          a * (p.g - g),\n          a * (p.b - b),\n          a * (p.a - al),\n        );\n      }\n\n      if (k > lo) {\n        const p = this._network[ k-- ];\n        p.subtract(\n          a * (p.r - r),\n          a * (p.g - g),\n          a * (p.b - b),\n          a * (p.a - al),\n        );\n      }\n    }\n  }\n\n  /**\n   * Move neuron i towards biased (b,g,r) by factor alpha\n   */\n  private _alterSingle(alpha: number, i: number, b: number, g: number, r: number, a: number) {\n    alpha /= NeuQuantFloat._initAlpha;\n\n    /* alter hit neuron */\n    const n = this._network[ i ];\n    n.subtract(\n      alpha * (n.r - r),\n      alpha * (n.g - g),\n      alpha * (n.b - b),\n      alpha * (n.a - a),\n    );\n  }\n\n  /**\n   * Search for biased BGR values\n   * description:\n   *    finds closest neuron (min dist) and updates freq\n   *    finds best neuron (min dist-bias) and returns position\n   *    for frequently chosen neurons, freq[i] is high and bias[i] is negative\n   *    bias[i] = _gamma*((1/this._networkSize)-freq[i])\n   *\n   * Original distance equation:\n   *        dist = abs(dR) + abs(dG) + abs(dB)\n   */\n  private _contest(b: number, g: number, r: number, al: number) {\n    const multiplier = (255 * 4) << networkBiasShift;\n\n    let bestd = ~(1 << 31);\n    let bestbiasd = bestd;\n    let bestpos = -1;\n    let bestbiaspos = bestpos;\n\n    for (let i = 0; i < this._networkSize; i++) {\n      const n = this._network[ i ];\n      const dist = this._distance.calculateNormalized(n, { r, g, b, a: al }) * multiplier;\n\n      if (dist < bestd) {\n        bestd = dist;\n        bestpos = i;\n      }\n\n      const biasdist = dist - ((this._bias[ i ]) >> (NeuQuantFloat._initialBiasShift - networkBiasShift));\n      if (biasdist < bestbiasd) {\n        bestbiasd = biasdist;\n        bestbiaspos = i;\n      }\n      const betafreq = (this._freq[ i ] >> NeuQuantFloat._betaShift);\n      this._freq[ i ] -= betafreq;\n      this._bias[ i ] += (betafreq << NeuQuantFloat._gammaShift);\n    }\n    this._freq[ bestpos ] += NeuQuantFloat._beta;\n    this._bias[ bestpos ] -= NeuQuantFloat._betaGamma;\n    return bestbiaspos;\n  }\n}\n","/*\n * Copyright (c) 2015, Leon Sorokin\n * All rights reserved. (MIT Licensed)\n *\n * ColorHistogram.js - an image quantization lib\n */\n\n/**\n * @preserve TypeScript port:\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * colorHistogram.ts - part of Image Quantization Library\n */\nimport { HueStatistics } from '../../utils/hueStatistics';\nimport { PointContainer } from '../../utils/pointContainer';\nimport { stableSort } from '../../utils/arithmetic';\n\ninterface Box {\n  x: number;\n  y: number;\n  h: number;\n  w: number;\n}\n\nexport class ColorHistogram {\n  private static _boxSize = [64, 64];\n  private static _boxPixels = 2;\n  private static _hueGroups = 10;\n\n  // 1 = by global population, 2 = subregion population threshold\n  private _method: number;\n\n  // HueStatistics instance\n  private _hueStats: HueStatistics;\n\n  private _histogram: { [color: string]: number };\n\n  // # of highest-frequency colors to start with for palette reduction\n  private _initColors: number;\n\n  // if > 0, enables hues stats and min-color retention per group\n  private _minHueCols: number;\n\n  constructor(method: number, colors: number) {\n    // 1 = by global population, 2 = subregion population threshold\n    this._method = method;\n\n    // if > 0, enables hues stats and min-color retention per group\n    this._minHueCols = colors << 2;// opts.minHueCols || 0;\n\n    // # of highest-frequency colors to start with for palette reduction\n    this._initColors = colors << 2;\n\n    // HueStatistics instance\n    this._hueStats = new HueStatistics(ColorHistogram._hueGroups, this._minHueCols);\n\n    this._histogram = Object.create(null); // tslint:disable-line:no-null-keyword\n  }\n\n  sample(pointContainer: PointContainer) {\n    switch (this._method) {\n      case 1:\n        this._colorStats1D(pointContainer);\n        break;\n      case 2:\n        this._colorStats2D(pointContainer);\n        break;\n    }\n  }\n\n  getImportanceSortedColorsIDXI32() {\n    // TODO: fix typing issue in stableSort func\n    const sorted = stableSort(Object.keys(this._histogram), (a, b) => this._histogram[ b ] - this._histogram[ a ]);\n    if (sorted.length === 0) {\n      return [];\n    }\n\n    let idxi32: string[];\n    switch (this._method) {\n      case 1:\n        const initialColorsLimit = Math.min(sorted.length, this._initColors);\n        const last = sorted[ initialColorsLimit - 1 ];\n        const freq = this._histogram[ last ];\n\n        idxi32 = sorted.slice(0, initialColorsLimit);\n\n        // add any cut off colors with same freq as last\n        let pos = initialColorsLimit;\n        const len = sorted.length;\n        while (pos < len && this._histogram[ sorted[ pos ] ] === freq) {\n          idxi32.push(sorted[ pos++ ]);\n        }\n\n        // inject min huegroup colors\n        this._hueStats.injectIntoArray(idxi32);\n        break;\n\n      case 2:\n        idxi32 = sorted;\n        break;\n\n      default:\n        // TODO: rethink errors\n        throw new Error('Incorrect method');\n    }\n\n    // int32-ify values\n    return idxi32.map(function (v: string) { // TODO: why no-inferred-types rule cannot find this (v: string) ?\n      return +v;\n    });\n  }\n\n  // global top-population\n  private _colorStats1D(pointContainer: PointContainer) {\n    const histG = this._histogram;\n    const pointArray = pointContainer.getPointArray();\n    const len = pointArray.length;\n\n    for (let i = 0; i < len; i++) {\n      const col = pointArray[ i ].uint32;\n\n      // collect hue stats\n      this._hueStats.check(col);\n\n      if (col in histG) {\n        histG[ col ]++;\n      } else {\n        histG[ col ] = 1;\n      }\n    }\n  }\n\n  // population threshold within subregions\n  // FIXME: this can over-reduce (few/no colors same?), need a way to keep\n  // important colors that dont ever reach local thresholds (gradients?)\n  private _colorStats2D(pointContainer: PointContainer) {\n    const width = pointContainer.getWidth();\n    const height = pointContainer.getHeight();\n    const pointArray = pointContainer.getPointArray();\n\n    const boxW = ColorHistogram._boxSize[ 0 ];\n    const boxH = ColorHistogram._boxSize[ 1 ];\n    const area = boxW * boxH;\n    const boxes = this._makeBoxes(width, height, boxW, boxH);\n    const histG = this._histogram;\n\n    boxes.forEach(box => {\n      let effc = Math.round((box.w * box.h) / area) * ColorHistogram._boxPixels;\n      if (effc < 2) effc = 2;\n\n      const histL: { [key: string ]: number } = {};\n      this._iterateBox(box, width, (i) => {\n        const col = pointArray[ i ].uint32;\n\n        // collect hue stats\n        this._hueStats.check(col);\n\n        if (col in histG) {\n          histG[ col ]++;\n        } else if (col in histL) {\n          if (++histL[ col ] >= effc) {\n            histG[ col ] = histL[ col ];\n          }\n        } else {\n          histL[ col ] = 1;\n        }\n      });\n    });\n\n    // inject min huegroup colors\n    this._hueStats.injectIntoDictionary(histG);\n\n  }\n\n  // iterates @bbox within a parent rect of width @wid; calls @fn, passing index within parent\n  private _iterateBox(bbox: Box, wid: number, fn: (i: number) => void) {\n    const b = bbox;\n    const i0 = b.y * wid + b.x;\n    const i1 = (b.y + b.h - 1) * wid + (b.x + b.w - 1);\n    const incr = wid - b.w + 1;\n\n    let cnt = 0;\n    let i = i0;\n\n    do {\n      fn.call(this, i);\n      i += (++cnt % b.w === 0) ? incr : 1;\n    } while (i <= i1);\n  }\n\n  /**\n   *    partitions a rectangle of width x height into\n   *    array of boxes stepX x stepY (or less)\n   */\n  private _makeBoxes(width: number, height: number, stepX: number, stepY: number) {\n    const wrem = width % stepX;\n    const  hrem = height % stepY;\n    const xend = width - wrem;\n    const yend = height - hrem;\n    const boxesArray: Box[] = [];\n\n    for (let y = 0; y < height; y += stepY) {\n      for (let x = 0; x < width; x += stepX) {\n        boxesArray.push({ x, y, w: (x === xend ? wrem : stepX), h: (y === yend ? hrem : stepY) });\n      }\n    }\n\n    return boxesArray;\n  }\n\n}\n","/*\n * Copyright (c) 2015, Leon Sorokin\n * All rights reserved. (MIT Licensed)\n *\n * RGBQuant.js - an image quantization lib\n */\n\n/**\n * @preserve TypeScript port:\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * rgbquant.ts - part of Image Quantization Library\n */\n\nimport { Palette } from '../../utils/palette';\nimport { Point } from '../../utils/point';\nimport { PointContainer } from '../../utils/pointContainer';\nimport { AbstractDistanceCalculator } from '../../distance/distanceCalculator';\nimport { ColorHistogram } from './colorHistogram';\nimport { AbstractPaletteQuantizer } from '../paletteQuantizer';\nimport { PaletteQuantizerYieldValue } from '../paletteQuantizerYieldValue';\nimport { stableSort } from '../../utils/arithmetic';\nimport { ProgressTracker } from '../../utils';\n\nclass RemovedColor {\n  readonly index: number;\n  readonly color: Point;\n  readonly distance: number;\n\n  constructor(index: number, color: Point, distance: number) {\n    this.index = index;\n    this.color = color;\n    this.distance = distance;\n  }\n}\n\n// TODO: make input/output image and input/output palettes with instances of class Point only!\nexport class RGBQuant extends AbstractPaletteQuantizer {\n  // desired final palette size\n  private readonly _colors: number;\n\n  // color-distance threshold for initial reduction pass\n  private readonly _initialDistance: number;\n\n  // subsequent passes threshold\n  private readonly _distanceIncrement: number;\n\n  // accumulated histogram\n  private readonly _histogram: ColorHistogram;\n  private readonly _distance: AbstractDistanceCalculator;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator, colors = 256, method = 2) {\n    super();\n    this._distance = colorDistanceCalculator;\n    // desired final palette size\n    this._colors = colors;\n\n    // histogram to accumulate\n    this._histogram = new ColorHistogram(method, colors);\n\n    this._initialDistance = 0.01;\n    this._distanceIncrement = 0.005;\n  }\n\n  // gathers histogram info\n  sample(image: PointContainer) {\n    /*\n     var pointArray = image.getPointArray(), max = [0, 0, 0, 0], min = [255, 255, 255, 255];\n\n     for (var i = 0, l = pointArray.length; i < l; i++) {\n     var color = pointArray[i];\n     for (var componentIndex = 0; componentIndex < 4; componentIndex++) {\n     if (max[componentIndex] < color.rgba[componentIndex]) max[componentIndex] = color.rgba[componentIndex];\n     if (min[componentIndex] > color.rgba[componentIndex]) min[componentIndex] = color.rgba[componentIndex];\n     }\n     }\n     var rd = max[0] - min[0], gd = max[1] - min[1], bd = max[2] - min[2], ad = max[3] - min[3];\n     this._distance.setWhitePoint(rd, gd, bd, ad);\n\n     this._initialDistance = (Math.sqrt(rd * rd + gd * gd + bd * bd + ad * ad) / Math.sqrt(255 * 255 + 255 * 255 + 255 * 255)) * 0.01;\n     */\n\n    this._histogram.sample(image);\n  }\n\n  // reduces histogram to palette, remaps & memoizes reduced colors\n  * quantize() {\n    const idxi32 = this._histogram.getImportanceSortedColorsIDXI32();\n    if (idxi32.length === 0) {\n      throw new Error('No colors in image');\n    }\n\n    yield * this._buildPalette(idxi32);\n  }\n\n  // reduces similar colors from an importance-sorted Uint32 rgba array\n  private * _buildPalette(idxi32: number[]): IterableIterator<PaletteQuantizerYieldValue> {\n    // reduce histogram to create initial palette\n    // build full rgb palette\n    const palette = new Palette();\n    const colorArray = palette.getPointContainer().getPointArray();\n    const usageArray = new Array(idxi32.length); // tslint:disable-line:prefer-array-literal\n\n    for (let i = 0; i < idxi32.length; i++) {\n      colorArray.push(Point.createByUint32(idxi32[ i ]));\n      usageArray[ i ] = 1;\n    }\n\n    const len = colorArray.length;\n    const memDist: RemovedColor[] = [];\n\n    let palLen = len;\n    let thold = this._initialDistance;\n\n    // palette already at or below desired length\n    const tracker = new ProgressTracker(palLen - this._colors, 99);\n    while (palLen > this._colors) {\n      memDist.length = 0;\n\n      // iterate palette\n      for (let i = 0; i < len; i++) {\n        if (tracker.shouldNotify(len - palLen)) {\n          yield {\n            progress: tracker.progress,\n          };\n        }\n\n        if (usageArray[ i ] === 0) continue;\n        const pxi = colorArray[ i ];\n        // if (!pxi) continue;\n\n        for (let j = i + 1; j < len; j++) {\n          if (usageArray[ j ] === 0) continue;\n          const pxj = colorArray[ j ];\n          // if (!pxj) continue;\n\n          const dist = this._distance.calculateNormalized(pxi, pxj);\n          if (dist < thold) {\n            // store index,rgb,dist\n            memDist.push(new RemovedColor(j, pxj, dist));\n            usageArray[ j ] = 0;\n            palLen--;\n          }\n        }\n      }\n      // palette reduction pass\n      // console.log(\"palette length: \" + palLen);\n\n      // if palette is still much larger than target, increment by larger initDist\n      thold += (palLen > this._colors * 3) ? this._initialDistance : this._distanceIncrement;\n    }\n\n    // if palette is over-reduced, re-add removed colors with largest distances from last round\n    if (palLen < this._colors) {\n      // sort descending\n      stableSort(memDist, function (a: RemovedColor, b: RemovedColor) {\n        return b.distance - a.distance;\n      });\n\n      let k = 0;\n      while (palLen < this._colors && k < memDist.length) {\n        const removedColor = memDist[ k ];\n        // re-inject rgb into final palette\n        usageArray[ removedColor.index ] = 1;\n        palLen++;\n        k++;\n      }\n    }\n\n    let colors = colorArray.length;\n    for (let colorIndex = colors - 1; colorIndex >= 0; colorIndex--) {\n      if (usageArray[ colorIndex ] === 0) {\n        if (colorIndex !== colors - 1) {\n          colorArray[ colorIndex ] = colorArray[ colors - 1 ];\n        }\n        --colors;\n      }\n    }\n    colorArray.length = colors;\n\n    palette.sort();\n\n    yield {\n      palette,\n      progress: 100,\n    };\n  }\n\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * wuQuant.ts - part of Image Quantization Library\n */\nimport { Palette } from '../../utils/palette';\nimport { Point } from '../../utils/point';\nimport { PointContainer } from '../../utils/pointContainer';\nimport { AbstractDistanceCalculator } from '../../distance/distanceCalculator';\nimport { AbstractPaletteQuantizer } from '../paletteQuantizer';\nimport { PaletteQuantizerYieldValue } from '../paletteQuantizerYieldValue';\nimport { ProgressTracker } from '../../utils';\n\nfunction createArray1D(dimension1: number) {\n  const a: number[] = [];\n  for (let k = 0; k < dimension1; k++) {\n    a[ k ] = 0;\n  }\n  return a;\n}\n\nfunction createArray4D(dimension1: number, dimension2: number, dimension3: number, dimension4: number): number[][][][] {\n  const a = new Array(dimension1);\n  for (let i = 0; i < dimension1; i++) {\n    a[ i ] = new Array(dimension2);\n    for (let j = 0; j < dimension2; j++) {\n      a[ i ][ j ] = new Array(dimension3);\n      for (let k = 0; k < dimension3; k++) {\n        a[ i ][ j ][ k ] = new Array(dimension4);\n        for (let l = 0; l < dimension4; l++) {\n          a[ i ][ j ][ k ][ l ] = 0;\n        }\n      }\n    }\n  }\n  return a;\n}\n\nfunction createArray3D(dimension1: number, dimension2: number, dimension3: number): number[][][] {\n  const a = new Array(dimension1);\n  for (let i = 0; i < dimension1; i++) {\n    a[ i ] = new Array(dimension2);\n    for (let j = 0; j < dimension2; j++) {\n      a[ i ][ j ] = new Array(dimension3);\n      for (let k = 0; k < dimension3; k++) {\n        a[ i ][ j ][ k ] = 0;\n      }\n    }\n  }\n  return a;\n}\n\nfunction fillArray3D<T>(a: T[][][], dimension1: number, dimension2: number, dimension3: number, value: T) {\n  for (let i = 0; i < dimension1; i++) {\n    a[ i ] = [];\n    for (let j = 0; j < dimension2; j++) {\n      a[ i ][ j ] = [];\n      for (let k = 0; k < dimension3; k++) {\n        a[ i ][ j ][ k ] = value;\n      }\n    }\n  }\n}\n\nfunction fillArray1D<T>(a: T[], dimension1: number, value: T) {\n  for (let i = 0; i < dimension1; i++) {\n    a[ i ] = value;\n  }\n}\n\nexport class WuColorCube {\n  redMinimum!: number;\n  redMaximum!: number;\n  greenMinimum!: number;\n  greenMaximum!: number;\n  blueMinimum!: number;\n  blueMaximum!: number;\n  volume!: number;\n  alphaMinimum!: number;\n  alphaMaximum!: number;\n}\n\nexport class WuQuant extends AbstractPaletteQuantizer {\n\n  private static readonly _alpha = 3;\n  private static readonly _red = 2;\n  private static readonly _green = 1;\n  private static readonly _blue = 0;\n\n  private _reds!: number[];\n  private _greens!: number[];\n  private _blues!: number[];\n  private _alphas!: number[];\n  private _sums!: number[];\n\n  private _weights!: number[][][][];\n  private _momentsRed!: number[][][][];\n  private _momentsGreen!: number[][][][];\n  private _momentsBlue!: number[][][][];\n  private _momentsAlpha!: number[][][][];\n  private _moments!: number[][][][];\n  private _table!: number[];\n  private _pixels!: Point[];\n\n  private _cubes!: WuColorCube[];\n  private _colors!: number;\n\n  private _significantBitsPerChannel!: number;\n  private _maxSideIndex!: number;\n  private _alphaMaxSideIndex!: number;\n  private _sideSize!: number;\n  private _alphaSideSize!: number;\n\n  private readonly _distance: AbstractDistanceCalculator;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator, colors = 256, significantBitsPerChannel = 5) {\n    super();\n    this._distance = colorDistanceCalculator;\n    this._setQuality(significantBitsPerChannel);\n    this._initialize(colors);\n  }\n\n  sample(image: PointContainer) {\n    const pointArray = image.getPointArray();\n\n    for (let i = 0, l = pointArray.length; i < l; i++) {\n      this._addColor(pointArray[ i ]);\n    }\n\n    this._pixels = this._pixels.concat(pointArray);\n  }\n\n  * quantize() {\n    yield * this._preparePalette();\n\n    const palette = new Palette();\n\n    // generates palette\n    for (let paletteIndex = 0; paletteIndex < this._colors; paletteIndex++) {\n      if (this._sums[ paletteIndex ] > 0) {\n        const sum = this._sums[ paletteIndex ];\n        const r = this._reds[ paletteIndex ] / sum;\n        const g = this._greens[ paletteIndex ] / sum;\n        const b = this._blues[ paletteIndex ] / sum;\n        const a = this._alphas[ paletteIndex ] / sum;\n\n        const color = Point.createByRGBA(r | 0, g | 0, b | 0, a | 0);\n        palette.add(color);\n      }\n    }\n\n    palette.sort();\n\n    yield {\n      palette,\n      progress: 100,\n    };\n  }\n\n  private * _preparePalette() {\n    // preprocess the colors\n    yield * this._calculateMoments();\n\n    let next = 0;\n    const volumeVariance = createArray1D(this._colors);\n\n    // processes the cubes\n    for (let cubeIndex = 1; cubeIndex < this._colors; ++cubeIndex) {\n      // if cut is possible; make it\n      if (this._cut(this._cubes[ next ], this._cubes[ cubeIndex ])) {\n        volumeVariance[ next ] = this._cubes[ next ].volume > 1 ? this._calculateVariance(this._cubes[ next ]) : 0.0;\n        volumeVariance[ cubeIndex ] = this._cubes[ cubeIndex ].volume > 1 ? this._calculateVariance(this._cubes[ cubeIndex ]) : 0.0;\n      } else {\n        // the cut was not possible, revert the index\n        volumeVariance[ next ] = 0.0;\n        cubeIndex--;\n      }\n\n      next = 0;\n      let temp = volumeVariance[ 0 ];\n\n      for (let index = 1; index <= cubeIndex; ++index) {\n        if (volumeVariance[ index ] > temp) {\n          temp = volumeVariance[ index ];\n          next = index;\n        }\n      }\n\n      if (temp <= 0.0) {\n        this._colors = cubeIndex + 1;\n        break;\n      }\n    }\n\n    const lookupRed: number[] = [];\n    const lookupGreen: number[] = [];\n    const lookupBlue: number[] = [];\n    const lookupAlpha: number[] = [];\n\n    // precalculates lookup tables\n    for (let k = 0; k < this._colors; ++k) {\n\n      const weight = WuQuant._volume(this._cubes[ k ], this._weights);\n\n      if (weight > 0) {\n        lookupRed[ k ] = (WuQuant._volume(this._cubes[ k ], this._momentsRed) / weight) | 0;\n        lookupGreen[ k ] = (WuQuant._volume(this._cubes[ k ], this._momentsGreen) / weight) | 0;\n        lookupBlue[ k ] = (WuQuant._volume(this._cubes[ k ], this._momentsBlue) / weight) | 0;\n        lookupAlpha[ k ] = (WuQuant._volume(this._cubes[ k ], this._momentsAlpha) / weight) | 0;\n      } else {\n        lookupRed[ k ] = 0;\n        lookupGreen[ k ] = 0;\n        lookupBlue[ k ] = 0;\n        lookupAlpha[ k ] = 0;\n      }\n    }\n\n    this._reds = createArray1D(this._colors + 1);\n    this._greens = createArray1D(this._colors + 1);\n    this._blues = createArray1D(this._colors + 1);\n    this._alphas = createArray1D(this._colors + 1);\n    this._sums = createArray1D(this._colors + 1);\n\n    // scans and adds colors\n    for (let index = 0, l = this._pixels.length; index < l; index++) {\n      const color = this._pixels[ index ];\n\n      const match = -1;\n\n      let bestMatch = match;\n      let bestDistance = Number.MAX_VALUE;\n\n      for (let lookup = 0; lookup < this._colors; lookup++) {\n        const foundRed = lookupRed[ lookup ];\n        const foundGreen = lookupGreen[ lookup ];\n        const foundBlue = lookupBlue[ lookup ];\n        const foundAlpha = lookupAlpha[ lookup ];\n\n        const distance = this._distance.calculateRaw(foundRed, foundGreen, foundBlue, foundAlpha, color.r, color.g, color.b, color.a);\n\n        if (distance < bestDistance) {\n          bestDistance = distance;\n          bestMatch = lookup;\n        }\n      }\n\n      this._reds[ bestMatch ] += color.r;\n      this._greens[ bestMatch ] += color.g;\n      this._blues[ bestMatch ] += color.b;\n      this._alphas[ bestMatch ] += color.a;\n      this._sums[ bestMatch ]++;\n    }\n  }\n\n  private _addColor(color: Point) {\n    const bitsToRemove = 8 - this._significantBitsPerChannel;\n    const indexRed = (color.r >> bitsToRemove) + 1;\n    const indexGreen = (color.g >> bitsToRemove) + 1;\n    const indexBlue = (color.b >> bitsToRemove) + 1;\n    const indexAlpha = (color.a >> bitsToRemove) + 1;\n\n    // if(color.a > 10) {\n    this._weights[ indexAlpha ][ indexRed ][ indexGreen ][ indexBlue ]++;\n    this._momentsRed[ indexAlpha ][ indexRed ][ indexGreen ][ indexBlue ] += color.r;\n    this._momentsGreen[ indexAlpha ][ indexRed ][ indexGreen ][ indexBlue ] += color.g;\n    this._momentsBlue[ indexAlpha ][ indexRed ][ indexGreen ][ indexBlue ] += color.b;\n    this._momentsAlpha[ indexAlpha ][ indexRed ][ indexGreen ][ indexBlue ] += color.a;\n    this._moments[ indexAlpha ][ indexRed ][ indexGreen ][ indexBlue ] += this._table[ color.r ] + this._table[ color.g ] + this._table[ color.b ] + this._table[ color.a ];\n    // }\n  }\n\n  /**\n   * Converts the histogram to a series of _moments.\n   */\n  private * _calculateMoments(): IterableIterator<PaletteQuantizerYieldValue> {\n    const area: number[] = [];\n    const areaRed: number[] = [];\n    const areaGreen: number[] = [];\n    const areaBlue: number[] = [];\n    const areaAlpha: number[] = [];\n    const area2: number[] = [];\n\n    const xarea = createArray3D(this._sideSize, this._sideSize, this._sideSize);\n    const xareaRed = createArray3D(this._sideSize, this._sideSize, this._sideSize);\n    const xareaGreen = createArray3D(this._sideSize, this._sideSize, this._sideSize);\n    const xareaBlue = createArray3D(this._sideSize, this._sideSize, this._sideSize);\n    const xareaAlpha = createArray3D(this._sideSize, this._sideSize, this._sideSize);\n    const xarea2 = createArray3D(this._sideSize, this._sideSize, this._sideSize);\n\n    let trackerProgress = 0;\n    const tracker = new ProgressTracker(this._alphaMaxSideIndex * this._maxSideIndex, 99);\n\n    for (let alphaIndex = 1; alphaIndex <= this._alphaMaxSideIndex; ++alphaIndex) {\n      fillArray3D<number>(xarea, this._sideSize, this._sideSize, this._sideSize, 0);\n      fillArray3D<number>(xareaRed, this._sideSize, this._sideSize, this._sideSize, 0);\n      fillArray3D<number>(xareaGreen, this._sideSize, this._sideSize, this._sideSize, 0);\n      fillArray3D<number>(xareaBlue, this._sideSize, this._sideSize, this._sideSize, 0);\n      fillArray3D<number>(xareaAlpha, this._sideSize, this._sideSize, this._sideSize, 0);\n      fillArray3D<number>(xarea2, this._sideSize, this._sideSize, this._sideSize, 0);\n\n      for (let redIndex = 1; redIndex <= this._maxSideIndex; ++redIndex, ++trackerProgress) {\n        if (tracker.shouldNotify(trackerProgress)) {\n          yield {\n            progress: tracker.progress,\n          };\n        }\n\n        fillArray1D<number>(area, this._sideSize, 0);\n        fillArray1D<number>(areaRed, this._sideSize, 0);\n        fillArray1D<number>(areaGreen, this._sideSize, 0);\n        fillArray1D<number>(areaBlue, this._sideSize, 0);\n        fillArray1D<number>(areaAlpha, this._sideSize, 0);\n        fillArray1D<number>(area2, this._sideSize, 0);\n\n        for (let greenIndex = 1; greenIndex <= this._maxSideIndex; ++greenIndex) {\n          let line = 0;\n          let lineRed = 0;\n          let lineGreen = 0;\n          let lineBlue = 0;\n          let lineAlpha = 0;\n          let line2 = 0.0;\n\n          for (let blueIndex = 1; blueIndex <= this._maxSideIndex; ++blueIndex) {\n            line += this._weights[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ];\n            lineRed += this._momentsRed[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ];\n            lineGreen += this._momentsGreen[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ];\n            lineBlue += this._momentsBlue[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ];\n            lineAlpha += this._momentsAlpha[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ];\n            line2 += this._moments[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ];\n\n            area[ blueIndex ] += line;\n            areaRed[ blueIndex ] += lineRed;\n            areaGreen[ blueIndex ] += lineGreen;\n            areaBlue[ blueIndex ] += lineBlue;\n            areaAlpha[ blueIndex ] += lineAlpha;\n            area2[ blueIndex ] += line2;\n\n            xarea[ redIndex ][ greenIndex ][ blueIndex ] = xarea[ redIndex - 1 ][ greenIndex ][ blueIndex ] + area[ blueIndex ];\n            xareaRed[ redIndex ][ greenIndex ][ blueIndex ] = xareaRed[ redIndex - 1 ][ greenIndex ][ blueIndex ] + areaRed[ blueIndex ];\n            xareaGreen[ redIndex ][ greenIndex ][ blueIndex ] = xareaGreen[ redIndex - 1 ][ greenIndex ][ blueIndex ] + areaGreen[ blueIndex ];\n            xareaBlue[ redIndex ][ greenIndex ][ blueIndex ] = xareaBlue[ redIndex - 1 ][ greenIndex ][ blueIndex ] + areaBlue[ blueIndex ];\n            xareaAlpha[ redIndex ][ greenIndex ][ blueIndex ] = xareaAlpha[ redIndex - 1 ][ greenIndex ][ blueIndex ] + areaAlpha[ blueIndex ];\n            xarea2[ redIndex ][ greenIndex ][ blueIndex ] = xarea2[ redIndex - 1 ][ greenIndex ][ blueIndex ] + area2[ blueIndex ];\n\n            this._weights[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ] = this._weights[ alphaIndex - 1 ][ redIndex ][ greenIndex ][ blueIndex ] + xarea[ redIndex ][ greenIndex ][ blueIndex ];\n            this._momentsRed[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ] = this._momentsRed[ alphaIndex - 1 ][ redIndex ][ greenIndex ][ blueIndex ] + xareaRed[ redIndex ][ greenIndex ][ blueIndex ];\n            this._momentsGreen[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ] = this._momentsGreen[ alphaIndex - 1 ][ redIndex ][ greenIndex ][ blueIndex ] + xareaGreen[ redIndex ][ greenIndex ][ blueIndex ];\n            this._momentsBlue[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ] = this._momentsBlue[ alphaIndex - 1 ][ redIndex ][ greenIndex ][ blueIndex ] + xareaBlue[ redIndex ][ greenIndex ][ blueIndex ];\n            this._momentsAlpha[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ] = this._momentsAlpha[ alphaIndex - 1 ][ redIndex ][ greenIndex ][ blueIndex ] + xareaAlpha[ redIndex ][ greenIndex ][ blueIndex ];\n            this._moments[ alphaIndex ][ redIndex ][ greenIndex ][ blueIndex ] = this._moments[ alphaIndex - 1 ][ redIndex ][ greenIndex ][ blueIndex ] + xarea2[ redIndex ][ greenIndex ][ blueIndex ];\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * Computes the volume of the cube in a specific moment.\n   */\n  private static _volumeFloat(cube: WuColorCube, moment: number[][][][]) {\n    return (moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMaximum ] -\n      moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMaximum ] -\n      moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMaximum ] +\n      moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ] -\n      moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMaximum ] +\n      moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMaximum ] +\n      moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMaximum ] -\n      moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ]) -\n\n      (moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n      moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n      moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n      moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] -\n      moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n      moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n      moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ] -\n      moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]);\n  }\n\n  /**\n   * Computes the volume of the cube in a specific moment.\n   */\n  private static _volume(cube: WuColorCube, moment: number[][][][]) {\n    return WuQuant._volumeFloat(cube, moment) | 0;\n  }\n\n  /**\n   * Splits the cube in given position][and color direction.\n   */\n  private static _top(cube: WuColorCube, direction: number, position: number, moment: number[][][][]) {\n    let result: number;\n    switch (direction) {\n      case WuQuant._alpha:\n        result = (moment[ position ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMaximum ] -\n          moment[ position ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMaximum ] -\n          moment[ position ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMaximum ] +\n          moment[ position ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ]) -\n          (moment[ position ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n          moment[ position ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] -\n          moment[ position ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n          moment[ position ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]);\n        break;\n\n      case WuQuant._red:\n        result = (moment[ cube.alphaMaximum ][ position ][ cube.greenMaximum ][ cube.blueMaximum ] -\n          moment[ cube.alphaMaximum ][ position ][ cube.greenMinimum ][ cube.blueMaximum ] -\n          moment[ cube.alphaMinimum ][ position ][ cube.greenMaximum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMinimum ][ position ][ cube.greenMinimum ][ cube.blueMaximum ]) -\n          (moment[ cube.alphaMaximum ][ position ][ cube.greenMaximum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMaximum ][ position ][ cube.greenMinimum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMinimum ][ position ][ cube.greenMaximum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ position ][ cube.greenMinimum ][ cube.blueMinimum ]);\n        break;\n\n      case WuQuant._green:\n        result = (moment[ cube.alphaMaximum ][ cube.redMaximum ][ position ][ cube.blueMaximum ] -\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ position ][ cube.blueMaximum ] -\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ position ][ cube.blueMaximum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ position ][ cube.blueMaximum ]) -\n          (moment[ cube.alphaMaximum ][ cube.redMaximum ][ position ][ cube.blueMinimum ] -\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ position ][ cube.blueMinimum ] -\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ position ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ position ][ cube.blueMinimum ]);\n        break;\n\n      case WuQuant._blue:\n        result = (moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMaximum ][ position ] -\n          moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMinimum ][ position ] -\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMaximum ][ position ] +\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ position ]) -\n          (moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMaximum ][ position ] -\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ position ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ position ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ position ]);\n        break;\n      default:\n        throw new Error('impossible');\n    }\n\n    return result | 0;\n  }\n\n  /**\n   * Splits the cube in a given color direction at its minimum.\n   */\n  private static _bottom(cube: WuColorCube, direction: number, moment: number[][][][]) {\n    switch (direction) {\n      case WuQuant._alpha:\n        return (-moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMaximum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ]) -\n          (-moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]);\n\n      case WuQuant._red:\n        return (-moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMaximum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ]) -\n          (-moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]);\n\n      case WuQuant._green:\n        return (-moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ] +\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMaximum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMaximum ]) -\n          (-moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]);\n\n      case WuQuant._blue:\n        return (-moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMaximum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMaximum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]) -\n          (-moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMaximum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMaximum ][ cube.greenMinimum ][ cube.blueMinimum ] +\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMaximum ][ cube.blueMinimum ] -\n          moment[ cube.alphaMinimum ][ cube.redMinimum ][ cube.greenMinimum ][ cube.blueMinimum ]);\n\n      default:\n        // TODO: why here is return 0, and in this._top there is no default at all (now it is throw error)?\n        return 0;\n    }\n  }\n\n  /**\n   * Calculates statistical variance for a given cube.\n   */\n  private  _calculateVariance(cube: WuColorCube) {\n    const volumeRed = WuQuant._volume(cube, this._momentsRed);\n    const volumeGreen = WuQuant._volume(cube, this._momentsGreen);\n    const volumeBlue = WuQuant._volume(cube, this._momentsBlue);\n    const volumeAlpha = WuQuant._volume(cube, this._momentsAlpha);\n    const volumeMoment = WuQuant._volumeFloat(cube, this._moments);\n    const volumeWeight = WuQuant._volume(cube, this._weights);\n    const distance = volumeRed * volumeRed + volumeGreen * volumeGreen + volumeBlue * volumeBlue + volumeAlpha * volumeAlpha;\n\n    return volumeMoment - (distance / volumeWeight);\n  }\n\n  /**\n   * Finds the optimal (maximal) position for the cut.\n   */\n  private _maximize(cube: WuColorCube, direction: number, first: number, last: number, wholeRed: number, wholeGreen: number, wholeBlue: number, wholeAlpha: number, wholeWeight: number) {\n    const bottomRed = WuQuant._bottom(cube, direction, this._momentsRed) | 0;\n    const bottomGreen = WuQuant._bottom(cube, direction, this._momentsGreen) | 0;\n    const bottomBlue = WuQuant._bottom(cube, direction, this._momentsBlue) | 0;\n    const bottomAlpha = WuQuant._bottom(cube, direction, this._momentsAlpha) | 0;\n    const bottomWeight = WuQuant._bottom(cube, direction, this._weights) | 0;\n\n    let result = 0.0;\n    let cutPosition = -1;\n\n    for (let position = first; position < last; ++position) {\n      // determines the cube cut at a certain position\n      let halfRed = bottomRed + WuQuant._top(cube, direction, position, this._momentsRed);\n      let halfGreen = bottomGreen + WuQuant._top(cube, direction, position, this._momentsGreen);\n      let halfBlue = bottomBlue + WuQuant._top(cube, direction, position, this._momentsBlue);\n      let halfAlpha = bottomAlpha + WuQuant._top(cube, direction, position, this._momentsAlpha);\n      let halfWeight = bottomWeight + WuQuant._top(cube, direction, position, this._weights);\n\n      // the cube cannot be cut at bottom (this would lead to empty cube)\n      if (halfWeight !== 0) {\n        let halfDistance = halfRed * halfRed + halfGreen * halfGreen + halfBlue * halfBlue + halfAlpha * halfAlpha;\n        let temp = halfDistance / halfWeight;\n\n        halfRed = wholeRed - halfRed;\n        halfGreen = wholeGreen - halfGreen;\n        halfBlue = wholeBlue - halfBlue;\n        halfAlpha = wholeAlpha - halfAlpha;\n        halfWeight = wholeWeight - halfWeight;\n\n        if (halfWeight !== 0) {\n          halfDistance = halfRed * halfRed + halfGreen * halfGreen + halfBlue * halfBlue + halfAlpha * halfAlpha;\n          temp += halfDistance / halfWeight;\n\n          if (temp > result) {\n            result = temp;\n            cutPosition = position;\n          }\n        }\n      }\n    }\n\n    return { max: result, position: cutPosition };\n  }\n\n  // Cuts a cube with another one.\n  private _cut(first: WuColorCube, second: WuColorCube) {\n    let direction: number;\n\n    const wholeRed = WuQuant._volume(first, this._momentsRed);\n    const wholeGreen = WuQuant._volume(first, this._momentsGreen);\n    const wholeBlue = WuQuant._volume(first, this._momentsBlue);\n    const wholeAlpha = WuQuant._volume(first, this._momentsAlpha);\n    const wholeWeight = WuQuant._volume(first, this._weights);\n\n    const red = this._maximize(first, WuQuant._red, first.redMinimum + 1, first.redMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\n    const green = this._maximize(first, WuQuant._green, first.greenMinimum + 1, first.greenMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\n    const blue = this._maximize(first, WuQuant._blue, first.blueMinimum + 1, first.blueMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\n    const alpha = this._maximize(first, WuQuant._alpha, first.alphaMinimum + 1, first.alphaMaximum, wholeRed, wholeGreen, wholeBlue, wholeAlpha, wholeWeight);\n\n    if (alpha.max >= red.max && alpha.max >= green.max && alpha.max >= blue.max) {\n      direction = WuQuant._alpha;\n\n      // cannot split empty cube\n      if (alpha.position < 0) return false;\n    } else {\n      if (red.max >= alpha.max && red.max >= green.max && red.max >= blue.max) {\n        direction = WuQuant._red;\n      } else if (green.max >= alpha.max && green.max >= red.max && green.max >= blue.max) {\n        direction = WuQuant._green;\n      } else {\n        direction = WuQuant._blue;\n      }\n    }\n\n    second.redMaximum = first.redMaximum;\n    second.greenMaximum = first.greenMaximum;\n    second.blueMaximum = first.blueMaximum;\n    second.alphaMaximum = first.alphaMaximum;\n\n    // cuts in a certain direction\n    switch (direction) {\n      case WuQuant._red:\n        second.redMinimum = first.redMaximum = red.position;\n        second.greenMinimum = first.greenMinimum;\n        second.blueMinimum = first.blueMinimum;\n        second.alphaMinimum = first.alphaMinimum;\n        break;\n\n      case WuQuant._green:\n        second.greenMinimum = first.greenMaximum = green.position;\n        second.redMinimum = first.redMinimum;\n        second.blueMinimum = first.blueMinimum;\n        second.alphaMinimum = first.alphaMinimum;\n        break;\n\n      case WuQuant._blue:\n        second.blueMinimum = first.blueMaximum = blue.position;\n        second.redMinimum = first.redMinimum;\n        second.greenMinimum = first.greenMinimum;\n        second.alphaMinimum = first.alphaMinimum;\n        break;\n\n      case WuQuant._alpha:\n        second.alphaMinimum = first.alphaMaximum = alpha.position;\n        second.blueMinimum = first.blueMinimum;\n        second.redMinimum = first.redMinimum;\n        second.greenMinimum = first.greenMinimum;\n        break;\n    }\n\n    // determines the volumes after cut\n    first.volume = (first.redMaximum - first.redMinimum) * (first.greenMaximum - first.greenMinimum) * (first.blueMaximum - first.blueMinimum) * (first.alphaMaximum - first.alphaMinimum);\n    second.volume = (second.redMaximum - second.redMinimum) * (second.greenMaximum - second.greenMinimum) * (second.blueMaximum - second.blueMinimum) * (second.alphaMaximum - second.alphaMinimum);\n\n    // the cut was successful\n    return true;\n  }\n\n  private _initialize(colors: number) {\n    this._colors = colors;\n\n    // creates all the _cubes\n    this._cubes = [];\n\n    // initializes all the _cubes\n    for (let cubeIndex = 0; cubeIndex < colors; cubeIndex++) {\n      this._cubes[ cubeIndex ] = new WuColorCube();\n    }\n\n    // resets the reference minimums\n    this._cubes[ 0 ].redMinimum = 0;\n    this._cubes[ 0 ].greenMinimum = 0;\n    this._cubes[ 0 ].blueMinimum = 0;\n    this._cubes[ 0 ].alphaMinimum = 0;\n\n    // resets the reference maximums\n    this._cubes[ 0 ].redMaximum = this._maxSideIndex;\n    this._cubes[ 0 ].greenMaximum = this._maxSideIndex;\n    this._cubes[ 0 ].blueMaximum = this._maxSideIndex;\n    this._cubes[ 0 ].alphaMaximum = this._alphaMaxSideIndex;\n\n    this._weights = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\n    this._momentsRed = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\n    this._momentsGreen = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\n    this._momentsBlue = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\n    this._momentsAlpha = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\n    this._moments = createArray4D(this._alphaSideSize, this._sideSize, this._sideSize, this._sideSize);\n\n    this._table = [];\n    for (let tableIndex = 0; tableIndex < 256; ++tableIndex) {\n      this._table[ tableIndex ] = tableIndex * tableIndex;\n    }\n\n    this._pixels = [];\n  }\n\n  private _setQuality(significantBitsPerChannel = 5) {\n    this._significantBitsPerChannel = significantBitsPerChannel;\n    this._maxSideIndex = 1 << this._significantBitsPerChannel;\n    this._alphaMaxSideIndex = this._maxSideIndex;\n\n    this._sideSize = this._maxSideIndex + 1;\n    this._alphaSideSize = this._alphaMaxSideIndex + 1;\n  }\n\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\nexport { AbstractPaletteQuantizer } from './paletteQuantizer';\nexport { NeuQuant } from './neuquant/neuquant';\nexport { NeuQuantFloat } from './neuquant/neuquantFloat';\nexport { RGBQuant } from './rgbquant/rgbquant';\nexport { ColorHistogram } from './rgbquant/colorHistogram';\nexport { WuQuant, WuColorCube } from './wu/wuQuant';\nexport { PaletteQuantizerYieldValue } from './paletteQuantizerYieldValue';\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * common.ts - part of Image Quantization Library\n */\nimport { PointContainer } from '../utils/pointContainer';\nimport { Palette } from '../utils/palette';\nimport { ImageQuantizerYieldValue } from './imageQuantizerYieldValue';\n\nexport abstract class AbstractImageQuantizer {\n  abstract quantize(pointContainer: PointContainer, palette: Palette): IterableIterator<ImageQuantizerYieldValue>;\n\n  quantizeSync(pointContainer: PointContainer, palette: Palette) {\n    for (const value of this.quantize(pointContainer, palette)) {\n      if (value.pointContainer) {\n        return value.pointContainer;\n      }\n    }\n\n    throw new Error('unreachable');\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * nearestColor.ts - part of Image Quantization Library\n */\nimport { AbstractImageQuantizer } from './imageQuantizer';\nimport { AbstractDistanceCalculator } from '../distance/distanceCalculator';\nimport { PointContainer } from '../utils/pointContainer';\nimport { Palette } from '../utils/palette';\nimport { ImageQuantizerYieldValue } from './imageQuantizerYieldValue';\nimport { ProgressTracker } from '../utils/progressTracker';\n\nexport class NearestColor extends AbstractImageQuantizer {\n  private _distance: AbstractDistanceCalculator;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator) {\n    super();\n    this._distance = colorDistanceCalculator;\n  }\n\n  /**\n   * Mutates pointContainer\n   */\n  * quantize(pointContainer: PointContainer, palette: Palette): IterableIterator<ImageQuantizerYieldValue> {\n    const pointArray = pointContainer.getPointArray();\n    const width = pointContainer.getWidth();\n    const height = pointContainer.getHeight();\n\n    const tracker = new ProgressTracker(height, 99);\n    for (let y = 0; y < height; y++) {\n      if (tracker.shouldNotify(y)) {\n        yield {\n          progress: tracker.progress,\n        };\n      }\n      for (let x = 0, idx = y * width; x < width; x++, idx++) {\n        // Image pixel\n        const point = pointArray[ idx ];\n        // Reduced pixel\n        point.from(palette.getNearestColor(this._distance, point));\n      }\n    }\n\n    yield {\n      pointContainer,\n      progress: 100,\n    };\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * ditherErrorDiffusionArray.ts - part of Image Quantization Library\n */\nimport { AbstractImageQuantizer } from './imageQuantizer';\nimport { AbstractDistanceCalculator } from '../distance/distanceCalculator';\nimport { PointContainer } from '../utils/pointContainer';\nimport { Palette } from '../utils/palette';\nimport { Point } from '../utils/point';\nimport { inRange0to255Rounded } from '../utils/arithmetic';\nimport { ImageQuantizerYieldValue } from './imageQuantizerYieldValue';\nimport { ProgressTracker } from '../utils/progressTracker';\n\n// TODO: is it the best name for this enum \"kernel\"?\nexport enum ErrorDiffusionArrayKernel {\n  FloydSteinberg = 0,\n  FalseFloydSteinberg,\n  Stucki,\n  Atkinson,\n  Jarvis,\n  Burkes,\n  Sierra,\n  TwoSierra,\n  SierraLite,\n}\n\n// http://www.tannerhelland.com/4660/dithering-eleven-algorithms-source-code/\nexport class ErrorDiffusionArray extends AbstractImageQuantizer {\n  private _minColorDistance: number;\n  private _serpentine: boolean;\n  private _kernel!: number[][];\n  /** true = GIMP, false = XNVIEW */\n  private _calculateErrorLikeGIMP: boolean;\n\n  private _distance: AbstractDistanceCalculator;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator, kernel: ErrorDiffusionArrayKernel, serpentine = true, minimumColorDistanceToDither = 0, calculateErrorLikeGIMP = false) {\n    super();\n    this._setKernel(kernel);\n\n    this._distance = colorDistanceCalculator;\n    this._minColorDistance = minimumColorDistanceToDither;\n    this._serpentine = serpentine;\n    this._calculateErrorLikeGIMP = calculateErrorLikeGIMP;\n  }\n\n  /**\n   * adapted from http://jsbin.com/iXofIji/2/edit by PAEz\n   * fixed version. it doesn't use image pixels as error storage, also it doesn't have 0.3 + 0.3 + 0.3 + 0.3 = 0 error\n   * Mutates pointContainer\n   */\n  * quantize(pointContainer: PointContainer, palette: Palette): IterableIterator<ImageQuantizerYieldValue> {\n    const pointArray = pointContainer.getPointArray();\n    const originalPoint = new Point();\n    const width = pointContainer.getWidth();\n    const height = pointContainer.getHeight();\n    const errorLines: number[][][] = [];\n\n    let dir = 1;\n    let maxErrorLines = 1;\n\n    // initial error lines (number is taken from dithering kernel)\n    for (const kernel of this._kernel) {\n      const kernelErrorLines = kernel[ 2 ] + 1;\n      if (maxErrorLines < kernelErrorLines) maxErrorLines = kernelErrorLines;\n    }\n    for (let i = 0; i < maxErrorLines; i++) {\n      this._fillErrorLine(errorLines[ i ] = [], width);\n    }\n\n    const tracker = new ProgressTracker(height, 99);\n    for (let y = 0; y < height; y++) {\n      if (tracker.shouldNotify(y)) {\n        yield {\n          progress: tracker.progress,\n        };\n      }\n\n      // always serpentine\n      if (this._serpentine) dir = dir * -1;\n\n      const lni = y * width;\n      const xStart = dir === 1 ? 0 : width - 1;\n      const xEnd = dir === 1 ? width : -1;\n\n      // cyclic shift with erasing\n      this._fillErrorLine(errorLines[ 0 ], width);\n      // TODO: why it is needed to cast types here?\n      errorLines.push(errorLines.shift() as number[][]);\n\n      const errorLine = errorLines[ 0 ];\n      for (let x = xStart, idx = lni + xStart; x !== xEnd; x += dir, idx += dir) {\n        // Image pixel\n        const point = pointArray[ idx ];\n        // originalPoint = new Utils.Point(),\n        const error = errorLine[ x ];\n\n        originalPoint.from(point);\n\n        const correctedPoint = Point.createByRGBA(\n          inRange0to255Rounded(point.r + error[ 0 ]),\n          inRange0to255Rounded(point.g + error[ 1 ]),\n          inRange0to255Rounded(point.b + error[ 2 ]),\n          inRange0to255Rounded(point.a + error[ 3 ]),\n        );\n\n        // Reduced pixel\n        const palettePoint = palette.getNearestColor(this._distance, correctedPoint);\n        point.from(palettePoint);\n\n        // dithering strength\n        if (this._minColorDistance) {\n          const dist = this._distance.calculateNormalized(point, palettePoint);\n          if (dist < this._minColorDistance) continue;\n        }\n\n        // Component distance\n        let er: number;\n        let eg: number;\n        let eb: number;\n        let ea: number;\n        if (this._calculateErrorLikeGIMP) {\n          er = correctedPoint.r - palettePoint.r;\n          eg = correctedPoint.g - palettePoint.g;\n          eb = correctedPoint.b - palettePoint.b;\n          ea = correctedPoint.a - palettePoint.a;\n        } else {\n          er = originalPoint.r - palettePoint.r;\n          eg = originalPoint.g - palettePoint.g;\n          eb = originalPoint.b - palettePoint.b;\n          ea = originalPoint.a - palettePoint.a;\n        }\n\n        const dStart = dir === 1 ? 0 : this._kernel.length - 1;\n        const dEnd = dir === 1 ? this._kernel.length : -1;\n\n        for (let i = dStart; i !== dEnd; i += dir) {\n          const x1 = this._kernel[ i ][ 1 ] * dir;\n          const y1 = this._kernel[ i ][ 2 ];\n\n          if (x1 + x >= 0 && x1 + x < width && y1 + y >= 0 && y1 + y < height) {\n            const d = this._kernel[ i ][ 0 ];\n            const e = errorLines[ y1 ][ x1 + x ];\n\n            e[ 0 ] = e[ 0 ] + er * d;\n            e[ 1 ] = e[ 1 ] + eg * d;\n            e[ 2 ] = e[ 2 ] + eb * d;\n            e[ 3 ] = e[ 3 ] + ea * d;\n          }\n        }\n      }\n    }\n\n    yield {\n      pointContainer,\n      progress: 100,\n    };\n  }\n\n  private _fillErrorLine(errorLine: number[][], width: number) {\n    // shrink\n    if (errorLine.length > width) {\n      errorLine.length = width;\n    }\n\n    // reuse existing arrays\n    const l = errorLine.length;\n    for (let i = 0; i < l; i++) {\n      const error = errorLine[ i ];\n      error[ 0 ] = error[ 1 ] = error[ 2 ] = error[ 3 ] = 0;\n    }\n\n    // create missing arrays\n    for (let i = l; i < width; i++) {\n      errorLine[ i ] = [0.0, 0.0, 0.0, 0.0];\n    }\n  }\n\n  private _setKernel(kernel: ErrorDiffusionArrayKernel) {\n    switch (kernel) {\n      case ErrorDiffusionArrayKernel.FloydSteinberg:\n        this._kernel = [\n          [7 / 16, 1, 0],\n          [3 / 16, -1, 1],\n          [5 / 16, 0, 1],\n          [1 / 16, 1, 1],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.FalseFloydSteinberg:\n        this._kernel = [\n          [3 / 8, 1, 0],\n          [3 / 8, 0, 1],\n          [2 / 8, 1, 1],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.Stucki:\n        this._kernel = [\n          [8 / 42, 1, 0],\n          [4 / 42, 2, 0],\n          [2 / 42, -2, 1],\n          [4 / 42, -1, 1],\n          [8 / 42, 0, 1],\n          [4 / 42, 1, 1],\n          [2 / 42, 2, 1],\n          [1 / 42, -2, 2],\n          [2 / 42, -1, 2],\n          [4 / 42, 0, 2],\n          [2 / 42, 1, 2],\n          [1 / 42, 2, 2],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.Atkinson:\n        this._kernel = [\n          [1 / 8, 1, 0],\n          [1 / 8, 2, 0],\n          [1 / 8, -1, 1],\n          [1 / 8, 0, 1],\n          [1 / 8, 1, 1],\n          [1 / 8, 0, 2],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.Jarvis:\n        this._kernel = [\t\t\t// Jarvis, Judice, and Ninke / JJN?\n          [7 / 48, 1, 0],\n          [5 / 48, 2, 0],\n          [3 / 48, -2, 1],\n          [5 / 48, -1, 1],\n          [7 / 48, 0, 1],\n          [5 / 48, 1, 1],\n          [3 / 48, 2, 1],\n          [1 / 48, -2, 2],\n          [3 / 48, -1, 2],\n          [5 / 48, 0, 2],\n          [3 / 48, 1, 2],\n          [1 / 48, 2, 2],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.Burkes:\n        this._kernel = [\n          [8 / 32, 1, 0],\n          [4 / 32, 2, 0],\n          [2 / 32, -2, 1],\n          [4 / 32, -1, 1],\n          [8 / 32, 0, 1],\n          [4 / 32, 1, 1],\n          [2 / 32, 2, 1],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.Sierra:\n        this._kernel = [\n          [5 / 32, 1, 0],\n          [3 / 32, 2, 0],\n          [2 / 32, -2, 1],\n          [4 / 32, -1, 1],\n          [5 / 32, 0, 1],\n          [4 / 32, 1, 1],\n          [2 / 32, 2, 1],\n          [2 / 32, -1, 2],\n          [3 / 32, 0, 2],\n          [2 / 32, 1, 2],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.TwoSierra:\n        this._kernel = [\n          [4 / 16, 1, 0],\n          [3 / 16, 2, 0],\n          [1 / 16, -2, 1],\n          [2 / 16, -1, 1],\n          [3 / 16, 0, 1],\n          [2 / 16, 1, 1],\n          [1 / 16, 2, 1],\n        ];\n        break;\n\n      case ErrorDiffusionArrayKernel.SierraLite:\n        this._kernel = [\n          [2 / 4, 1, 0],\n          [1 / 4, -1, 1],\n          [1 / 4, 0, 1],\n        ];\n        break;\n\n      default:\n        throw new Error('ErrorDiffusionArray: unknown kernel = ' + kernel);\n    }\n  }\n}\n","import { ProgressTracker } from '../../utils/progressTracker';\nimport { ImageQuantizerYieldValue } from '../imageQuantizerYieldValue';\n\nenum Direction {\n  NONE = 0,\n  UP,\n  LEFT,\n  RIGHT,\n  DOWN,\n}\n\ninterface Data {\n  x: number;\n  y: number;\n  width: number;\n  height: number;\n  level: number;\n  index: number;\n  tracker: ProgressTracker;\n  callback(x: number, y: number): void;\n}\n\nexport function * hilbertCurve(width: number, height: number, callback: (x: number, y: number) => void) {\n  const maxBound = Math.max(width, height);\n  const level = Math.floor(Math.log(maxBound) / Math.log(2) + 1);\n  const tracker = new ProgressTracker(width * height, 99);\n  const data = {\n    width,\n    height,\n    level,\n    callback,\n    tracker,\n    index: 0,\n    x: 0,\n    y: 0,\n  };\n  yield * walkHilbert(data, Direction.UP);\n  visit(data, Direction.NONE);\n}\n\nfunction * walkHilbert(data: Data, direction: Direction): IterableIterator<ImageQuantizerYieldValue> {\n  if (data.level < 1) return;\n\n  if (data.tracker.shouldNotify(data.index)) yield { progress: data.tracker.progress };\n  data.level--;\n  switch (direction) {\n    case Direction.LEFT:\n      yield * walkHilbert(data, Direction.UP);\n      visit(data, Direction.RIGHT);\n      yield * walkHilbert(data, Direction.LEFT);\n      visit(data, Direction.DOWN);\n      yield * walkHilbert(data, Direction.LEFT);\n      visit(data, Direction.LEFT);\n      yield * walkHilbert(data, Direction.DOWN);\n      break;\n\n    case Direction.RIGHT:\n      yield * walkHilbert(data, Direction.DOWN);\n      visit(data, Direction.LEFT);\n      yield * walkHilbert(data, Direction.RIGHT);\n      visit(data, Direction.UP);\n      yield * walkHilbert(data, Direction.RIGHT);\n      visit(data, Direction.RIGHT);\n      yield * walkHilbert(data, Direction.UP);\n      break;\n\n    case Direction.UP:\n      yield * walkHilbert(data, Direction.LEFT);\n      visit(data, Direction.DOWN);\n      yield * walkHilbert(data, Direction.UP);\n      visit(data, Direction.RIGHT);\n      yield * walkHilbert(data, Direction.UP);\n      visit(data, Direction.UP);\n      yield * walkHilbert(data, Direction.RIGHT);\n      break;\n\n    case Direction.DOWN:\n      yield * walkHilbert(data, Direction.RIGHT);\n      visit(data, Direction.UP);\n      yield * walkHilbert(data, Direction.DOWN);\n      visit(data, Direction.LEFT);\n      yield * walkHilbert(data, Direction.DOWN);\n      visit(data, Direction.DOWN);\n      yield * walkHilbert(data, Direction.LEFT);\n      break;\n\n    default:\n      break;\n  }\n  data.level++;\n}\n\nfunction visit(data: Data, direction: Direction) {\n  if (data.x >= 0 && data.x < data.width && data.y >= 0 && data.y < data.height) {\n    data.callback(data.x, data.y);\n    data.index++;\n  }\n  switch (direction) {\n    case Direction.LEFT:\n      data.x--;\n      break;\n    case Direction.RIGHT:\n      data.x++;\n      break;\n    case Direction.UP:\n      data.y--;\n      break;\n    case Direction.DOWN:\n      data.y++;\n      break;\n  }\n}\n","/**\n * @preserve\n * MIT License\n *\n * Copyright 2015-2018 Igor Bezkrovnyi\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to\n * deal in the Software without restriction, including without limitation the\n * rights to use, copy, modify, merge, publish, distribute, sublicense, and/or\n * sell copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL\n * THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING\n * FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS\n * IN THE SOFTWARE.\n *\n * riemersma.ts - part of Image Quantization Library\n */\nimport { AbstractImageQuantizer } from './imageQuantizer';\nimport { hilbertCurve } from './spaceFillingCurves/hilbertCurve';\nimport { AbstractDistanceCalculator } from '../distance/distanceCalculator';\nimport { PointContainer } from '../utils/pointContainer';\nimport { Palette } from '../utils/palette';\nimport { Point } from '../utils/point';\nimport { inRange0to255Rounded } from '../utils/arithmetic';\nimport { ImageQuantizerYieldValue } from './imageQuantizerYieldValue';\n\nexport class ErrorDiffusionRiemersma extends AbstractImageQuantizer {\n  private _distance: AbstractDistanceCalculator;\n  private _weights: number[];\n  private _errorQueueSize: number;\n\n  constructor(colorDistanceCalculator: AbstractDistanceCalculator, errorQueueSize = 16, errorPropagation = 1) {\n    super();\n    this._distance = colorDistanceCalculator;\n    this._errorQueueSize = errorQueueSize;\n    this._weights = ErrorDiffusionRiemersma._createWeights(errorPropagation, errorQueueSize);\n  }\n\n  /**\n   * Mutates pointContainer\n   */\n  * quantize(pointContainer: PointContainer, palette: Palette) {\n    const pointArray = pointContainer.getPointArray();\n    const width = pointContainer.getWidth();\n    const height = pointContainer.getHeight();\n    const errorQueue: Array<{ r: number; g: number; b: number; a: number }> = [];\n\n    let head = 0;\n\n    for (let i = 0; i < this._errorQueueSize; i++) {\n      errorQueue[i] = { r: 0, g: 0, b: 0, a: 0 };\n    }\n\n    yield * hilbertCurve(width, height, (x, y) => {\n      const p = pointArray[x + y * width];\n      let r = p.r;\n      let g = p.g;\n      let b = p.b;\n      let a = p.a;\n      for (let i = 0; i < this._errorQueueSize; i++) {\n        const weight = this._weights[i];\n        const e = errorQueue[(i + head) % this._errorQueueSize];\n\n        r += e.r * weight;\n        g += e.g * weight;\n        b += e.b * weight;\n        a += e.a * weight;\n      }\n\n      const correctedPoint = Point.createByRGBA(\n        inRange0to255Rounded(r),\n        inRange0to255Rounded(g),\n        inRange0to255Rounded(b),\n        inRange0to255Rounded(a),\n      );\n\n      const quantizedPoint = palette.getNearestColor(this._distance, correctedPoint);\n\n      // update head and calculate tail\n      head = (head + 1) % this._errorQueueSize;\n      const tail = (head + this._errorQueueSize - 1) % this._errorQueueSize;\n\n      // update error with new value\n      errorQueue[tail].r = p.r - quantizedPoint.r;\n      errorQueue[tail].g = p.g - quantizedPoint.g;\n      errorQueue[tail].b = p.b - quantizedPoint.b;\n      errorQueue[tail].a = p.a - quantizedPoint.a;\n\n      // update point\n      p.from(quantizedPoint);\n    });\n\n    yield {\n      pointContainer,\n      progress: 100,\n    };\n  }\n\n  private static _createWeights(errorPropagation: number, errorQueueSize: number) {\n    const weights: number[] = [];\n\n    const multiplier = Math.exp(Math.log(errorQueueSize) / (errorQueueSize - 1));\n    for (let i = 0, next = 1; i < errorQueueSize; i++) {\n      weights[i] = (((next + 0.5) | 0) / errorQueueSize) * errorPropagation;\n      next *= multiplier;\n    }\n\n    return weights;\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\n\nexport { AbstractImageQuantizer } from './imageQuantizer';\nexport { ImageQuantizerYieldValue } from './imageQuantizerYieldValue';\nexport { NearestColor } from './nearestColor';\nexport { ErrorDiffusionArray, ErrorDiffusionArrayKernel } from './array';\nexport { ErrorDiffusionRiemersma } from './riemersma';\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * ssim.ts - part of Image Quantization Library\n */\nimport { PointContainer } from '../utils/pointContainer';\nimport { Y } from '../constants/bt709';\n\n// based on https://github.com/rhys-e/structural-similarity\n// http://en.wikipedia.org/wiki/Structural_similarity\nconst K1 = 0.01; // tslint:disable-line:naming-convention\nconst K2 = 0.03; // tslint:disable-line:naming-convention\n\nexport function ssim(image1: PointContainer, image2: PointContainer) {\n  if (image1.getHeight() !== image2.getHeight() || image1.getWidth() !== image2.getWidth()) {\n    throw new Error('Images have different sizes!');\n  }\n\n  const bitsPerComponent = 8;\n  const L = (1 << bitsPerComponent) - 1; // tslint:disable-line:naming-convention\n  const c1 = Math.pow((K1 * L), 2);\n  const c2 = Math.pow((K2 * L), 2);\n\n  let numWindows = 0;\n  let mssim = 0.0;\n\n  // calculate ssim for each window\n  iterate(image1, image2, (lumaValues1, lumaValues2, averageLumaValue1, averageLumaValue2) => {\n    // calculate variance and covariance\n    let sigxy = 0.0;\n    let sigsqx = 0.0;\n    let sigsqy = 0.0;\n\n    for (let i = 0; i < lumaValues1.length; i++) {\n      sigsqx += Math.pow((lumaValues1[i] - averageLumaValue1), 2);\n      sigsqy += Math.pow((lumaValues2[i] - averageLumaValue2), 2);\n\n      sigxy += (lumaValues1[i] - averageLumaValue1) * (lumaValues2[i] - averageLumaValue2);\n    }\n\n    const numPixelsInWin = lumaValues1.length - 1;\n    sigsqx /= numPixelsInWin;\n    sigsqy /= numPixelsInWin;\n    sigxy /= numPixelsInWin;\n\n    // perform ssim calculation on window\n    const numerator = (2 * averageLumaValue1 * averageLumaValue2 + c1) * (2 * sigxy + c2);\n    const denominator = (Math.pow(averageLumaValue1, 2) + Math.pow(averageLumaValue2, 2) + c1) * (sigsqx + sigsqy + c2);\n    const ssim = numerator / denominator;\n\n    mssim += ssim;\n    numWindows++;\n\n  });\n  return mssim / numWindows;\n}\n\nfunction iterate(image1: PointContainer, image2: PointContainer, callback: (lumaValues1: number[], lumaValues2: number[], averageLumaValue1: number, averageLumaValue2: number) => void) {\n  const windowSize = 8;\n  const width = image1.getWidth();\n  const height = image1.getHeight();\n\n  for (let y = 0; y < height; y += windowSize) {\n    for (let x = 0; x < width; x += windowSize) {\n      // avoid out-of-width/height\n      const windowWidth = Math.min(windowSize, width - x);\n      const windowHeight = Math.min(windowSize, height - y);\n\n      const lumaValues1 = calculateLumaValuesForWindow(image1, x, y, windowWidth, windowHeight);\n      const lumaValues2 = calculateLumaValuesForWindow(image2, x, y, windowWidth, windowHeight);\n      const averageLuma1 = calculateAverageLuma(lumaValues1);\n      const averageLuma2 = calculateAverageLuma(lumaValues2);\n\n      callback(lumaValues1, lumaValues2, averageLuma1, averageLuma2);\n    }\n  }\n}\n\nfunction calculateLumaValuesForWindow(image: PointContainer, x: number, y: number, width: number, height: number) {\n  const pointArray = image.getPointArray();\n  const lumaValues: number[] = [];\n\n  let counter = 0;\n\n  for (let j = y; j < y + height; j++) {\n    const offset = j * image.getWidth();\n    for (let i = x; i < x + width; i++) {\n      const point = pointArray[offset + i];\n      lumaValues[counter] = point.r * Y.RED + point.g * Y.GREEN + point.b * Y.BLUE;\n      counter++;\n    }\n  }\n\n  return lumaValues;\n}\n\nfunction calculateAverageLuma(lumaValues: number[]) {\n  let sumLuma = 0.0;\n  for (const luma of lumaValues) {\n    sumLuma += luma;\n  }\n\n  return sumLuma / lumaValues.length;\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\nexport { ssim } from './ssim';\n","// https://github.com/zloirock/core-js/issues/86#issuecomment-115759028\nvar global = module.exports = typeof window != 'undefined' && window.Math == Math\n  ? window : typeof self != 'undefined' && self.Math == Math ? self\n  // eslint-disable-next-line no-new-func\n  : Function('return this')();\nif (typeof __g == 'number') __g = global; // eslint-disable-line no-undef\n","var core = module.exports = { version: '2.6.11' };\nif (typeof __e == 'number') __e = core; // eslint-disable-line no-undef\n","module.exports = function (it) {\n  return typeof it === 'object' ? it !== null : typeof it === 'function';\n};\n","var isObject = require('./_is-object');\nmodule.exports = function (it) {\n  if (!isObject(it)) throw TypeError(it + ' is not an object!');\n  return it;\n};\n","module.exports = function (exec) {\n  try {\n    return !!exec();\n  } catch (e) {\n    return true;\n  }\n};\n","// Thank's IE8 for his funny defineProperty\nmodule.exports = !require('./_fails')(function () {\n  return Object.defineProperty({}, 'a', { get: function () { return 7; } }).a != 7;\n});\n","var isObject = require('./_is-object');\nvar document = require('./_global').document;\n// typeof document.createElement is 'object' in old IE\nvar is = isObject(document) && isObject(document.createElement);\nmodule.exports = function (it) {\n  return is ? document.createElement(it) : {};\n};\n","module.exports = !require('./_descriptors') && !require('./_fails')(function () {\n  return Object.defineProperty(require('./_dom-create')('div'), 'a', { get: function () { return 7; } }).a != 7;\n});\n","// 7.1.1 ToPrimitive(input [, PreferredType])\nvar isObject = require('./_is-object');\n// instead of the ES6 spec version, we didn't implement @@toPrimitive case\n// and the second argument - flag - preferred type is a string\nmodule.exports = function (it, S) {\n  if (!isObject(it)) return it;\n  var fn, val;\n  if (S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (typeof (fn = it.valueOf) == 'function' && !isObject(val = fn.call(it))) return val;\n  if (!S && typeof (fn = it.toString) == 'function' && !isObject(val = fn.call(it))) return val;\n  throw TypeError(\"Can't convert object to primitive value\");\n};\n","var anObject = require('./_an-object');\nvar IE8_DOM_DEFINE = require('./_ie8-dom-define');\nvar toPrimitive = require('./_to-primitive');\nvar dP = Object.defineProperty;\n\nexports.f = require('./_descriptors') ? Object.defineProperty : function defineProperty(O, P, Attributes) {\n  anObject(O);\n  P = toPrimitive(P, true);\n  anObject(Attributes);\n  if (IE8_DOM_DEFINE) try {\n    return dP(O, P, Attributes);\n  } catch (e) { /* empty */ }\n  if ('get' in Attributes || 'set' in Attributes) throw TypeError('Accessors not supported!');\n  if ('value' in Attributes) O[P] = Attributes.value;\n  return O;\n};\n","module.exports = function (bitmap, value) {\n  return {\n    enumerable: !(bitmap & 1),\n    configurable: !(bitmap & 2),\n    writable: !(bitmap & 4),\n    value: value\n  };\n};\n","var dP = require('./_object-dp');\nvar createDesc = require('./_property-desc');\nmodule.exports = require('./_descriptors') ? function (object, key, value) {\n  return dP.f(object, key, createDesc(1, value));\n} : function (object, key, value) {\n  object[key] = value;\n  return object;\n};\n","var hasOwnProperty = {}.hasOwnProperty;\nmodule.exports = function (it, key) {\n  return hasOwnProperty.call(it, key);\n};\n","var id = 0;\nvar px = Math.random();\nmodule.exports = function (key) {\n  return 'Symbol('.concat(key === undefined ? '' : key, ')_', (++id + px).toString(36));\n};\n","module.exports = false;\n","var core = require('./_core');\nvar global = require('./_global');\nvar SHARED = '__core-js_shared__';\nvar store = global[SHARED] || (global[SHARED] = {});\n\n(module.exports = function (key, value) {\n  return store[key] || (store[key] = value !== undefined ? value : {});\n})('versions', []).push({\n  version: core.version,\n  mode: require('./_library') ? 'pure' : 'global',\n  copyright: '© 2019 Denis Pushkarev (zloirock.ru)'\n});\n","module.exports = require('./_shared')('native-function-to-string', Function.toString);\n","var global = require('./_global');\nvar hide = require('./_hide');\nvar has = require('./_has');\nvar SRC = require('./_uid')('src');\nvar $toString = require('./_function-to-string');\nvar TO_STRING = 'toString';\nvar TPL = ('' + $toString).split(TO_STRING);\n\nrequire('./_core').inspectSource = function (it) {\n  return $toString.call(it);\n};\n\n(module.exports = function (O, key, val, safe) {\n  var isFunction = typeof val == 'function';\n  if (isFunction) has(val, 'name') || hide(val, 'name', key);\n  if (O[key] === val) return;\n  if (isFunction) has(val, SRC) || hide(val, SRC, O[key] ? '' + O[key] : TPL.join(String(key)));\n  if (O === global) {\n    O[key] = val;\n  } else if (!safe) {\n    delete O[key];\n    hide(O, key, val);\n  } else if (O[key]) {\n    O[key] = val;\n  } else {\n    hide(O, key, val);\n  }\n// add fake Function#toString for correct work wrapped methods / constructors with methods like LoDash isNative\n})(Function.prototype, TO_STRING, function toString() {\n  return typeof this == 'function' && this[SRC] || $toString.call(this);\n});\n","module.exports = function (it) {\n  if (typeof it != 'function') throw TypeError(it + ' is not a function!');\n  return it;\n};\n","// optional / simple context binding\nvar aFunction = require('./_a-function');\nmodule.exports = function (fn, that, length) {\n  aFunction(fn);\n  if (that === undefined) return fn;\n  switch (length) {\n    case 1: return function (a) {\n      return fn.call(that, a);\n    };\n    case 2: return function (a, b) {\n      return fn.call(that, a, b);\n    };\n    case 3: return function (a, b, c) {\n      return fn.call(that, a, b, c);\n    };\n  }\n  return function (/* ...args */) {\n    return fn.apply(that, arguments);\n  };\n};\n","var global = require('./_global');\nvar core = require('./_core');\nvar hide = require('./_hide');\nvar redefine = require('./_redefine');\nvar ctx = require('./_ctx');\nvar PROTOTYPE = 'prototype';\n\nvar $export = function (type, name, source) {\n  var IS_FORCED = type & $export.F;\n  var IS_GLOBAL = type & $export.G;\n  var IS_STATIC = type & $export.S;\n  var IS_PROTO = type & $export.P;\n  var IS_BIND = type & $export.B;\n  var target = IS_GLOBAL ? global : IS_STATIC ? global[name] || (global[name] = {}) : (global[name] || {})[PROTOTYPE];\n  var exports = IS_GLOBAL ? core : core[name] || (core[name] = {});\n  var expProto = exports[PROTOTYPE] || (exports[PROTOTYPE] = {});\n  var key, own, out, exp;\n  if (IS_GLOBAL) source = name;\n  for (key in source) {\n    // contains in native\n    own = !IS_FORCED && target && target[key] !== undefined;\n    // export native or passed\n    out = (own ? target : source)[key];\n    // bind timers to global for call from export context\n    exp = IS_BIND && own ? ctx(out, global) : IS_PROTO && typeof out == 'function' ? ctx(Function.call, out) : out;\n    // extend global\n    if (target) redefine(target, key, out, type & $export.U);\n    // export\n    if (exports[key] != out) hide(exports, key, exp);\n    if (IS_PROTO && expProto[key] != out) expProto[key] = out;\n  }\n};\nglobal.core = core;\n// type bitmap\n$export.F = 1;   // forced\n$export.G = 2;   // global\n$export.S = 4;   // static\n$export.P = 8;   // proto\n$export.B = 16;  // bind\n$export.W = 32;  // wrap\n$export.U = 64;  // safe\n$export.R = 128; // real proto method for `library`\nmodule.exports = $export;\n","// fast apply, http://jsperf.lnkit.com/fast-apply/5\nmodule.exports = function (fn, args, that) {\n  var un = that === undefined;\n  switch (args.length) {\n    case 0: return un ? fn()\n                      : fn.call(that);\n    case 1: return un ? fn(args[0])\n                      : fn.call(that, args[0]);\n    case 2: return un ? fn(args[0], args[1])\n                      : fn.call(that, args[0], args[1]);\n    case 3: return un ? fn(args[0], args[1], args[2])\n                      : fn.call(that, args[0], args[1], args[2]);\n    case 4: return un ? fn(args[0], args[1], args[2], args[3])\n                      : fn.call(that, args[0], args[1], args[2], args[3]);\n  } return fn.apply(that, args);\n};\n","var document = require('./_global').document;\nmodule.exports = document && document.documentElement;\n","var toString = {}.toString;\n\nmodule.exports = function (it) {\n  return toString.call(it).slice(8, -1);\n};\n","var ctx = require('./_ctx');\nvar invoke = require('./_invoke');\nvar html = require('./_html');\nvar cel = require('./_dom-create');\nvar global = require('./_global');\nvar process = global.process;\nvar setTask = global.setImmediate;\nvar clearTask = global.clearImmediate;\nvar MessageChannel = global.MessageChannel;\nvar Dispatch = global.Dispatch;\nvar counter = 0;\nvar queue = {};\nvar ONREADYSTATECHANGE = 'onreadystatechange';\nvar defer, channel, port;\nvar run = function () {\n  var id = +this;\n  // eslint-disable-next-line no-prototype-builtins\n  if (queue.hasOwnProperty(id)) {\n    var fn = queue[id];\n    delete queue[id];\n    fn();\n  }\n};\nvar listener = function (event) {\n  run.call(event.data);\n};\n// Node.js 0.9+ & IE10+ has setImmediate, otherwise:\nif (!setTask || !clearTask) {\n  setTask = function setImmediate(fn) {\n    var args = [];\n    var i = 1;\n    while (arguments.length > i) args.push(arguments[i++]);\n    queue[++counter] = function () {\n      // eslint-disable-next-line no-new-func\n      invoke(typeof fn == 'function' ? fn : Function(fn), args);\n    };\n    defer(counter);\n    return counter;\n  };\n  clearTask = function clearImmediate(id) {\n    delete queue[id];\n  };\n  // Node.js 0.8-\n  if (require('./_cof')(process) == 'process') {\n    defer = function (id) {\n      process.nextTick(ctx(run, id, 1));\n    };\n  // Sphere (JS game engine) Dispatch API\n  } else if (Dispatch && Dispatch.now) {\n    defer = function (id) {\n      Dispatch.now(ctx(run, id, 1));\n    };\n  // Browsers with MessageChannel, includes WebWorkers\n  } else if (MessageChannel) {\n    channel = new MessageChannel();\n    port = channel.port2;\n    channel.port1.onmessage = listener;\n    defer = ctx(port.postMessage, port, 1);\n  // Browsers with postMessage, skip WebWorkers\n  // IE8 has postMessage, but it's sync & typeof its postMessage is 'object'\n  } else if (global.addEventListener && typeof postMessage == 'function' && !global.importScripts) {\n    defer = function (id) {\n      global.postMessage(id + '', '*');\n    };\n    global.addEventListener('message', listener, false);\n  // IE8-\n  } else if (ONREADYSTATECHANGE in cel('script')) {\n    defer = function (id) {\n      html.appendChild(cel('script'))[ONREADYSTATECHANGE] = function () {\n        html.removeChild(this);\n        run.call(id);\n      };\n    };\n  // Rest old browsers\n  } else {\n    defer = function (id) {\n      setTimeout(ctx(run, id, 1), 0);\n    };\n  }\n}\nmodule.exports = {\n  set: setTask,\n  clear: clearTask\n};\n","var $export = require('./_export');\nvar $task = require('./_task');\n$export($export.G + $export.B, {\n  setImmediate: $task.set,\n  clearImmediate: $task.clear\n});\n","require('../modules/web.immediate');\nmodule.exports = require('../modules/_core').setImmediate;\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * helper.ts - part of Image Quantization Library\n */\nimport * as setImmediate from 'core-js/fn/set-immediate';\nimport * as distance from './distance';\nimport * as image from './image';\nimport * as palette from './palette';\nimport { AbstractPaletteQuantizer } from './palette/paletteQuantizer';\nimport { AbstractDistanceCalculator } from './distance/distanceCalculator';\nimport { AbstractImageQuantizer } from './image/imageQuantizer';\nimport { PointContainer } from './utils/pointContainer';\nimport { Palette } from './utils/palette';\nimport { ssim } from './quality/ssim';\n\nexport type ColorDistanceFormula =\n  | 'cie94-textiles'\n  | 'cie94-graphic-arts'\n  | 'ciede2000'\n  | 'color-metric'\n  | 'euclidean'\n  | 'euclidean-bt709-noalpha'\n  | 'euclidean-bt709'\n  | 'manhattan'\n  | 'manhattan-bt709'\n  | 'manhattan-nommyde'\n  | 'pngquant';\n\nexport type PaletteQuantization =\n  | 'neuquant'\n  | 'neuquant-float'\n  | 'rgbquant'\n  | 'wuquant';\n\nexport type ImageQuantization =\n  | 'nearest'\n  | 'riemersma'\n  | 'floyd-steinberg'\n  | 'false-floyd-steinberg'\n  | 'stucki'\n  | 'atkinson'\n  | 'jarvis'\n  | 'burkes'\n  | 'sierra'\n  | 'two-sierra'\n  | 'sierra-lite';\n\nexport interface ProgressOptions {\n  onProgress?: (progress: number) => void;\n}\n\nexport interface ApplyPaletteOptions {\n  colorDistanceFormula?: ColorDistanceFormula;\n  imageQuantization?: ImageQuantization;\n}\n\nexport interface BuildPaletteOptions {\n  colorDistanceFormula?: ColorDistanceFormula;\n  paletteQuantization?: PaletteQuantization;\n  colors?: number;\n}\n\nexport function buildPaletteSync(images: PointContainer[], { colorDistanceFormula, paletteQuantization, colors }: BuildPaletteOptions = {}) {\n  const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\n  const paletteQuantizer = paletteQuantizationToPaletteQuantizer(distanceCalculator, paletteQuantization, colors);\n  images.forEach(image => paletteQuantizer.sample(image));\n  return paletteQuantizer.quantizeSync();\n}\n\nexport async function buildPalette(images: PointContainer[], { colorDistanceFormula, paletteQuantization, colors, onProgress }: BuildPaletteOptions & ProgressOptions = {}) {\n  return new Promise<Palette>((resolve, reject) => {\n    const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\n    const paletteQuantizer = paletteQuantizationToPaletteQuantizer(distanceCalculator, paletteQuantization, colors);\n    images.forEach(image => paletteQuantizer.sample(image));\n\n    let palette: Palette;\n    let timerId: number;\n    const iterator = paletteQuantizer.quantize();\n    const next = () => {\n      try {\n        const result = iterator.next();\n        if (result.done) {\n          resolve(palette);\n        } else {\n          if (result.value.palette) palette = result.value.palette;\n          if (onProgress) onProgress(result.value.progress);\n          timerId = setImmediate(next);\n        }\n      } catch (error) {\n        clearTimeout(timerId);\n        reject(error);\n      }\n    };\n    timerId = setImmediate(next);\n  });\n}\n\nexport function applyPaletteSync(image: PointContainer, palette: Palette, { colorDistanceFormula, imageQuantization }: ApplyPaletteOptions = {}) {\n  const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\n  const imageQuantizer = imageQuantizationToImageQuantizer(distanceCalculator, imageQuantization);\n  return imageQuantizer.quantizeSync(image, palette);\n}\n\nexport async function applyPalette(image: PointContainer, palette: Palette, { colorDistanceFormula, imageQuantization, onProgress }: ApplyPaletteOptions & ProgressOptions = {}) {\n  return new Promise<PointContainer>((resolve, reject) => {\n    const distanceCalculator = colorDistanceFormulaToColorDistance(colorDistanceFormula);\n    const imageQuantizer = imageQuantizationToImageQuantizer(distanceCalculator, imageQuantization);\n\n    let outPointContainer: PointContainer;\n    let timerId: number;\n    const iterator = imageQuantizer.quantize(image, palette);\n    const next = () => {\n      try {\n        const result = iterator.next();\n        if (result.done) {\n          resolve(outPointContainer);\n        } else {\n          if (result.value.pointContainer) outPointContainer = result.value.pointContainer;\n          if (onProgress) onProgress(result.value.progress);\n          timerId = setImmediate(next);\n        }\n      } catch (error) {\n        clearTimeout(timerId);\n        reject(error);\n      }\n    };\n    timerId = setImmediate(next);\n  });\n}\n\nfunction colorDistanceFormulaToColorDistance(colorDistanceFormula: ColorDistanceFormula = 'euclidean-bt709') {\n  switch (colorDistanceFormula) {\n    case 'cie94-graphic-arts': return new distance.CIE94GraphicArts();\n    case 'cie94-textiles': return new distance.CIE94Textiles();\n    case 'ciede2000': return new distance.CIEDE2000();\n    case 'color-metric': return new distance.CMetric();\n    case 'euclidean': return new distance.Euclidean();\n    case 'euclidean-bt709': return new distance.EuclideanBT709();\n    case 'euclidean-bt709-noalpha': return new distance.EuclideanBT709NoAlpha();\n    case 'manhattan': return new distance.Manhattan();\n    case 'manhattan-bt709': return new distance.ManhattanBT709();\n    case 'manhattan-nommyde': return new distance.ManhattanNommyde();\n    case 'pngquant': return new distance.PNGQuant();\n    default: throw new Error(`Unknown colorDistanceFormula ${colorDistanceFormula}`);\n  }\n}\n\nfunction imageQuantizationToImageQuantizer(distanceCalculator: AbstractDistanceCalculator, imageQuantization: ImageQuantization = 'floyd-steinberg') {\n  switch (imageQuantization) {\n    case 'nearest': return new image.NearestColor(distanceCalculator);\n    case 'riemersma': return new image.ErrorDiffusionRiemersma(distanceCalculator);\n    case 'floyd-steinberg': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.FloydSteinberg);\n    case 'false-floyd-steinberg': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.FalseFloydSteinberg);\n    case 'stucki': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.Stucki);\n    case 'atkinson': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.Atkinson);\n    case 'jarvis': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.Jarvis);\n    case 'burkes': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.Burkes);\n    case 'sierra': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.Sierra);\n    case 'two-sierra': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.TwoSierra);\n    case 'sierra-lite': return new image.ErrorDiffusionArray(distanceCalculator, image.ErrorDiffusionArrayKernel.SierraLite);\n    default: throw new Error(`Unknown imageQuantization ${imageQuantization}`);\n  }\n}\n\nfunction paletteQuantizationToPaletteQuantizer(distanceCalculator: AbstractDistanceCalculator, paletteQuantization: PaletteQuantization = 'wuquant', colors = 256) {\n  switch (paletteQuantization) {\n    case 'neuquant': return new palette.NeuQuant(distanceCalculator, colors);\n    case 'rgbquant': return new palette.RGBQuant(distanceCalculator, colors);\n    case 'wuquant': return new palette.WuQuant(distanceCalculator, colors);\n    case 'neuquant-float': return new palette.NeuQuantFloat(distanceCalculator, colors);\n    default: throw new Error(`Unknown paletteQuantization ${paletteQuantization}`);\n  }\n}\n","/**\n * @preserve\n * Copyright 2015-2018 Igor Bezkrovnyi\n * All rights reserved. (MIT Licensed)\n *\n * iq.ts - Image Quantization Library\n */\nimport * as constants from './constants';\nimport * as conversion from './conversion';\nimport * as distance from './distance';\nimport * as palette from './palette';\nimport * as image from './image';\nimport * as quality from './quality';\nimport * as utils from './utils';\n\nexport {\n  buildPalette,\n  buildPaletteSync,\n  applyPalette,\n  applyPaletteSync,\n  ImageQuantization,\n  PaletteQuantization,\n  ColorDistanceFormula,\n} from './basicAPI';\n\nexport {\n  constants,\n  conversion,\n  distance,\n  palette,\n  image,\n  quality,\n  utils,\n};\n","function c1(a: ImageData, b: ImageData): number {\r\n  let dist = 0;\r\n  for (let i = 0; i < a.data.length; ++i) {\r\n    const d = Math.abs(a.data[i] / 255.0 - b.data[i] / 255.0);\r\n    dist += d * d;\r\n  }\r\n  return dist;\r\n}\r\n\r\nexport default function compare(a: ImageData, b: ImageData): number {\r\n  return c1(a, b);\r\n}\r\n","function getRandomColor(palette: Uint32Array) {\r\n  if (palette.length > 0) {\r\n    const num = palette[Math.floor(Math.random() * palette.length)];\r\n    //console.log(num.toString(16));\r\n    return \"#\" + num.toString(16).substr(2, 6);\r\n  } else {\r\n    var letters = \"0123456789ABCDEF\";\r\n    var color = \"#\";\r\n    for (var i = 0; i < 6; i++) {\r\n      color += letters[Math.floor(Math.random() * 16)];\r\n    }\r\n    return color;\r\n  }\r\n}\r\n\r\nfunction pointillist(ctx: CanvasRenderingContext2D, palette: Uint32Array) {\r\n  ctx.fillStyle = getRandomColor(palette);\r\n  //ctx.globalAlpha = 0.4 + Math.random() * 0.6;\r\n\r\n  const x = Math.random() * ctx.canvas.width;\r\n  const y = Math.random() * ctx.canvas.height;\r\n  const rx = Math.random() * ctx.canvas.width * 0.03125;\r\n  const ry = rx;\r\n  ctx.beginPath();\r\n  ctx.ellipse(x, y, rx, ry, 0, 0, 2 * Math.PI);\r\n  ctx.fill();\r\n}\r\n\r\nfunction brush1(ctx: CanvasRenderingContext2D, palette: Uint32Array) {\r\n  ctx.fillStyle = getRandomColor(palette);\r\n  //ctx.globalAlpha = 0.4 + Math.random() * 0.6;\r\n\r\n  const x = Math.random() * ctx.canvas.width;\r\n  const y = Math.random() * ctx.canvas.height;\r\n  const rx = Math.random() * ctx.canvas.width * 0.125;\r\n  const ry = Math.random() * ctx.canvas.height * 0.125;\r\n  const rot = Math.random() * Math.PI;\r\n  ctx.beginPath();\r\n  ctx.ellipse(x, y, rx, ry, rot, 0, 2 * Math.PI);\r\n  ctx.fill();\r\n}\r\nfunction brush2(ctx: CanvasRenderingContext2D, palette: Uint32Array) {\r\n  ctx.fillStyle = getRandomColor(palette);\r\n  const x = Math.random() * ctx.canvas.width;\r\n  const y = Math.random() * ctx.canvas.height;\r\n  const rx = Math.random() * ctx.canvas.width * 0.25;\r\n  const ry = Math.random() * ctx.canvas.height * 0.25;\r\n  ctx.beginPath();\r\n  ctx.fillRect(x, y, rx, ry);\r\n}\r\n\r\nfunction brushSmallRound(ctx: CanvasRenderingContext2D, palette: Uint32Array) {\r\n  ctx.fillStyle = getRandomColor(palette);\r\n\r\n  const x = Math.random() * ctx.canvas.width;\r\n  const y = Math.random() * ctx.canvas.height;\r\n  const rx = ctx.canvas.width * 0.025;\r\n  const ry = Math.random() * ctx.canvas.height * 0.25;\r\n  const rot = Math.random() * Math.PI;\r\n  ctx.beginPath();\r\n  ctx.ellipse(x, y, rx, ry, rot, 0, 2 * Math.PI);\r\n  ctx.fill();\r\n}\r\n\r\nfunction brushBox(ctx: CanvasRenderingContext2D, palette: Uint32Array) {\r\n  ctx.fillStyle = getRandomColor(palette);\r\n\r\n  const x = Math.random() * ctx.canvas.width;\r\n  const y = Math.random() * ctx.canvas.height;\r\n  let rx = 0;\r\n  let ry = 0;\r\n  if (Math.random() > 0.49999999) {\r\n    rx = ctx.canvas.width * 0.025;\r\n    ry = Math.random() * ctx.canvas.height * 0.25;\r\n  } else {\r\n    ry = ctx.canvas.height * 0.025;\r\n    rx = Math.random() * ctx.canvas.width * 0.25;\r\n  }\r\n  ctx.beginPath();\r\n  ctx.fillRect(x, y, rx, ry);\r\n}\r\n\r\nexport default function brush(cvs: HTMLCanvasElement, palette: Uint32Array) {\r\n  const ctx = cvs.getContext(\"2d\");\r\n  const brushType = Math.random();\r\n  //   if (brushType < 0.33333333) {\r\n  //     brush1(ctx);\r\n  //   } else if (brushType < 0.6666666) {\r\n  //     brushSmallRound(ctx);\r\n  //   } else if (brushType < 0.833333333) {\r\n  //     brush2(ctx);\r\n  //   } else {\r\n  //     brushBox(ctx);\r\n  //   }\r\n  //pointillist(ctx, palette);\r\n  brush1(ctx, palette);\r\n  //brushSmallRound(ctx);\r\n  //brushBox(ctx);\r\n  //brush2(ctx);\r\n  return ctx.getImageData(0, 0, cvs.width, cvs.height);\r\n}\r\n","import { buildPaletteSync, utils } from \"image-q\";\r\n\r\nimport compare from \"./comparator\";\r\nimport brush from \"./brush\";\r\n\r\nclass PainterApp {\r\n  private statsEl: HTMLParagraphElement;\r\n  private image1: HTMLCanvasElement;\r\n  private image2: HTMLCanvasElement;\r\n  private imageTemp: HTMLCanvasElement;\r\n  private srcimg: HTMLImageElement;\r\n  private sourcePixels: ImageData;\r\n  private similarity: number;\r\n  private palette: Uint32Array;\r\n  private numStrokesKept: number;\r\n  private numStrokesTried: number;\r\n\r\n  public constructor() {\r\n    this.numStrokesTried = 0;\r\n    this.numStrokesKept = 0;\r\n    this.palette = new Uint32Array(0);\r\n    this.similarity = Number.MAX_VALUE;\r\n    this.image1 = document.createElement(\"canvas\");\r\n    this.imageTemp = document.createElement(\"canvas\");\r\n    this.image2 = document.createElement(\"canvas\");\r\n    this.statsEl = document.createElement(\"p\");\r\n    document.body.appendChild(this.image1);\r\n    document.body.appendChild(this.image2);\r\n    document.body.appendChild(this.statsEl);\r\n    this.srcimg = new Image();\r\n    //this.srcimg.crossOrigin = \"Anonymous\";\r\n    this.srcimg.setAttribute(\"crossOrigin\", \"\");\r\n    this.srcimg.onload = this.start.bind(this);\r\n    this.srcimg.src =\r\n      \"https://upload.wikimedia.org/wikipedia/commons/7/71/Grant_DeVolson_Wood_-_American_Gothic.jpg\";\r\n    this.sourcePixels = this.image2\r\n      .getContext(\"2d\")\r\n      .createImageData(this.image2.width, this.image2.height);\r\n    this.iterate = this.iterate.bind(this);\r\n  }\r\n\r\n  public start() {\r\n    const w = this.srcimg.naturalWidth;\r\n    const h = this.srcimg.naturalHeight;\r\n    const a = w / h;\r\n    const tgtw = 200;\r\n    const tgth = 200 / a;\r\n    const ws = \"\" + tgtw + \"px\";\r\n    const hs = \"\" + tgth + \"px\";\r\n    this.image1.style.width = ws;\r\n    this.image1.style.height = hs;\r\n    this.imageTemp.style.width = ws;\r\n    this.imageTemp.style.height = hs;\r\n    this.image2.style.width = ws;\r\n    this.image2.style.height = hs;\r\n\r\n    const ctx = this.image2.getContext(\"2d\");\r\n\r\n    // put our reference image into the srcimg canvas\r\n    ctx.drawImage(\r\n      this.srcimg,\r\n      0,\r\n      0,\r\n      this.srcimg.naturalWidth,\r\n      this.srcimg.naturalHeight,\r\n      0,\r\n      0,\r\n      this.image2.width,\r\n      this.image2.height\r\n    );\r\n    // now grab the downsampled pixels and hold onto them\r\n    this.sourcePixels = ctx.getImageData(\r\n      0,\r\n      0,\r\n      this.image2.width,\r\n      this.image2.height\r\n    );\r\n    // generate the palette.\r\n    const inPointContainer = utils.PointContainer.fromUint8Array(\r\n      this.sourcePixels.data,\r\n      this.sourcePixels.width,\r\n      this.sourcePixels.height\r\n    );\r\n    // convert\r\n    //    this.palette = buildPaletteSync([inPointContainer]);\r\n    const pal = buildPaletteSync([inPointContainer], {\r\n      colorDistanceFormula: \"euclidean\", // optional\r\n      paletteQuantization: \"neuquant\", // optional\r\n      colors: 256, // optional\r\n    });\r\n    this.palette = pal.getPointContainer().toUint32Array();\r\n\r\n    // now we can start painting!\r\n    this.iterate();\r\n  }\r\n\r\n  private iterate() {\r\n    this.numStrokesTried += 1;\r\n    // 1. paint a brush stroke on imageTemp\r\n    const testimage = brush(this.imageTemp, this.palette);\r\n\r\n    // 2. compare images\r\n    const newdiff = compare(testimage, this.sourcePixels);\r\n    //console.log(newdiff);\r\n    // 3. if new distance is less than previous distance,\r\n    //    keep the new image\r\n    if (newdiff < this.similarity) {\r\n      this.similarity = newdiff;\r\n      // copy temp image into image1\r\n      //grab the context from your destination canvas\r\n      var destCtx = this.image1.getContext(\"2d\");\r\n\r\n      //call its drawImage() function passing it the source canvas directly\r\n      destCtx.drawImage(this.imageTemp, 0, 0);\r\n\r\n      this.numStrokesKept += 1;\r\n    }\r\n    // 4. else don't\r\n    else {\r\n      // copy image1 into temp image\r\n      //grab the context from your destination canvas\r\n      var destCtx = this.imageTemp.getContext(\"2d\");\r\n\r\n      //call its drawImage() function passing it the source canvas directly\r\n      destCtx.drawImage(this.image1, 0, 0);\r\n    }\r\n\r\n    const TARGET = 0.1;\r\n    if (this.similarity > TARGET) {\r\n      // update the text readout.\r\n      this.statsEl.innerText =\r\n        \"\" +\r\n        this.numStrokesKept +\r\n        \"/\" +\r\n        this.numStrokesTried +\r\n        \"=\" +\r\n        this.numStrokesKept / this.numStrokesTried;\r\n      requestAnimationFrame(this.iterate);\r\n    } else {\r\n      console.log(\"THRESHOLD ACHIEVED!!!!!\");\r\n    }\r\n  }\r\n}\r\n\r\nconst mypainter = new PainterApp();\r\n"]}